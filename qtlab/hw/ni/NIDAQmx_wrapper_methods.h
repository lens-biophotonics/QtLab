//THIS FILE IS AUTOGENERATED -- DO NOT EDIT
void addGlobalChansToTask(const char channelNames[]);
void startTask();
void stopTask();
void clearTask();
void waitUntilTaskDone(float64 timeToWait);
void waitForValidTimestamp(int32 timestampEvent, float64 timeout,
				CVIAbsoluteTime *timestamp);
bool32 isTaskDone();
void taskControl(int32 action);
void getNthTaskChannel(uInt32 index, char buffer[], int32 bufferSize);
void getNthTaskDevice(uInt32 index, char buffer[], int32 bufferSize);
void createAIVoltageChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      NITask::TerminalConfig terminalConfig, float64 minVal,
			      float64 maxVal, int32 units,
			      const char customScaleName[]);
void createAICurrentChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      NITask::TerminalConfig terminalConfig, float64 minVal,
			      float64 maxVal, int32 units,
			      int32 shuntResistorLoc,
			      float64 extShuntResistorVal,
			      const char customScaleName[]);
void createAIVoltageRMSChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 NITask::TerminalConfig terminalConfig, float64 minVal,
				 float64 maxVal, int32 units,
				 const char customScaleName[]);
void createAICurrentRMSChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 NITask::TerminalConfig terminalConfig, float64 minVal,
				 float64 maxVal, int32 units,
				 int32 shuntResistorLoc,
				 float64 extShuntResistorVal,
				 const char customScaleName[]);
void createAIThrmcplChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      int32 thermocoupleType, int32 cjcSource,
			      float64 cjcVal, const char cjcChannel[]);
void createAIRTDChan(const char physicalChannel[],
			  const char nameToAssignToChannel[], float64 minVal,
			  float64 maxVal, int32 units, int32 rtdType,
			  int32 resistanceConfig, int32 currentExcitSource,
			  float64 currentExcitVal, float64 r0);
void createAIThrmstrChanIex(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 resistanceConfig,
				 int32 currentExcitSource,
				 float64 currentExcitVal, float64 a,
				 float64 b, float64 c);
void createAIThrmstrChanVex(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 resistanceConfig,
				 int32 voltageExcitSource,
				 float64 voltageExcitVal, float64 a,
				 float64 b, float64 c, float64 r1);
void createAIFreqVoltageChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  float64 thresholdLevel, float64 hysteresis,
				  const char customScaleName[]);
void createAIResistanceChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 resistanceConfig,
				 int32 currentExcitSource,
				 float64 currentExcitVal,
				 const char customScaleName[]);
void createAIStrainGageChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 strainConfig, int32 voltageExcitSource,
				 float64 voltageExcitVal, float64 gageFactor,
				 float64 initialBridgeVoltage,
				 float64 nominalGageResistance,
				 float64 poissonRatio,
				 float64 leadWireResistance,
				 const char customScaleName[]);
void createAIRosetteStrainGageChan(const char physicalChannel[],
					const char nameToAssignToChannel[],
					float64 minVal, float64 maxVal,
					int32 rosetteType,
					float64 gageOrientation,
					const int32 rosetteMeasTypes[],
					uInt32 numRosetteMeasTypes,
					int32 strainConfig,
					int32 voltageExcitSource,
					float64 voltageExcitVal,
					float64 gageFactor,
					float64 nominalGageResistance,
					float64 poissonRatio,
					float64 leadWireResistance);
void createAIForceBridgeTwoPointLinChan(const char physicalChannel[],
					     const char nameToAssignToChannel[],
					     float64 minVal, float64 maxVal,
					     int32 units, int32 bridgeConfig,
					     int32 voltageExcitSource,
					     float64 voltageExcitVal,
					     float64 nominalBridgeResistance,
					     float64 firstElectricalVal,
					     float64 secondElectricalVal,
					     int32 electricalUnits,
					     float64 firstPhysicalVal,
					     float64 secondPhysicalVal,
					     int32 physicalUnits,
					     const char customScaleName[]);
void createAIForceBridgeTableChan(const char physicalChannel[],
				       const char nameToAssignToChannel[],
				       float64 minVal, float64 maxVal,
				       int32 units, int32 bridgeConfig,
				       int32 voltageExcitSource,
				       float64 voltageExcitVal,
				       float64 nominalBridgeResistance,
				       const float64 electricalVals[],
				       uInt32 numElectricalVals,
				       int32 electricalUnits,
				       const float64 physicalVals[],
				       uInt32 numPhysicalVals,
				       int32 physicalUnits,
				       const char customScaleName[]);
void createAIForceBridgePolynomialChan(const char physicalChannel[],
					    const char nameToAssignToChannel[],
					    float64 minVal, float64 maxVal,
					    int32 units, int32 bridgeConfig,
					    int32 voltageExcitSource,
					    float64 voltageExcitVal,
					    float64 nominalBridgeResistance,
					    const float64 forwardCoeffs[],
					    uInt32 numForwardCoeffs,
					    const float64 reverseCoeffs[],
					    uInt32 numReverseCoeffs,
					    int32 electricalUnits,
					    int32 physicalUnits,
					    const char customScaleName[]);
void createAIPressureBridgeTwoPointLinChan(const char physicalChannel[],
						const char nameToAssignToChannel[],
						float64 minVal,
						float64 maxVal, int32 units,
						int32 bridgeConfig,
						int32 voltageExcitSource,
						float64 voltageExcitVal,
						float64 nominalBridgeResistance,
						float64 firstElectricalVal,
						float64 secondElectricalVal,
						int32 electricalUnits,
						float64 firstPhysicalVal,
						float64 secondPhysicalVal,
						int32 physicalUnits,
						const char customScaleName[]);
void createAIPressureBridgeTableChan(const char physicalChannel[],
					  const char nameToAssignToChannel[],
					  float64 minVal, float64 maxVal,
					  int32 units, int32 bridgeConfig,
					  int32 voltageExcitSource,
					  float64 voltageExcitVal,
					  float64 nominalBridgeResistance,
					  const float64 electricalVals[],
					  uInt32 numElectricalVals,
					  int32 electricalUnits,
					  const float64 physicalVals[],
					  uInt32 numPhysicalVals,
					  int32 physicalUnits,
					  const char customScaleName[]);
void createAIPressureBridgePolynomialChan(const char physicalChannel[],
					       const char nameToAssignToChannel[],
					       float64 minVal, float64 maxVal,
					       int32 units,
					       int32 bridgeConfig,
					       int32 voltageExcitSource,
					       float64 voltageExcitVal,
					       float64 nominalBridgeResistance,
					       const float64 forwardCoeffs[],
					       uInt32 numForwardCoeffs,
					       const float64 reverseCoeffs[],
					       uInt32 numReverseCoeffs,
					       int32 electricalUnits,
					       int32 physicalUnits,
					       const char customScaleName[]);
void createAITorqueBridgeTwoPointLinChan(const char physicalChannel[],
					      const char nameToAssignToChannel[],
					      float64 minVal, float64 maxVal,
					      int32 units, int32 bridgeConfig,
					      int32 voltageExcitSource,
					      float64 voltageExcitVal,
					      float64 nominalBridgeResistance,
					      float64 firstElectricalVal,
					      float64 secondElectricalVal,
					      int32 electricalUnits,
					      float64 firstPhysicalVal,
					      float64 secondPhysicalVal,
					      int32 physicalUnits,
					      const char customScaleName[]);
void createAITorqueBridgeTableChan(const char physicalChannel[],
					const char nameToAssignToChannel[],
					float64 minVal, float64 maxVal,
					int32 units, int32 bridgeConfig,
					int32 voltageExcitSource,
					float64 voltageExcitVal,
					float64 nominalBridgeResistance,
					const float64 electricalVals[],
					uInt32 numElectricalVals,
					int32 electricalUnits,
					const float64 physicalVals[],
					uInt32 numPhysicalVals,
					int32 physicalUnits,
					const char customScaleName[]);
void createAITorqueBridgePolynomialChan(const char physicalChannel[],
					     const char nameToAssignToChannel[],
					     float64 minVal, float64 maxVal,
					     int32 units, int32 bridgeConfig,
					     int32 voltageExcitSource,
					     float64 voltageExcitVal,
					     float64 nominalBridgeResistance,
					     const float64 forwardCoeffs[],
					     uInt32 numForwardCoeffs,
					     const float64 reverseCoeffs[],
					     uInt32 numReverseCoeffs,
					     int32 electricalUnits,
					     int32 physicalUnits,
					     const char customScaleName[]);
void createAIBridgeChan(const char physicalChannel[],
			     const char nameToAssignToChannel[],
			     float64 minVal, float64 maxVal, int32 units,
			     int32 bridgeConfig, int32 voltageExcitSource,
			     float64 voltageExcitVal,
			     float64 nominalBridgeResistance,
			     const char customScaleName[]);
void createAIVoltageChanWithExcit(const char physicalChannel[],
				       const char nameToAssignToChannel[],
				       NITask::TerminalConfig terminalConfig, float64 minVal,
				       float64 maxVal, int32 units,
				       int32 bridgeConfig,
				       int32 voltageExcitSource,
				       float64 voltageExcitVal,
				       bool32 useExcitForScaling,
				       const char customScaleName[]);
void createAITempBuiltInSensorChan(const char physicalChannel[],
					const char nameToAssignToChannel[],
					int32 units);
void createAIAccelChan(const char physicalChannel[],
			    const char nameToAssignToChannel[],
			    NITask::TerminalConfig terminalConfig, float64 minVal,
			    float64 maxVal, int32 units, float64 sensitivity,
			    int32 sensitivityUnits, int32 currentExcitSource,
			    float64 currentExcitVal,
			    const char customScaleName[]);
void createAIVelocityIEPEChan(const char physicalChannel[],
				   const char nameToAssignToChannel[],
				   NITask::TerminalConfig terminalConfig, float64 minVal,
				   float64 maxVal, int32 units,
				   float64 sensitivity,
				   int32 sensitivityUnits,
				   int32 currentExcitSource,
				   float64 currentExcitVal,
				   const char customScaleName[]);
void createAIForceIEPEChan(const char physicalChannel[],
				const char nameToAssignToChannel[],
				NITask::TerminalConfig terminalConfig, float64 minVal,
				float64 maxVal, int32 units,
				float64 sensitivity, int32 sensitivityUnits,
				int32 currentExcitSource,
				float64 currentExcitVal,
				const char customScaleName[]);
void createAIMicrophoneChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 NITask::TerminalConfig terminalConfig, int32 units,
				 float64 micSensitivity,
				 float64 maxSndPressLevel,
				 int32 currentExcitSource,
				 float64 currentExcitVal,
				 const char customScaleName[]);
void createAIChargeChan(const char physicalChannel[],
			     const char nameToAssignToChannel[],
			     NITask::TerminalConfig terminalConfig, float64 minVal,
			     float64 maxVal, int32 units,
			     const char customScaleName[]);
void createAIAccelChargeChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  NITask::TerminalConfig terminalConfig, float64 minVal,
				  float64 maxVal, int32 units,
				  float64 sensitivity, int32 sensitivityUnits,
				  const char customScaleName[]);
void createAIAccel4WireDCVoltageChan(const char physicalChannel[],
					  const char nameToAssignToChannel[],
					  NITask::TerminalConfig terminalConfig,
					  float64 minVal, float64 maxVal,
					  int32 units, float64 sensitivity,
					  int32 sensitivityUnits,
					  int32 voltageExcitSource,
					  float64 voltageExcitVal,
					  bool32 useExcitForScaling,
					  const char customScaleName[]);
void createAIPosLVDTChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      float64 sensitivity, int32 sensitivityUnits,
			      int32 voltageExcitSource,
			      float64 voltageExcitVal,
			      float64 voltageExcitFreq, int32 ACExcitWireMode,
			      const char customScaleName[]);
void createAIPosRVDTChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      float64 sensitivity, int32 sensitivityUnits,
			      int32 voltageExcitSource,
			      float64 voltageExcitVal,
			      float64 voltageExcitFreq, int32 ACExcitWireMode,
			      const char customScaleName[]);
void createAIPosEddyCurrProxProbeChan(const char physicalChannel[],
					   const char nameToAssignToChannel[],
					   float64 minVal, float64 maxVal,
					   int32 units, float64 sensitivity,
					   int32 sensitivityUnits,
					   const char customScaleName[]);
void createAIDeviceTempChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 int32 units);
void createTEDSAIVoltageChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  NITask::TerminalConfig terminalConfig, float64 minVal,
				  float64 maxVal, int32 units,
				  const char customScaleName[]);
void createTEDSAICurrentChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  NITask::TerminalConfig terminalConfig, float64 minVal,
				  float64 maxVal, int32 units,
				  int32 shuntResistorLoc,
				  float64 extShuntResistorVal,
				  const char customScaleName[]);
void createTEDSAIThrmcplChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  int32 cjcSource, float64 cjcVal,
				  const char cjcChannel[]);
void createTEDSAIRTDChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      int32 resistanceConfig,
			      int32 currentExcitSource,
			      float64 currentExcitVal);
void createTEDSAIThrmstrChanIex(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 resistanceConfig,
				     int32 currentExcitSource,
				     float64 currentExcitVal);
void createTEDSAIThrmstrChanVex(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 resistanceConfig,
				     int32 voltageExcitSource,
				     float64 voltageExcitVal, float64 r1);
void createTEDSAIResistanceChan(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 resistanceConfig,
				     int32 currentExcitSource,
				     float64 currentExcitVal,
				     const char customScaleName[]);
void createTEDSAIStrainGageChan(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 voltageExcitSource,
				     float64 voltageExcitVal,
				     float64 initialBridgeVoltage,
				     float64 leadWireResistance,
				     const char customScaleName[]);
void createTEDSAIForceBridgeChan(const char physicalChannel[],
				      const char nameToAssignToChannel[],
				      float64 minVal, float64 maxVal,
				      int32 units, int32 voltageExcitSource,
				      float64 voltageExcitVal,
				      const char customScaleName[]);
void createTEDSAIPressureBridgeChan(const char physicalChannel[],
					 const char nameToAssignToChannel[],
					 float64 minVal, float64 maxVal,
					 int32 units,
					 int32 voltageExcitSource,
					 float64 voltageExcitVal,
					 const char customScaleName[]);
void createTEDSAITorqueBridgeChan(const char physicalChannel[],
				       const char nameToAssignToChannel[],
				       float64 minVal, float64 maxVal,
				       int32 units, int32 voltageExcitSource,
				       float64 voltageExcitVal,
				       const char customScaleName[]);
void createTEDSAIBridgeChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 voltageExcitSource,
				 float64 voltageExcitVal,
				 const char customScaleName[]);
void createTEDSAIVoltageChanWithExcit(const char physicalChannel[],
					   const char nameToAssignToChannel[],
					   NITask::TerminalConfig terminalConfig,
					   float64 minVal, float64 maxVal,
					   int32 units,
					   int32 voltageExcitSource,
					   float64 voltageExcitVal,
					   const char customScaleName[]);
void createTEDSAIAccelChan(const char physicalChannel[],
				const char nameToAssignToChannel[],
				NITask::TerminalConfig terminalConfig, float64 minVal,
				float64 maxVal, int32 units,
				int32 currentExcitSource,
				float64 currentExcitVal,
				const char customScaleName[]);
void createTEDSAIForceIEPEChan(const char physicalChannel[],
				    const char nameToAssignToChannel[],
				    NITask::TerminalConfig terminalConfig, float64 minVal,
				    float64 maxVal, int32 units,
				    int32 currentExcitSource,
				    float64 currentExcitVal,
				    const char customScaleName[]);
void createTEDSAIMicrophoneChan(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     NITask::TerminalConfig terminalConfig, int32 units,
				     float64 maxSndPressLevel,
				     int32 currentExcitSource,
				     float64 currentExcitVal,
				     const char customScaleName[]);
void createTEDSAIPosLVDTChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  int32 voltageExcitSource,
				  float64 voltageExcitVal,
				  float64 voltageExcitFreq,
				  int32 ACExcitWireMode,
				  const char customScaleName[]);
void createTEDSAIPosRVDTChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  int32 voltageExcitSource,
				  float64 voltageExcitVal,
				  float64 voltageExcitFreq,
				  int32 ACExcitWireMode,
				  const char customScaleName[]);
void createAOVoltageChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      const char customScaleName[]);
void createAOCurrentChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      const char customScaleName[]);
void createAOFuncGenChan(const char physicalChannel[],
			      const char nameToAssignToChannel[], int32 type,
			      float64 freq, float64 amplitude, float64 offset);
void createDIChan(const char lines[], const char nameToAssignToLines[],
		       NITask::LineGrouping lineGrouping);
void createDOChan(const char lines[], const char nameToAssignToLines[],
		       NITask::LineGrouping lineGrouping);
void createCIFreqChan(const char counter[],
			   const char nameToAssignToChannel[], float64 minVal,
			   float64 maxVal, int32 units, NITask::Edge edge,
			   int32 measMethod, float64 measTime, uInt32 divisor,
			   const char customScaleName[]);
void createCIPeriodChan(const char counter[],
			     const char nameToAssignToChannel[],
			     float64 minVal, float64 maxVal, int32 units,
			     NITask::Edge edge, int32 measMethod, float64 measTime,
			     uInt32 divisor, const char customScaleName[]);
void createCICountEdgesChan(const char counter[],
				 const char nameToAssignToChannel[],
				 NITask::Edge edge, uInt32 initialCount,
				 int32 countDirection);
void createCIDutyCycleChan(const char counter[],
				const char nameToAssignToChannel[],
				float64 minFreq, float64 maxFreq, NITask::Edge edge,
				const char customScaleName[]);
void createCIPulseWidthChan(const char counter[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 startingEdge,
				 const char customScaleName[]);
void createCISemiPeriodChan(const char counter[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 const char customScaleName[]);
void createCITwoEdgeSepChan(const char counter[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 firstEdge, int32 secondEdge,
				 const char customScaleName[]);
void createCIPulseChanFreq(const char counter[],
				const char nameToAssignToChannel[],
				float64 minVal, float64 maxVal, int32 units);
void createCIPulseChanTime(const char counter[],
				const char nameToAssignToChannel[],
				float64 minVal, float64 maxVal, int32 units);
void createCIPulseChanTicks(const char counter[],
				 const char nameToAssignToChannel[],
				 const char sourceTerminal[], float64 minVal,
				 float64 maxVal);
void createCILinEncoderChan(const char counter[],
				 const char nameToAssignToChannel[],
				 int32 decodingType, bool32 ZidxEnable,
				 float64 ZidxVal, int32 ZidxPhase,
				 int32 units, float64 distPerPulse,
				 float64 initialPos,
				 const char customScaleName[]);
void createCIAngEncoderChan(const char counter[],
				 const char nameToAssignToChannel[],
				 int32 decodingType, bool32 ZidxEnable,
				 float64 ZidxVal, int32 ZidxPhase,
				 int32 units, uInt32 pulsesPerRev,
				 float64 initialAngle,
				 const char customScaleName[]);
void createCILinVelocityChan(const char counter[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal,
				  int32 decodingType, int32 units,
				  float64 distPerPulse,
				  const char customScaleName[]);
void createCIAngVelocityChan(const char counter[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal,
				  int32 decodingType, int32 units,
				  uInt32 pulsesPerRev,
				  const char customScaleName[]);
void createCIGPSTimestampChan(const char counter[],
				   const char nameToAssignToChannel[],
				   int32 units, int32 syncMethod,
				   const char customScaleName[]);
void createCOPulseChanFreq(const char counter[],
				const char nameToAssignToChannel[],
				int32 units, NITask::IdleState idleState,
				float64 initialDelay, float64 freq,
				float64 dutyCycle);
void createCOPulseChanTime(const char counter[],
				const char nameToAssignToChannel[],
				int32 units, NITask::IdleState idleState,
				float64 initialDelay, float64 lowTime,
				float64 highTime);
void createCOPulseChanTicks(const char counter[],
				 const char nameToAssignToChannel[],
				 const char sourceTerminal[], NITask::IdleState idleState,
				 int32 initialDelay, int32 lowTicks,
				 int32 highTicks);
void getAIChanCalCalDate(const char channelName[], uInt32 *year,
			      uInt32 *month, uInt32 *day, uInt32 *hour,
			      uInt32 *minute);
void setAIChanCalCalDate(const char channelName[], uInt32 year,
			      uInt32 month, uInt32 day, uInt32 hour,
			      uInt32 minute);
void getAIChanCalExpDate(const char channelName[], uInt32 *year,
			      uInt32 *month, uInt32 *day, uInt32 *hour,
			      uInt32 *minute);
void setAIChanCalExpDate(const char channelName[], uInt32 year,
			      uInt32 month, uInt32 day, uInt32 hour,
			      uInt32 minute);
void resetChanAttribute(const char channel[], int32 attribute);
void cfgSampClkTiming(const char source[], float64 rate,
			   NITask::Edge activeEdge, NITask::SampleMode sampleMode,
			   uInt64 sampsPerChan);
void cfgHandshakingTiming(NITask::SampleMode sampleMode, uInt64 sampsPerChan);
void cfgBurstHandshakingTimingImportClock(NITask::SampleMode sampleMode,
					       uInt64 sampsPerChan,
					       float64 sampleClkRate,
					       const char sampleClkSrc[],
					       int32 sampleClkActiveEdge,
					       int32 pauseWhen,
					       int32 readyEventActiveLevel);
void cfgBurstHandshakingTimingExportClock(NITask::SampleMode sampleMode,
					       uInt64 sampsPerChan,
					       float64 sampleClkRate,
					       const char sampleClkOutpTerm[],
					       int32 sampleClkPulsePolarity,
					       int32 pauseWhen,
					       int32 readyEventActiveLevel);
void cfgChangeDetectionTiming(const char risingEdgeChan[],
				   const char fallingEdgeChan[],
				   NITask::SampleMode sampleMode, uInt64 sampsPerChan);
void cfgImplicitTiming(NITask::SampleMode sampleMode, uInt64 sampsPerChan);
void cfgPipelinedSampClkTiming(const char source[], float64 rate,
				    NITask::Edge activeEdge, NITask::SampleMode sampleMode,
				    uInt64 sampsPerChan);
void resetTimingAttribute(int32 attribute);
void resetTimingAttributeEx(const char deviceNames[], int32 attribute);
void disableStartTrig();
void cfgDigEdgeStartTrig(const char triggerSource[], NITask::Edge triggerEdge);
void cfgAnlgEdgeStartTrig(const char triggerSource[], int32 triggerSlope,
			       float64 triggerLevel);
void cfgAnlgMultiEdgeStartTrig(const char triggerSources[],
				    int32 triggerSlopeArray[],
				    float64 triggerLevelArray[],
				    uInt32 arraySize);
void cfgAnlgWindowStartTrig(const char triggerSource[],
				 int32 triggerWhen, float64 windowTop,
				 float64 windowBottom);
void cfgTimeStartTrig(CVIAbsoluteTime when, int32 timescale);
void cfgDigPatternStartTrig(const char triggerSource[],
				 const char triggerPattern[],
				 int32 triggerWhen);
void disableRefTrig();
void cfgDigEdgeRefTrig(const char triggerSource[], NITask::Edge triggerEdge,
			    uInt32 pretriggerSamples);
void cfgAnlgEdgeRefTrig(const char triggerSource[], int32 triggerSlope,
			     float64 triggerLevel, uInt32 pretriggerSamples);
void cfgAnlgMultiEdgeRefTrig(const char triggerSources[],
				  int32 triggerSlopeArray[],
				  float64 triggerLevelArray[],
				  uInt32 pretriggerSamples, uInt32 arraySize);
void cfgAnlgWindowRefTrig(const char triggerSource[], int32 triggerWhen,
			       float64 windowTop, float64 windowBottom,
			       uInt32 pretriggerSamples);
void cfgDigPatternRefTrig(const char triggerSource[],
			       const char triggerPattern[], int32 triggerWhen,
			       uInt32 pretriggerSamples);
void resetTrigAttribute(int32 attribute);
void readAnalogF64(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, float64 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readAnalogScalarF64(float64 timeout, float64 *value);
void readBinaryI16(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, int16 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readBinaryU16(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, uInt16 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readBinaryI32(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, int32 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readBinaryU32(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, uInt32 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readDigitalU8(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, uInt8 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readDigitalU16(int32 numSampsPerChan, float64 timeout,
			 bool32 fillMode, uInt16 readArray[],
			 uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readDigitalU32(int32 numSampsPerChan, float64 timeout,
			 bool32 fillMode, uInt32 readArray[],
			 uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readDigitalScalarU32(float64 timeout, uInt32 *value);
void readDigitalLines(int32 numSampsPerChan, float64 timeout,
			   bool32 fillMode, uInt8 readArray[],
			   uInt32 arraySizeInBytes, int32 *sampsPerChanRead,
			   int32 *numBytesPerSamp);
void readCounterF64(int32 numSampsPerChan, float64 timeout,
			 float64 readArray[], uInt32 arraySizeInSamps,
			 int32 *sampsPerChanRead);
void readCounterU32(int32 numSampsPerChan, float64 timeout,
			 uInt32 readArray[], uInt32 arraySizeInSamps,
			 int32 *sampsPerChanRead);
void readCounterF64Ex(int32 numSampsPerChan, float64 timeout,
			   bool32 fillMode, float64 readArray[],
			   uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readCounterU32Ex(int32 numSampsPerChan, float64 timeout,
			   bool32 fillMode, uInt32 readArray[],
			   uInt32 arraySizeInSamps, int32 *sampsPerChanRead);
void readCounterScalarF64(float64 timeout, float64 *value);
void readCounterScalarU32(float64 timeout, uInt32 *value);
void readCtrFreq(int32 numSampsPerChan, float64 timeout,
		      bool32 interleaved, float64 readArrayFrequency[],
		      float64 readArrayDutyCycle[], uInt32 arraySizeInSamps,
		      int32 *sampsPerChanRead);
void readCtrTime(int32 numSampsPerChan, float64 timeout,
		      bool32 interleaved, float64 readArrayHighTime[],
		      float64 readArrayLowTime[], uInt32 arraySizeInSamps,
		      int32 *sampsPerChanRead);
void readCtrTicks(int32 numSampsPerChan, float64 timeout,
		       bool32 interleaved, uInt32 readArrayHighTicks[],
		       uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps,
		       int32 *sampsPerChanRead);
void readCtrFreqScalar(float64 timeout, float64 *frequency,
			    float64 *dutyCycle);
void readCtrTimeScalar(float64 timeout, float64 *highTime,
			    float64 *lowTime);
void readCtrTicksScalar(float64 timeout, uInt32 *highTicks,
			     uInt32 *lowTicks);
void readRaw(int32 numSampsPerChan, float64 timeout, void *readArray,
		  uInt32 arraySizeInBytes, int32 *sampsRead,
		  int32 *numBytesPerSamp);
void getNthTaskReadChannel(uInt32 index, char buffer[], int32 bufferSize);
void resetReadAttribute(int32 attribute);
void configureLogging(const char filePath[], int32 loggingMode,
			   const char groupName[], int32 operation);
void startNewFile(const char filePath[]);
void writeAnalogF64(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const float64 writeArray[],
			 int32 *sampsPerChanWritten);
void writeAnalogScalarF64(bool32 autoStart, float64 timeout,
			       float64 value);
void writeBinaryI16(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const int16 writeArray[], int32 *sampsPerChanWritten);
void writeBinaryU16(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const uInt16 writeArray[],
			 int32 *sampsPerChanWritten);
void writeBinaryI32(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const int32 writeArray[], int32 *sampsPerChanWritten);
void writeBinaryU32(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const uInt32 writeArray[],
			 int32 *sampsPerChanWritten);
void writeDigitalU8(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const uInt8 writeArray[], int32 *sampsPerChanWritten);
void writeDigitalU16(int32 numSampsPerChan, bool32 autoStart,
			  float64 timeout, NITask::DataLayout dataLayout,
			  const uInt16 writeArray[],
			  int32 *sampsPerChanWritten);
void writeDigitalU32(int32 numSampsPerChan, bool32 autoStart,
			  float64 timeout, NITask::DataLayout dataLayout,
			  const uInt32 writeArray[],
			  int32 *sampsPerChanWritten);
void writeDigitalScalarU32(bool32 autoStart, float64 timeout,
				uInt32 value);
void writeDigitalLines(int32 numSampsPerChan, bool32 autoStart,
			    float64 timeout, NITask::DataLayout dataLayout,
			    const uInt8 writeArray[],
			    int32 *sampsPerChanWritten);
void writeCtrFreq(int32 numSampsPerChan, bool32 autoStart,
		       float64 timeout, NITask::DataLayout dataLayout,
		       const float64 frequency[], const float64 dutyCycle[],
		       int32 *numSampsPerChanWritten);
void writeCtrFreqScalar(bool32 autoStart, float64 timeout,
			     float64 frequency, float64 dutyCycle);
void writeCtrTime(int32 numSampsPerChan, bool32 autoStart,
		       float64 timeout, NITask::DataLayout dataLayout,
		       const float64 highTime[], const float64 lowTime[],
		       int32 *numSampsPerChanWritten);
void writeCtrTimeScalar(bool32 autoStart, float64 timeout,
			     float64 highTime, float64 lowTime);
void writeCtrTicks(int32 numSampsPerChan, bool32 autoStart,
			float64 timeout, NITask::DataLayout dataLayout,
			const uInt32 highTicks[], const uInt32 lowTicks[],
			int32 *numSampsPerChanWritten);
void writeCtrTicksScalar(bool32 autoStart, float64 timeout,
			      uInt32 highTicks, uInt32 lowTicks);
void writeRaw(int32 numSamps, bool32 autoStart, float64 timeout,
		   const void *writeArray, int32 *sampsPerChanWritten);
void resetWriteAttribute(int32 attribute);
void exportSignal(int32 signalID, const char outputTerminal[]);
void resetExportedSignalAttribute(int32 attribute);
void cfgInputBuffer(uInt32 numSampsPerChan);
void cfgOutputBuffer(uInt32 numSampsPerChan);
void resetBufferAttribute(int32 attribute);
void resetSwitchScanAttribute(int32 attribute);
void disableAdvTrig();
void cfgDigEdgeAdvTrig(const char triggerSource[], NITask::Edge triggerEdge);
void sendSoftwareTrigger(int32 triggerID);
void controlWatchdogTask(int32 action);
void cfgWatchdogAOExpirStates(const char channelNames[],
				   const float64 expirStateArray[],
				   const int32 outputTypeArray[],
				   uInt32 arraySize);
void cfgWatchdogCOExpirStates(const char channelNames[],
				   const int32 expirStateArray[],
				   uInt32 arraySize);
void cfgWatchdogDOExpirStates(const char channelNames[],
				   const int32 expirStateArray[],
				   uInt32 arraySize);
void resetWatchdogAttribute(const char lines[], int32 attribute);
void performBridgeOffsetNullingCal(const char channel[]);
void performBridgeOffsetNullingCalEx(const char channel[],
					  bool32 skipUnsupportedChannels);
void performThrmcplLeadOffsetNullingCal(const char channel[],
					     bool32 skipUnsupportedChannels);
void performStrainShuntCal(const char channel[],
				float64 shuntResistorValue,
				int32 shuntResistorLocation,
				bool32 skipUnsupportedChannels);
void performStrainShuntCalEx(const char channel[],
				  float64 shuntResistorValue,
				  int32 shuntResistorLocation,
				  int32 shuntResistorSelect,
				  int32 shuntResistorSource,
				  bool32 skipUnsupportedChannels);
void performBridgeShuntCal(const char channel[],
				float64 shuntResistorValue,
				int32 shuntResistorLocation,
				float64 bridgeResistance,
				bool32 skipUnsupportedChannels);
void performBridgeShuntCalEx(const char channel[],
				  float64 shuntResistorValue,
				  int32 shuntResistorLocation,
				  int32 shuntResistorSelect,
				  int32 shuntResistorSource,
				  float64 bridgeResistance,
				  bool32 skipUnsupportedChannels);
void waitForNextSampleClock(float64 timeout, bool32 *isLate);
void resetRealTimeAttribute(int32 attribute);
void saveTask(const char saveAs[], const char author[], uInt32 options);
void saveGlobalChan(const char channelName[], const char saveAs[],
			 const char author[], uInt32 options);
uInt32 getBufInputBufSize();
void setBufInputBufSize(uInt32 data);
void resetBufInputBufSize();
uInt32 getBufInputOnbrdBufSize();
uInt32 getBufOutputBufSize();
void setBufOutputBufSize(uInt32 data);
void resetBufOutputBufSize();
uInt32 getBufOutputOnbrdBufSize();
void setBufOutputOnbrdBufSize(uInt32 data);
void resetBufOutputOnbrdBufSize();
void getAIMax(const char channel[], float64 *data);
void setAIMax(const char channel[], float64 data);
void resetAIMax(const char channel[]);
void getAIMin(const char channel[], float64 *data);
void setAIMin(const char channel[], float64 data);
void resetAIMin(const char channel[]);
QString getAICustomScaleName(const char channel[]);
void setAICustomScaleName(const char channel[], const char *data);
void resetAICustomScaleName(const char channel[]);
void getAIMeasType(const char channel[], int32 *data);
void getAIVoltageUnits(const char channel[], int32 *data);
void setAIVoltageUnits(const char channel[], int32 data);
void resetAIVoltageUnits(const char channel[]);
void getAIVoltagedBRef(const char channel[], float64 *data);
void setAIVoltagedBRef(const char channel[], float64 data);
void resetAIVoltagedBRef(const char channel[]);
void getAIVoltageACRMSUnits(const char channel[], int32 *data);
void setAIVoltageACRMSUnits(const char channel[], int32 data);
void resetAIVoltageACRMSUnits(const char channel[]);
void getAITempUnits(const char channel[], int32 *data);
void setAITempUnits(const char channel[], int32 data);
void resetAITempUnits(const char channel[]);
void getAIThrmcplType(const char channel[], int32 *data);
void setAIThrmcplType(const char channel[], int32 data);
void resetAIThrmcplType(const char channel[]);
void getAIThrmcplScaleType(const char channel[], int32 *data);
void setAIThrmcplScaleType(const char channel[], int32 data);
void resetAIThrmcplScaleType(const char channel[]);
void getAIThrmcplCJCSrc(const char channel[], int32 *data);
void getAIThrmcplCJCVal(const char channel[], float64 *data);
void setAIThrmcplCJCVal(const char channel[], float64 data);
void resetAIThrmcplCJCVal(const char channel[]);
QString getAIThrmcplCJCChan(const char channel[]);
void getAIRTDType(const char channel[], int32 *data);
void setAIRTDType(const char channel[], int32 data);
void resetAIRTDType(const char channel[]);
void getAIRTDR0(const char channel[], float64 *data);
void setAIRTDR0(const char channel[], float64 data);
void resetAIRTDR0(const char channel[]);
void getAIRTDA(const char channel[], float64 *data);
void setAIRTDA(const char channel[], float64 data);
void resetAIRTDA(const char channel[]);
void getAIRTDB(const char channel[], float64 *data);
void setAIRTDB(const char channel[], float64 data);
void resetAIRTDB(const char channel[]);
void getAIRTDC(const char channel[], float64 *data);
void setAIRTDC(const char channel[], float64 data);
void resetAIRTDC(const char channel[]);
void getAIThrmstrA(const char channel[], float64 *data);
void setAIThrmstrA(const char channel[], float64 data);
void resetAIThrmstrA(const char channel[]);
void getAIThrmstrB(const char channel[], float64 *data);
void setAIThrmstrB(const char channel[], float64 data);
void resetAIThrmstrB(const char channel[]);
void getAIThrmstrC(const char channel[], float64 *data);
void setAIThrmstrC(const char channel[], float64 data);
void resetAIThrmstrC(const char channel[]);
void getAIThrmstrR1(const char channel[], float64 *data);
void setAIThrmstrR1(const char channel[], float64 data);
void resetAIThrmstrR1(const char channel[]);
void getAIForceReadFromChan(const char channel[], bool32 *data);
void setAIForceReadFromChan(const char channel[], bool32 data);
void resetAIForceReadFromChan(const char channel[]);
void getAICurrentUnits(const char channel[], int32 *data);
void setAICurrentUnits(const char channel[], int32 data);
void resetAICurrentUnits(const char channel[]);
void getAICurrentACRMSUnits(const char channel[], int32 *data);
void setAICurrentACRMSUnits(const char channel[], int32 data);
void resetAICurrentACRMSUnits(const char channel[]);
void getAIStrainUnits(const char channel[], int32 *data);
void setAIStrainUnits(const char channel[], int32 data);
void resetAIStrainUnits(const char channel[]);
void getAIStrainGageForceReadFromChan(const char channel[], bool32 *data);
void setAIStrainGageForceReadFromChan(const char channel[], bool32 data);
void resetAIStrainGageForceReadFromChan(const char channel[]);
void getAIStrainGageGageFactor(const char channel[], float64 *data);
void setAIStrainGageGageFactor(const char channel[], float64 data);
void resetAIStrainGageGageFactor(const char channel[]);
void getAIStrainGagePoissonRatio(const char channel[], float64 *data);
void setAIStrainGagePoissonRatio(const char channel[], float64 data);
void resetAIStrainGagePoissonRatio(const char channel[]);
void getAIStrainGageCfg(const char channel[], int32 *data);
void setAIStrainGageCfg(const char channel[], int32 data);
void resetAIStrainGageCfg(const char channel[]);
void getAIRosetteStrainGageRosetteType(const char channel[], int32 *data);
void getAIRosetteStrainGageOrientation(const char channel[],
					    float64 *data);
void setAIRosetteStrainGageOrientation(const char channel[],
					    float64 data);
void resetAIRosetteStrainGageOrientation(const char channel[]);
QString getAIRosetteStrainGageStrainChans(const char channel[]);
void getAIRosetteStrainGageRosetteMeasType(const char channel[],
						int32 *data);
void setAIRosetteStrainGageRosetteMeasType(const char channel[],
						int32 data);
void resetAIRosetteStrainGageRosetteMeasType(const char channel[]);
void getAIResistanceUnits(const char channel[], int32 *data);
void setAIResistanceUnits(const char channel[], int32 data);
void resetAIResistanceUnits(const char channel[]);
void getAIFreqUnits(const char channel[], int32 *data);
void setAIFreqUnits(const char channel[], int32 data);
void resetAIFreqUnits(const char channel[]);
void getAIFreqThreshVoltage(const char channel[], float64 *data);
void setAIFreqThreshVoltage(const char channel[], float64 data);
void resetAIFreqThreshVoltage(const char channel[]);
void getAIFreqHyst(const char channel[], float64 *data);
void setAIFreqHyst(const char channel[], float64 data);
void resetAIFreqHyst(const char channel[]);
void getAILVDTUnits(const char channel[], int32 *data);
void setAILVDTUnits(const char channel[], int32 data);
void resetAILVDTUnits(const char channel[]);
void getAILVDTSensitivity(const char channel[], float64 *data);
void setAILVDTSensitivity(const char channel[], float64 data);
void resetAILVDTSensitivity(const char channel[]);
void getAILVDTSensitivityUnits(const char channel[], int32 *data);
void setAILVDTSensitivityUnits(const char channel[], int32 data);
void resetAILVDTSensitivityUnits(const char channel[]);
void getAIRVDTUnits(const char channel[], int32 *data);
void setAIRVDTUnits(const char channel[], int32 data);
void resetAIRVDTUnits(const char channel[]);
void getAIRVDTSensitivity(const char channel[], float64 *data);
void setAIRVDTSensitivity(const char channel[], float64 data);
void resetAIRVDTSensitivity(const char channel[]);
void getAIRVDTSensitivityUnits(const char channel[], int32 *data);
void setAIRVDTSensitivityUnits(const char channel[], int32 data);
void resetAIRVDTSensitivityUnits(const char channel[]);
void getAIEddyCurrentProxProbeUnits(const char channel[], int32 *data);
void setAIEddyCurrentProxProbeUnits(const char channel[], int32 data);
void resetAIEddyCurrentProxProbeUnits(const char channel[]);
void getAIEddyCurrentProxProbeSensitivity(const char channel[],
					       float64 *data);
void setAIEddyCurrentProxProbeSensitivity(const char channel[],
					       float64 data);
void resetAIEddyCurrentProxProbeSensitivity(const char channel[]);
void getAIEddyCurrentProxProbeSensitivityUnits(const char channel[],
						    int32 *data);
void setAIEddyCurrentProxProbeSensitivityUnits(const char channel[],
						    int32 data);
void resetAIEddyCurrentProxProbeSensitivityUnits(const char channel[]);
void getAISoundPressureMaxSoundPressureLvl(const char channel[],
						float64 *data);
void setAISoundPressureMaxSoundPressureLvl(const char channel[],
						float64 data);
void resetAISoundPressureMaxSoundPressureLvl(const char channel[]);
void getAISoundPressureUnits(const char channel[], int32 *data);
void setAISoundPressureUnits(const char channel[], int32 data);
void resetAISoundPressureUnits(const char channel[]);
void getAISoundPressuredBRef(const char channel[], float64 *data);
void setAISoundPressuredBRef(const char channel[], float64 data);
void resetAISoundPressuredBRef(const char channel[]);
void getAIMicrophoneSensitivity(const char channel[], float64 *data);
void setAIMicrophoneSensitivity(const char channel[], float64 data);
void resetAIMicrophoneSensitivity(const char channel[]);
void getAIAccelUnits(const char channel[], int32 *data);
void setAIAccelUnits(const char channel[], int32 data);
void resetAIAccelUnits(const char channel[]);
void getAIAcceldBRef(const char channel[], float64 *data);
void setAIAcceldBRef(const char channel[], float64 data);
void resetAIAcceldBRef(const char channel[]);
void getAIAccel4WireDCVoltageSensitivity(const char channel[],
					      float64 *data);
void setAIAccel4WireDCVoltageSensitivity(const char channel[],
					      float64 data);
void resetAIAccel4WireDCVoltageSensitivity(const char channel[]);
void getAIAccel4WireDCVoltageSensitivityUnits(const char channel[],
						   int32 *data);
void setAIAccel4WireDCVoltageSensitivityUnits(const char channel[],
						   int32 data);
void resetAIAccel4WireDCVoltageSensitivityUnits(const char channel[]);
void getAIAccelSensitivity(const char channel[], float64 *data);
void setAIAccelSensitivity(const char channel[], float64 data);
void resetAIAccelSensitivity(const char channel[]);
void getAIAccelSensitivityUnits(const char channel[], int32 *data);
void setAIAccelSensitivityUnits(const char channel[], int32 data);
void resetAIAccelSensitivityUnits(const char channel[]);
void getAIAccelChargeSensitivity(const char channel[], float64 *data);
void setAIAccelChargeSensitivity(const char channel[], float64 data);
void resetAIAccelChargeSensitivity(const char channel[]);
void getAIAccelChargeSensitivityUnits(const char channel[], int32 *data);
void setAIAccelChargeSensitivityUnits(const char channel[], int32 data);
void resetAIAccelChargeSensitivityUnits(const char channel[]);
void getAIVelocityUnits(const char channel[], int32 *data);
void setAIVelocityUnits(const char channel[], int32 data);
void resetAIVelocityUnits(const char channel[]);
void getAIVelocityIEPESensordBRef(const char channel[], float64 *data);
void setAIVelocityIEPESensordBRef(const char channel[], float64 data);
void resetAIVelocityIEPESensordBRef(const char channel[]);
void getAIVelocityIEPESensorSensitivity(const char channel[],
					     float64 *data);
void setAIVelocityIEPESensorSensitivity(const char channel[],
					     float64 data);
void resetAIVelocityIEPESensorSensitivity(const char channel[]);
void getAIVelocityIEPESensorSensitivityUnits(const char channel[],
						  int32 *data);
void setAIVelocityIEPESensorSensitivityUnits(const char channel[],
						  int32 data);
void resetAIVelocityIEPESensorSensitivityUnits(const char channel[]);
void getAIForceUnits(const char channel[], int32 *data);
void setAIForceUnits(const char channel[], int32 data);
void resetAIForceUnits(const char channel[]);
void getAIForceIEPESensorSensitivity(const char channel[], float64 *data);
void setAIForceIEPESensorSensitivity(const char channel[], float64 data);
void resetAIForceIEPESensorSensitivity(const char channel[]);
void getAIForceIEPESensorSensitivityUnits(const char channel[],
					       int32 *data);
void setAIForceIEPESensorSensitivityUnits(const char channel[],
					       int32 data);
void resetAIForceIEPESensorSensitivityUnits(const char channel[]);
void getAIPressureUnits(const char channel[], int32 *data);
void setAIPressureUnits(const char channel[], int32 data);
void resetAIPressureUnits(const char channel[]);
void getAITorqueUnits(const char channel[], int32 *data);
void setAITorqueUnits(const char channel[], int32 data);
void resetAITorqueUnits(const char channel[]);
void getAIBridgeUnits(const char channel[], int32 *data);
void setAIBridgeUnits(const char channel[], int32 data);
void resetAIBridgeUnits(const char channel[]);
void getAIBridgeElectricalUnits(const char channel[], int32 *data);
void setAIBridgeElectricalUnits(const char channel[], int32 data);
void resetAIBridgeElectricalUnits(const char channel[]);
void getAIBridgePhysicalUnits(const char channel[], int32 *data);
void setAIBridgePhysicalUnits(const char channel[], int32 data);
void resetAIBridgePhysicalUnits(const char channel[]);
void getAIBridgeScaleType(const char channel[], int32 *data);
void setAIBridgeScaleType(const char channel[], int32 data);
void resetAIBridgeScaleType(const char channel[]);
void getAIBridgeTwoPointLinFirstElectricalVal(const char channel[],
						   float64 *data);
void setAIBridgeTwoPointLinFirstElectricalVal(const char channel[],
						   float64 data);
void resetAIBridgeTwoPointLinFirstElectricalVal(const char channel[]);
void getAIBridgeTwoPointLinFirstPhysicalVal(const char channel[],
						 float64 *data);
void setAIBridgeTwoPointLinFirstPhysicalVal(const char channel[],
						 float64 data);
void resetAIBridgeTwoPointLinFirstPhysicalVal(const char channel[]);
void getAIBridgeTwoPointLinSecondElectricalVal(const char channel[],
						    float64 *data);
void setAIBridgeTwoPointLinSecondElectricalVal(const char channel[],
						    float64 data);
void resetAIBridgeTwoPointLinSecondElectricalVal(const char channel[]);
void getAIBridgeTwoPointLinSecondPhysicalVal(const char channel[],
						  float64 *data);
void setAIBridgeTwoPointLinSecondPhysicalVal(const char channel[],
						  float64 data);
void resetAIBridgeTwoPointLinSecondPhysicalVal(const char channel[]);
void getAIBridgeTableElectricalVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements);
void setAIBridgeTableElectricalVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements);
void resetAIBridgeTableElectricalVals(const char channel[]);
void getAIBridgeTablePhysicalVals(const char channel[], float64 *data,
				       uInt32 arraySizeInElements);
void setAIBridgeTablePhysicalVals(const char channel[], float64 *data,
				       uInt32 arraySizeInElements);
void resetAIBridgeTablePhysicalVals(const char channel[]);
void getAIBridgePolyForwardCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements);
void setAIBridgePolyForwardCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements);
void resetAIBridgePolyForwardCoeff(const char channel[]);
void getAIBridgePolyReverseCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements);
void setAIBridgePolyReverseCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements);
void resetAIBridgePolyReverseCoeff(const char channel[]);
void getAIChargeUnits(const char channel[], int32 *data);
void setAIChargeUnits(const char channel[], int32 data);
void resetAIChargeUnits(const char channel[]);
void getAIIsTEDS(const char channel[], bool32 *data);
QString getAITEDSUnits(const char channel[]);
void getAICoupling(const char channel[], int32 *data);
void setAICoupling(const char channel[], int32 data);
void resetAICoupling(const char channel[]);
void getAIImpedance(const char channel[], float64 *data);
void setAIImpedance(const char channel[], float64 data);
void resetAIImpedance(const char channel[]);
void getAITermCfg(const char channel[], int32 *data);
void setAITermCfg(const char channel[], int32 data);
void resetAITermCfg(const char channel[]);
QString getAIInputSrc(const char channel[]);
void setAIInputSrc(const char channel[], const char *data);
void resetAIInputSrc(const char channel[]);
void getAIResistanceCfg(const char channel[], int32 *data);
void setAIResistanceCfg(const char channel[], int32 data);
void resetAIResistanceCfg(const char channel[]);
void getAILeadWireResistance(const char channel[], float64 *data);
void setAILeadWireResistance(const char channel[], float64 data);
void resetAILeadWireResistance(const char channel[]);
void getAIBridgeCfg(const char channel[], int32 *data);
void setAIBridgeCfg(const char channel[], int32 data);
void resetAIBridgeCfg(const char channel[]);
void getAIBridgeNomResistance(const char channel[], float64 *data);
void setAIBridgeNomResistance(const char channel[], float64 data);
void resetAIBridgeNomResistance(const char channel[]);
void getAIBridgeInitialVoltage(const char channel[], float64 *data);
void setAIBridgeInitialVoltage(const char channel[], float64 data);
void resetAIBridgeInitialVoltage(const char channel[]);
void getAIBridgeInitialRatio(const char channel[], float64 *data);
void setAIBridgeInitialRatio(const char channel[], float64 data);
void resetAIBridgeInitialRatio(const char channel[]);
void getAIBridgeShuntCalEnable(const char channel[], bool32 *data);
void setAIBridgeShuntCalEnable(const char channel[], bool32 data);
void resetAIBridgeShuntCalEnable(const char channel[]);
void getAIBridgeShuntCalSelect(const char channel[], int32 *data);
void setAIBridgeShuntCalSelect(const char channel[], int32 data);
void resetAIBridgeShuntCalSelect(const char channel[]);
void getAIBridgeShuntCalShuntCalASrc(const char channel[], int32 *data);
void setAIBridgeShuntCalShuntCalASrc(const char channel[], int32 data);
void resetAIBridgeShuntCalShuntCalASrc(const char channel[]);
void getAIBridgeShuntCalGainAdjust(const char channel[], float64 *data);
void setAIBridgeShuntCalGainAdjust(const char channel[], float64 data);
void resetAIBridgeShuntCalGainAdjust(const char channel[]);
void getAIBridgeShuntCalShuntCalAResistance(const char channel[],
						 float64 *data);
void setAIBridgeShuntCalShuntCalAResistance(const char channel[],
						 float64 data);
void resetAIBridgeShuntCalShuntCalAResistance(const char channel[]);
void getAIBridgeShuntCalShuntCalAActualResistance(const char channel[],
						       float64 *data);
void setAIBridgeShuntCalShuntCalAActualResistance(const char channel[],
						       float64 data);
void resetAIBridgeShuntCalShuntCalAActualResistance(const char channel[]);
void getAIBridgeShuntCalShuntCalBResistance(const char channel[],
						 float64 *data);
void setAIBridgeShuntCalShuntCalBResistance(const char channel[],
						 float64 data);
void resetAIBridgeShuntCalShuntCalBResistance(const char channel[]);
void getAIBridgeShuntCalShuntCalBActualResistance(const char channel[],
						       float64 *data);
void setAIBridgeShuntCalShuntCalBActualResistance(const char channel[],
						       float64 data);
void resetAIBridgeShuntCalShuntCalBActualResistance(const char channel[]);
void getAIBridgeBalanceCoarsePot(const char channel[], int32 *data);
void setAIBridgeBalanceCoarsePot(const char channel[], int32 data);
void resetAIBridgeBalanceCoarsePot(const char channel[]);
void getAIBridgeBalanceFinePot(const char channel[], int32 *data);
void setAIBridgeBalanceFinePot(const char channel[], int32 data);
void resetAIBridgeBalanceFinePot(const char channel[]);
void getAICurrentShuntLoc(const char channel[], int32 *data);
void setAICurrentShuntLoc(const char channel[], int32 data);
void resetAICurrentShuntLoc(const char channel[]);
void getAICurrentShuntResistance(const char channel[], float64 *data);
void setAICurrentShuntResistance(const char channel[], float64 data);
void resetAICurrentShuntResistance(const char channel[]);
void getAIExcitSense(const char channel[], int32 *data);
void setAIExcitSense(const char channel[], int32 data);
void resetAIExcitSense(const char channel[]);
void getAIExcitSrc(const char channel[], int32 *data);
void setAIExcitSrc(const char channel[], int32 data);
void resetAIExcitSrc(const char channel[]);
void getAIExcitVal(const char channel[], float64 *data);
void setAIExcitVal(const char channel[], float64 data);
void resetAIExcitVal(const char channel[]);
void getAIExcitUseForScaling(const char channel[], bool32 *data);
void setAIExcitUseForScaling(const char channel[], bool32 data);
void resetAIExcitUseForScaling(const char channel[]);
void getAIExcitUseMultiplexed(const char channel[], bool32 *data);
void setAIExcitUseMultiplexed(const char channel[], bool32 data);
void resetAIExcitUseMultiplexed(const char channel[]);
void getAIExcitActualVal(const char channel[], float64 *data);
void setAIExcitActualVal(const char channel[], float64 data);
void resetAIExcitActualVal(const char channel[]);
void getAIExcitDCorAC(const char channel[], int32 *data);
void setAIExcitDCorAC(const char channel[], int32 data);
void resetAIExcitDCorAC(const char channel[]);
void getAIExcitVoltageOrCurrent(const char channel[], int32 *data);
void setAIExcitVoltageOrCurrent(const char channel[], int32 data);
void resetAIExcitVoltageOrCurrent(const char channel[]);
void getAIExcitIdleOutputBehavior(const char channel[], int32 *data);
void setAIExcitIdleOutputBehavior(const char channel[], int32 data);
void resetAIExcitIdleOutputBehavior(const char channel[]);
void getAIACExcitFreq(const char channel[], float64 *data);
void setAIACExcitFreq(const char channel[], float64 data);
void resetAIACExcitFreq(const char channel[]);
void getAIACExcitSyncEnable(const char channel[], bool32 *data);
void setAIACExcitSyncEnable(const char channel[], bool32 data);
void resetAIACExcitSyncEnable(const char channel[]);
void getAIACExcitWireMode(const char channel[], int32 *data);
void setAIACExcitWireMode(const char channel[], int32 data);
void resetAIACExcitWireMode(const char channel[]);
void getAISensorPowerVoltage(const char channel[], float64 *data);
void setAISensorPowerVoltage(const char channel[], float64 data);
void resetAISensorPowerVoltage(const char channel[]);
void getAISensorPowerCfg(const char channel[], int32 *data);
void setAISensorPowerCfg(const char channel[], int32 data);
void resetAISensorPowerCfg(const char channel[]);
void getAISensorPowerType(const char channel[], int32 *data);
void setAISensorPowerType(const char channel[], int32 data);
void resetAISensorPowerType(const char channel[]);
void getAIOpenThrmcplDetectEnable(const char channel[], bool32 *data);
void setAIOpenThrmcplDetectEnable(const char channel[], bool32 data);
void resetAIOpenThrmcplDetectEnable(const char channel[]);
void getAIThrmcplLeadOffsetVoltage(const char channel[], float64 *data);
void setAIThrmcplLeadOffsetVoltage(const char channel[], float64 data);
void resetAIThrmcplLeadOffsetVoltage(const char channel[]);
void getAIAtten(const char channel[], float64 *data);
void setAIAtten(const char channel[], float64 data);
void resetAIAtten(const char channel[]);
void getAIProbeAtten(const char channel[], float64 *data);
void setAIProbeAtten(const char channel[], float64 data);
void resetAIProbeAtten(const char channel[]);
void getAILowpassEnable(const char channel[], bool32 *data);
void setAILowpassEnable(const char channel[], bool32 data);
void resetAILowpassEnable(const char channel[]);
void getAILowpassCutoffFreq(const char channel[], float64 *data);
void setAILowpassCutoffFreq(const char channel[], float64 data);
void resetAILowpassCutoffFreq(const char channel[]);
void getAILowpassSwitchCapClkSrc(const char channel[], int32 *data);
void setAILowpassSwitchCapClkSrc(const char channel[], int32 data);
void resetAILowpassSwitchCapClkSrc(const char channel[]);
void getAILowpassSwitchCapExtClkFreq(const char channel[], float64 *data);
void setAILowpassSwitchCapExtClkFreq(const char channel[], float64 data);
void resetAILowpassSwitchCapExtClkFreq(const char channel[]);
void getAILowpassSwitchCapExtClkDiv(const char channel[], uInt32 *data);
void setAILowpassSwitchCapExtClkDiv(const char channel[], uInt32 data);
void resetAILowpassSwitchCapExtClkDiv(const char channel[]);
void getAILowpassSwitchCapOutClkDiv(const char channel[], uInt32 *data);
void setAILowpassSwitchCapOutClkDiv(const char channel[], uInt32 data);
void resetAILowpassSwitchCapOutClkDiv(const char channel[]);
void getAIDigFltrEnable(const char channel[], bool32 *data);
void setAIDigFltrEnable(const char channel[], bool32 data);
void resetAIDigFltrEnable(const char channel[]);
void getAIDigFltrType(const char channel[], int32 *data);
void setAIDigFltrType(const char channel[], int32 data);
void resetAIDigFltrType(const char channel[]);
void getAIDigFltrResponse(const char channel[], int32 *data);
void setAIDigFltrResponse(const char channel[], int32 data);
void resetAIDigFltrResponse(const char channel[]);
void getAIDigFltrOrder(const char channel[], uInt32 *data);
void setAIDigFltrOrder(const char channel[], uInt32 data);
void resetAIDigFltrOrder(const char channel[]);
void getAIDigFltrLowpassCutoffFreq(const char channel[], float64 *data);
void setAIDigFltrLowpassCutoffFreq(const char channel[], float64 data);
void resetAIDigFltrLowpassCutoffFreq(const char channel[]);
void getAIDigFltrHighpassCutoffFreq(const char channel[], float64 *data);
void setAIDigFltrHighpassCutoffFreq(const char channel[], float64 data);
void resetAIDigFltrHighpassCutoffFreq(const char channel[]);
void getAIDigFltrBandpassCenterFreq(const char channel[], float64 *data);
void setAIDigFltrBandpassCenterFreq(const char channel[], float64 data);
void resetAIDigFltrBandpassCenterFreq(const char channel[]);
void getAIDigFltrBandpassWidth(const char channel[], float64 *data);
void setAIDigFltrBandpassWidth(const char channel[], float64 data);
void resetAIDigFltrBandpassWidth(const char channel[]);
void getAIDigFltrNotchCenterFreq(const char channel[], float64 *data);
void setAIDigFltrNotchCenterFreq(const char channel[], float64 data);
void resetAIDigFltrNotchCenterFreq(const char channel[]);
void getAIDigFltrNotchWidth(const char channel[], float64 *data);
void setAIDigFltrNotchWidth(const char channel[], float64 data);
void resetAIDigFltrNotchWidth(const char channel[]);
void getAIDigFltrCoeff(const char channel[], float64 *data,
			    uInt32 arraySizeInElements);
void setAIDigFltrCoeff(const char channel[], float64 *data,
			    uInt32 arraySizeInElements);
void resetAIDigFltrCoeff(const char channel[]);
void getAIFilterEnable(const char channel[], bool32 *data);
void setAIFilterEnable(const char channel[], bool32 data);
void resetAIFilterEnable(const char channel[]);
void getAIFilterFreq(const char channel[], float64 *data);
void setAIFilterFreq(const char channel[], float64 data);
void resetAIFilterFreq(const char channel[]);
void getAIFilterResponse(const char channel[], int32 *data);
void setAIFilterResponse(const char channel[], int32 data);
void resetAIFilterResponse(const char channel[]);
void getAIFilterOrder(const char channel[], uInt32 *data);
void setAIFilterOrder(const char channel[], uInt32 data);
void resetAIFilterOrder(const char channel[]);
void getAIFilterDelay(const char channel[], float64 *data);
void getAIFilterDelayUnits(const char channel[], int32 *data);
void setAIFilterDelayUnits(const char channel[], int32 data);
void resetAIFilterDelayUnits(const char channel[]);
void getAIRemoveFilterDelay(const char channel[], bool32 *data);
void setAIRemoveFilterDelay(const char channel[], bool32 data);
void resetAIRemoveFilterDelay(const char channel[]);
void getAIFilterDelayAdjustment(const char channel[], float64 *data);
void setAIFilterDelayAdjustment(const char channel[], float64 data);
void resetAIFilterDelayAdjustment(const char channel[]);
void getAIAveragingWinSize(const char channel[], uInt32 *data);
void setAIAveragingWinSize(const char channel[], uInt32 data);
void resetAIAveragingWinSize(const char channel[]);
void getAIResolutionUnits(const char channel[], int32 *data);
void getAIResolution(const char channel[], float64 *data);
void getAIRawSampSize(const char channel[], uInt32 *data);
void getAIRawSampJustification(const char channel[], int32 *data);
void getAIADCTimingMode(const char channel[], int32 *data);
void setAIADCTimingMode(const char channel[], int32 data);
void resetAIADCTimingMode(const char channel[]);
void getAIADCCustomTimingMode(const char channel[], uInt32 *data);
void setAIADCCustomTimingMode(const char channel[], uInt32 data);
void resetAIADCCustomTimingMode(const char channel[]);
void getAIDitherEnable(const char channel[], bool32 *data);
void setAIDitherEnable(const char channel[], bool32 data);
void resetAIDitherEnable(const char channel[]);
void getAIChanCalHasValidCalInfo(const char channel[], bool32 *data);
void getAIChanCalEnableCal(const char channel[], bool32 *data);
void setAIChanCalEnableCal(const char channel[], bool32 data);
void resetAIChanCalEnableCal(const char channel[]);
void getAIChanCalApplyCalIfExp(const char channel[], bool32 *data);
void setAIChanCalApplyCalIfExp(const char channel[], bool32 data);
void resetAIChanCalApplyCalIfExp(const char channel[]);
void getAIChanCalScaleType(const char channel[], int32 *data);
void setAIChanCalScaleType(const char channel[], int32 data);
void resetAIChanCalScaleType(const char channel[]);
void getAIChanCalTablePreScaledVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements);
void setAIChanCalTablePreScaledVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements);
void resetAIChanCalTablePreScaledVals(const char channel[]);
void getAIChanCalTableScaledVals(const char channel[], float64 *data,
				      uInt32 arraySizeInElements);
void setAIChanCalTableScaledVals(const char channel[], float64 *data,
				      uInt32 arraySizeInElements);
void resetAIChanCalTableScaledVals(const char channel[]);
void getAIChanCalPolyForwardCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements);
void setAIChanCalPolyForwardCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements);
void resetAIChanCalPolyForwardCoeff(const char channel[]);
void getAIChanCalPolyReverseCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements);
void setAIChanCalPolyReverseCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements);
void resetAIChanCalPolyReverseCoeff(const char channel[]);
QString getAIChanCalOperatorName(const char channel[]);
void setAIChanCalOperatorName(const char channel[], const char *data);
void resetAIChanCalOperatorName(const char channel[]);
QString getAIChanCalDesc(const char channel[]);
void setAIChanCalDesc(const char channel[], const char *data);
void resetAIChanCalDesc(const char channel[]);
void getAIChanCalVerifRefVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements);
void setAIChanCalVerifRefVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements);
void resetAIChanCalVerifRefVals(const char channel[]);
void getAIChanCalVerifAcqVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements);
void setAIChanCalVerifAcqVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements);
void resetAIChanCalVerifAcqVals(const char channel[]);
void getAIRngHigh(const char channel[], float64 *data);
void setAIRngHigh(const char channel[], float64 data);
void resetAIRngHigh(const char channel[]);
void getAIRngLow(const char channel[], float64 *data);
void setAIRngLow(const char channel[], float64 data);
void resetAIRngLow(const char channel[]);
void getAIDCOffset(const char channel[], float64 *data);
void setAIDCOffset(const char channel[], float64 data);
void resetAIDCOffset(const char channel[]);
void getAIGain(const char channel[], float64 *data);
void setAIGain(const char channel[], float64 data);
void resetAIGain(const char channel[]);
void getAISampAndHoldEnable(const char channel[], bool32 *data);
void setAISampAndHoldEnable(const char channel[], bool32 data);
void resetAISampAndHoldEnable(const char channel[]);
void getAIAutoZeroMode(const char channel[], int32 *data);
void setAIAutoZeroMode(const char channel[], int32 data);
void resetAIAutoZeroMode(const char channel[]);
void getAIChopEnable(const char channel[], bool32 *data);
void setAIChopEnable(const char channel[], bool32 data);
void resetAIChopEnable(const char channel[]);
void getAIDataXferMaxRate(const char channel[], float64 *data);
void setAIDataXferMaxRate(const char channel[], float64 data);
void resetAIDataXferMaxRate(const char channel[]);
void getAIDataXferMech(const char channel[], int32 *data);
void setAIDataXferMech(const char channel[], int32 data);
void resetAIDataXferMech(const char channel[]);
void getAIDataXferReqCond(const char channel[], int32 *data);
void setAIDataXferReqCond(const char channel[], int32 data);
void resetAIDataXferReqCond(const char channel[]);
void getAIDataXferCustomThreshold(const char channel[], uInt32 *data);
void setAIDataXferCustomThreshold(const char channel[], uInt32 data);
void resetAIDataXferCustomThreshold(const char channel[]);
void getAIUsbXferReqSize(const char channel[], uInt32 *data);
void setAIUsbXferReqSize(const char channel[], uInt32 data);
void resetAIUsbXferReqSize(const char channel[]);
void getAIUsbXferReqCount(const char channel[], uInt32 *data);
void setAIUsbXferReqCount(const char channel[], uInt32 data);
void resetAIUsbXferReqCount(const char channel[]);
void getAIMemMapEnable(const char channel[], bool32 *data);
void setAIMemMapEnable(const char channel[], bool32 data);
void resetAIMemMapEnable(const char channel[]);
void getAIRawDataCompressionType(const char channel[], int32 *data);
void setAIRawDataCompressionType(const char channel[], int32 data);
void resetAIRawDataCompressionType(const char channel[]);
void getAILossyLSBRemovalCompressedSampSize(const char channel[],
						 uInt32 *data);
void setAILossyLSBRemovalCompressedSampSize(const char channel[],
						 uInt32 data);
void resetAILossyLSBRemovalCompressedSampSize(const char channel[]);
void getAIDevScalingCoeff(const char channel[], float64 *data,
			       uInt32 arraySizeInElements);
void getAIEnhancedAliasRejectionEnable(const char channel[],
					    bool32 *data);
void setAIEnhancedAliasRejectionEnable(const char channel[], bool32 data);
void resetAIEnhancedAliasRejectionEnable(const char channel[]);
void getAIOpenChanDetectEnable(const char channel[], bool32 *data);
void setAIOpenChanDetectEnable(const char channel[], bool32 data);
void resetAIOpenChanDetectEnable(const char channel[]);
void getAIInputLimitsFaultDetectUpperLimit(const char channel[],
						float64 *data);
void setAIInputLimitsFaultDetectUpperLimit(const char channel[],
						float64 data);
void resetAIInputLimitsFaultDetectUpperLimit(const char channel[]);
void getAIInputLimitsFaultDetectLowerLimit(const char channel[],
						float64 *data);
void setAIInputLimitsFaultDetectLowerLimit(const char channel[],
						float64 data);
void resetAIInputLimitsFaultDetectLowerLimit(const char channel[]);
void getAIInputLimitsFaultDetectEnable(const char channel[],
					    bool32 *data);
void setAIInputLimitsFaultDetectEnable(const char channel[], bool32 data);
void resetAIInputLimitsFaultDetectEnable(const char channel[]);
void getAIPowerSupplyFaultDetectEnable(const char channel[],
					    bool32 *data);
void setAIPowerSupplyFaultDetectEnable(const char channel[], bool32 data);
void resetAIPowerSupplyFaultDetectEnable(const char channel[]);
void getAIOvercurrentDetectEnable(const char channel[], bool32 *data);
void setAIOvercurrentDetectEnable(const char channel[], bool32 data);
void resetAIOvercurrentDetectEnable(const char channel[]);
void getAOMax(const char channel[], float64 *data);
void setAOMax(const char channel[], float64 data);
void resetAOMax(const char channel[]);
void getAOMin(const char channel[], float64 *data);
void setAOMin(const char channel[], float64 data);
void resetAOMin(const char channel[]);
QString getAOCustomScaleName(const char channel[]);
void setAOCustomScaleName(const char channel[], const char *data);
void resetAOCustomScaleName(const char channel[]);
void getAOOutputType(const char channel[], int32 *data);
void getAOVoltageUnits(const char channel[], int32 *data);
void setAOVoltageUnits(const char channel[], int32 data);
void resetAOVoltageUnits(const char channel[]);
void getAOVoltageCurrentLimit(const char channel[], float64 *data);
void setAOVoltageCurrentLimit(const char channel[], float64 data);
void resetAOVoltageCurrentLimit(const char channel[]);
void getAOCurrentUnits(const char channel[], int32 *data);
void setAOCurrentUnits(const char channel[], int32 data);
void resetAOCurrentUnits(const char channel[]);
void getAOFuncGenType(const char channel[], int32 *data);
void setAOFuncGenType(const char channel[], int32 data);
void resetAOFuncGenType(const char channel[]);
void getAOFuncGenFreq(const char channel[], float64 *data);
void setAOFuncGenFreq(const char channel[], float64 data);
void resetAOFuncGenFreq(const char channel[]);
void getAOFuncGenAmplitude(const char channel[], float64 *data);
void setAOFuncGenAmplitude(const char channel[], float64 data);
void resetAOFuncGenAmplitude(const char channel[]);
void getAOFuncGenOffset(const char channel[], float64 *data);
void setAOFuncGenOffset(const char channel[], float64 data);
void resetAOFuncGenOffset(const char channel[]);
void getAOFuncGenSquareDutyCycle(const char channel[], float64 *data);
void setAOFuncGenSquareDutyCycle(const char channel[], float64 data);
void resetAOFuncGenSquareDutyCycle(const char channel[]);
void getAOFuncGenModulationType(const char channel[], int32 *data);
void setAOFuncGenModulationType(const char channel[], int32 data);
void resetAOFuncGenModulationType(const char channel[]);
void getAOFuncGenFMDeviation(const char channel[], float64 *data);
void setAOFuncGenFMDeviation(const char channel[], float64 data);
void resetAOFuncGenFMDeviation(const char channel[]);
void getAOOutputImpedance(const char channel[], float64 *data);
void setAOOutputImpedance(const char channel[], float64 data);
void resetAOOutputImpedance(const char channel[]);
void getAOLoadImpedance(const char channel[], float64 *data);
void setAOLoadImpedance(const char channel[], float64 data);
void resetAOLoadImpedance(const char channel[]);
void getAOIdleOutputBehavior(const char channel[], int32 *data);
void setAOIdleOutputBehavior(const char channel[], int32 data);
void resetAOIdleOutputBehavior(const char channel[]);
void getAOTermCfg(const char channel[], int32 *data);
void setAOTermCfg(const char channel[], int32 data);
void resetAOTermCfg(const char channel[]);
void getAOResolutionUnits(const char channel[], int32 *data);
void setAOResolutionUnits(const char channel[], int32 data);
void resetAOResolutionUnits(const char channel[]);
void getAOResolution(const char channel[], float64 *data);
void getAODACRngHigh(const char channel[], float64 *data);
void setAODACRngHigh(const char channel[], float64 data);
void resetAODACRngHigh(const char channel[]);
void getAODACRngLow(const char channel[], float64 *data);
void setAODACRngLow(const char channel[], float64 data);
void resetAODACRngLow(const char channel[]);
void getAODACRefConnToGnd(const char channel[], bool32 *data);
void setAODACRefConnToGnd(const char channel[], bool32 data);
void resetAODACRefConnToGnd(const char channel[]);
void getAODACRefAllowConnToGnd(const char channel[], bool32 *data);
void setAODACRefAllowConnToGnd(const char channel[], bool32 data);
void resetAODACRefAllowConnToGnd(const char channel[]);
void getAODACRefSrc(const char channel[], int32 *data);
void setAODACRefSrc(const char channel[], int32 data);
void resetAODACRefSrc(const char channel[]);
QString getAODACRefExtSrc(const char channel[]);
void setAODACRefExtSrc(const char channel[], const char *data);
void resetAODACRefExtSrc(const char channel[]);
void getAODACRefVal(const char channel[], float64 *data);
void setAODACRefVal(const char channel[], float64 data);
void resetAODACRefVal(const char channel[]);
void getAODACOffsetSrc(const char channel[], int32 *data);
void setAODACOffsetSrc(const char channel[], int32 data);
void resetAODACOffsetSrc(const char channel[]);
QString getAODACOffsetExtSrc(const char channel[]);
void setAODACOffsetExtSrc(const char channel[], const char *data);
void resetAODACOffsetExtSrc(const char channel[]);
void getAODACOffsetVal(const char channel[], float64 *data);
void setAODACOffsetVal(const char channel[], float64 data);
void resetAODACOffsetVal(const char channel[]);
void getAOReglitchEnable(const char channel[], bool32 *data);
void setAOReglitchEnable(const char channel[], bool32 data);
void resetAOReglitchEnable(const char channel[]);
void getAOFilterDelay(const char channel[], float64 *data);
void setAOFilterDelay(const char channel[], float64 data);
void resetAOFilterDelay(const char channel[]);
void getAOFilterDelayUnits(const char channel[], int32 *data);
void setAOFilterDelayUnits(const char channel[], int32 data);
void resetAOFilterDelayUnits(const char channel[]);
void getAOFilterDelayAdjustment(const char channel[], float64 *data);
void setAOFilterDelayAdjustment(const char channel[], float64 data);
void resetAOFilterDelayAdjustment(const char channel[]);
void getAOGain(const char channel[], float64 *data);
void setAOGain(const char channel[], float64 data);
void resetAOGain(const char channel[]);
void getAOUseOnlyOnBrdMem(const char channel[], bool32 *data);
void setAOUseOnlyOnBrdMem(const char channel[], bool32 data);
void resetAOUseOnlyOnBrdMem(const char channel[]);
void getAODataXferMech(const char channel[], int32 *data);
void setAODataXferMech(const char channel[], int32 data);
void resetAODataXferMech(const char channel[]);
void getAODataXferReqCond(const char channel[], int32 *data);
void setAODataXferReqCond(const char channel[], int32 data);
void resetAODataXferReqCond(const char channel[]);
void getAOUsbXferReqSize(const char channel[], uInt32 *data);
void setAOUsbXferReqSize(const char channel[], uInt32 data);
void resetAOUsbXferReqSize(const char channel[]);
void getAOUsbXferReqCount(const char channel[], uInt32 *data);
void setAOUsbXferReqCount(const char channel[], uInt32 data);
void resetAOUsbXferReqCount(const char channel[]);
void getAOMemMapEnable(const char channel[], bool32 *data);
void setAOMemMapEnable(const char channel[], bool32 data);
void resetAOMemMapEnable(const char channel[]);
void getAODevScalingCoeff(const char channel[], float64 *data,
			       uInt32 arraySizeInElements);
void getAOEnhancedImageRejectionEnable(const char channel[],
					    bool32 *data);
void setAOEnhancedImageRejectionEnable(const char channel[], bool32 data);
void resetAOEnhancedImageRejectionEnable(const char channel[]);
void getDIInvertLines(const char channel[], bool32 *data);
void setDIInvertLines(const char channel[], bool32 data);
void resetDIInvertLines(const char channel[]);
void getDINumLines(const char channel[], uInt32 *data);
void getDIDigFltrEnable(const char channel[], bool32 *data);
void setDIDigFltrEnable(const char channel[], bool32 data);
void resetDIDigFltrEnable(const char channel[]);
void getDIDigFltrMinPulseWidth(const char channel[], float64 *data);
void setDIDigFltrMinPulseWidth(const char channel[], float64 data);
void resetDIDigFltrMinPulseWidth(const char channel[]);
void getDIDigFltrEnableBusMode(const char channel[], bool32 *data);
void setDIDigFltrEnableBusMode(const char channel[], bool32 data);
void resetDIDigFltrEnableBusMode(const char channel[]);
QString getDIDigFltrTimebaseSrc(const char channel[]);
void setDIDigFltrTimebaseSrc(const char channel[], const char *data);
void resetDIDigFltrTimebaseSrc(const char channel[]);
void getDIDigFltrTimebaseRate(const char channel[], float64 *data);
void setDIDigFltrTimebaseRate(const char channel[], float64 data);
void resetDIDigFltrTimebaseRate(const char channel[]);
void getDIDigSyncEnable(const char channel[], bool32 *data);
void setDIDigSyncEnable(const char channel[], bool32 data);
void resetDIDigSyncEnable(const char channel[]);
void getDITristate(const char channel[], bool32 *data);
void setDITristate(const char channel[], bool32 data);
void resetDITristate(const char channel[]);
void getDILogicFamily(const char channel[], int32 *data);
void setDILogicFamily(const char channel[], int32 data);
void resetDILogicFamily(const char channel[]);
void getDIDataXferMech(const char channel[], int32 *data);
void setDIDataXferMech(const char channel[], int32 data);
void resetDIDataXferMech(const char channel[]);
void getDIDataXferReqCond(const char channel[], int32 *data);
void setDIDataXferReqCond(const char channel[], int32 data);
void resetDIDataXferReqCond(const char channel[]);
void getDIUsbXferReqSize(const char channel[], uInt32 *data);
void setDIUsbXferReqSize(const char channel[], uInt32 data);
void resetDIUsbXferReqSize(const char channel[]);
void getDIUsbXferReqCount(const char channel[], uInt32 *data);
void setDIUsbXferReqCount(const char channel[], uInt32 data);
void resetDIUsbXferReqCount(const char channel[]);
void getDIMemMapEnable(const char channel[], bool32 *data);
void setDIMemMapEnable(const char channel[], bool32 data);
void resetDIMemMapEnable(const char channel[]);
void getDIAcquireOn(const char channel[], int32 *data);
void setDIAcquireOn(const char channel[], int32 data);
void resetDIAcquireOn(const char channel[]);
void getDOOutputDriveType(const char channel[], int32 *data);
void setDOOutputDriveType(const char channel[], int32 data);
void resetDOOutputDriveType(const char channel[]);
void getDOInvertLines(const char channel[], bool32 *data);
void setDOInvertLines(const char channel[], bool32 data);
void resetDOInvertLines(const char channel[]);
void getDONumLines(const char channel[], uInt32 *data);
void getDOTristate(const char channel[], bool32 *data);
void setDOTristate(const char channel[], bool32 data);
void resetDOTristate(const char channel[]);
void getDOLineStatesStartState(const char channel[], int32 *data);
void setDOLineStatesStartState(const char channel[], int32 data);
void resetDOLineStatesStartState(const char channel[]);
void getDOLineStatesPausedState(const char channel[], int32 *data);
void setDOLineStatesPausedState(const char channel[], int32 data);
void resetDOLineStatesPausedState(const char channel[]);
void getDOLineStatesDoneState(const char channel[], int32 *data);
void setDOLineStatesDoneState(const char channel[], int32 data);
void resetDOLineStatesDoneState(const char channel[]);
void getDOLogicFamily(const char channel[], int32 *data);
void setDOLogicFamily(const char channel[], int32 data);
void resetDOLogicFamily(const char channel[]);
void getDOOvercurrentLimit(const char channel[], float64 *data);
void setDOOvercurrentLimit(const char channel[], float64 data);
void resetDOOvercurrentLimit(const char channel[]);
void getDOOvercurrentAutoReenable(const char channel[], bool32 *data);
void setDOOvercurrentAutoReenable(const char channel[], bool32 data);
void resetDOOvercurrentAutoReenable(const char channel[]);
void getDOOvercurrentReenablePeriod(const char channel[], float64 *data);
void setDOOvercurrentReenablePeriod(const char channel[], float64 data);
void resetDOOvercurrentReenablePeriod(const char channel[]);
void getDOUseOnlyOnBrdMem(const char channel[], bool32 *data);
void setDOUseOnlyOnBrdMem(const char channel[], bool32 data);
void resetDOUseOnlyOnBrdMem(const char channel[]);
void getDODataXferMech(const char channel[], int32 *data);
void setDODataXferMech(const char channel[], int32 data);
void resetDODataXferMech(const char channel[]);
void getDODataXferReqCond(const char channel[], int32 *data);
void setDODataXferReqCond(const char channel[], int32 data);
void resetDODataXferReqCond(const char channel[]);
void getDOUsbXferReqSize(const char channel[], uInt32 *data);
void setDOUsbXferReqSize(const char channel[], uInt32 data);
void resetDOUsbXferReqSize(const char channel[]);
void getDOUsbXferReqCount(const char channel[], uInt32 *data);
void setDOUsbXferReqCount(const char channel[], uInt32 data);
void resetDOUsbXferReqCount(const char channel[]);
void getDOMemMapEnable(const char channel[], bool32 *data);
void setDOMemMapEnable(const char channel[], bool32 data);
void resetDOMemMapEnable(const char channel[]);
void getDOGenerateOn(const char channel[], int32 *data);
void setDOGenerateOn(const char channel[], int32 data);
void resetDOGenerateOn(const char channel[]);
void getCIMax(const char channel[], float64 *data);
void setCIMax(const char channel[], float64 data);
void resetCIMax(const char channel[]);
void getCIMin(const char channel[], float64 *data);
void setCIMin(const char channel[], float64 data);
void resetCIMin(const char channel[]);
QString getCICustomScaleName(const char channel[]);
void setCICustomScaleName(const char channel[], const char *data);
void resetCICustomScaleName(const char channel[]);
void getCIMeasType(const char channel[], int32 *data);
void getCIFreqUnits(const char channel[], int32 *data);
void setCIFreqUnits(const char channel[], int32 data);
void resetCIFreqUnits(const char channel[]);
QString getCIFreqTerm(const char channel[]);
void setCIFreqTerm(const char channel[], const char *data);
void resetCIFreqTerm(const char channel[]);
void getCIFreqTermCfg(const char channel[], int32 *data);
void setCIFreqTermCfg(const char channel[], int32 data);
void resetCIFreqTermCfg(const char channel[]);
void getCIFreqLogicLvlBehavior(const char channel[], int32 *data);
void setCIFreqLogicLvlBehavior(const char channel[], int32 data);
void resetCIFreqLogicLvlBehavior(const char channel[]);
void getCIFreqDigFltrEnable(const char channel[], bool32 *data);
void setCIFreqDigFltrEnable(const char channel[], bool32 data);
void resetCIFreqDigFltrEnable(const char channel[]);
void getCIFreqDigFltrMinPulseWidth(const char channel[], float64 *data);
void setCIFreqDigFltrMinPulseWidth(const char channel[], float64 data);
void resetCIFreqDigFltrMinPulseWidth(const char channel[]);
QString getCIFreqDigFltrTimebaseSrc(const char channel[]);
void setCIFreqDigFltrTimebaseSrc(const char channel[], const char *data);
void resetCIFreqDigFltrTimebaseSrc(const char channel[]);
void getCIFreqDigFltrTimebaseRate(const char channel[], float64 *data);
void setCIFreqDigFltrTimebaseRate(const char channel[], float64 data);
void resetCIFreqDigFltrTimebaseRate(const char channel[]);
void getCIFreqDigSyncEnable(const char channel[], bool32 *data);
void setCIFreqDigSyncEnable(const char channel[], bool32 data);
void resetCIFreqDigSyncEnable(const char channel[]);
void getCIFreqStartingEdge(const char channel[], int32 *data);
void setCIFreqStartingEdge(const char channel[], int32 data);
void resetCIFreqStartingEdge(const char channel[]);
void getCIFreqMeasMeth(const char channel[], int32 *data);
void setCIFreqMeasMeth(const char channel[], int32 data);
void resetCIFreqMeasMeth(const char channel[]);
void getCIFreqEnableAveraging(const char channel[], bool32 *data);
void setCIFreqEnableAveraging(const char channel[], bool32 data);
void resetCIFreqEnableAveraging(const char channel[]);
void getCIFreqMeasTime(const char channel[], float64 *data);
void setCIFreqMeasTime(const char channel[], float64 data);
void resetCIFreqMeasTime(const char channel[]);
void getCIFreqDiv(const char channel[], uInt32 *data);
void setCIFreqDiv(const char channel[], uInt32 data);
void resetCIFreqDiv(const char channel[]);
void getCIPeriodUnits(const char channel[], int32 *data);
void setCIPeriodUnits(const char channel[], int32 data);
void resetCIPeriodUnits(const char channel[]);
QString getCIPeriodTerm(const char channel[]);
void setCIPeriodTerm(const char channel[], const char *data);
void resetCIPeriodTerm(const char channel[]);
void getCIPeriodTermCfg(const char channel[], int32 *data);
void setCIPeriodTermCfg(const char channel[], int32 data);
void resetCIPeriodTermCfg(const char channel[]);
void getCIPeriodLogicLvlBehavior(const char channel[], int32 *data);
void setCIPeriodLogicLvlBehavior(const char channel[], int32 data);
void resetCIPeriodLogicLvlBehavior(const char channel[]);
void getCIPeriodDigFltrEnable(const char channel[], bool32 *data);
void setCIPeriodDigFltrEnable(const char channel[], bool32 data);
void resetCIPeriodDigFltrEnable(const char channel[]);
void getCIPeriodDigFltrMinPulseWidth(const char channel[], float64 *data);
void setCIPeriodDigFltrMinPulseWidth(const char channel[], float64 data);
void resetCIPeriodDigFltrMinPulseWidth(const char channel[]);
QString getCIPeriodDigFltrTimebaseSrc(const char channel[]);
void setCIPeriodDigFltrTimebaseSrc(const char channel[],
					const char *data);
void resetCIPeriodDigFltrTimebaseSrc(const char channel[]);
void getCIPeriodDigFltrTimebaseRate(const char channel[], float64 *data);
void setCIPeriodDigFltrTimebaseRate(const char channel[], float64 data);
void resetCIPeriodDigFltrTimebaseRate(const char channel[]);
void getCIPeriodDigSyncEnable(const char channel[], bool32 *data);
void setCIPeriodDigSyncEnable(const char channel[], bool32 data);
void resetCIPeriodDigSyncEnable(const char channel[]);
void getCIPeriodStartingEdge(const char channel[], int32 *data);
void setCIPeriodStartingEdge(const char channel[], int32 data);
void resetCIPeriodStartingEdge(const char channel[]);
void getCIPeriodMeasMeth(const char channel[], int32 *data);
void setCIPeriodMeasMeth(const char channel[], int32 data);
void resetCIPeriodMeasMeth(const char channel[]);
void getCIPeriodEnableAveraging(const char channel[], bool32 *data);
void setCIPeriodEnableAveraging(const char channel[], bool32 data);
void resetCIPeriodEnableAveraging(const char channel[]);
void getCIPeriodMeasTime(const char channel[], float64 *data);
void setCIPeriodMeasTime(const char channel[], float64 data);
void resetCIPeriodMeasTime(const char channel[]);
void getCIPeriodDiv(const char channel[], uInt32 *data);
void setCIPeriodDiv(const char channel[], uInt32 data);
void resetCIPeriodDiv(const char channel[]);
QString getCICountEdgesTerm(const char channel[]);
void setCICountEdgesTerm(const char channel[], const char *data);
void resetCICountEdgesTerm(const char channel[]);
void getCICountEdgesTermCfg(const char channel[], int32 *data);
void setCICountEdgesTermCfg(const char channel[], int32 data);
void resetCICountEdgesTermCfg(const char channel[]);
void getCICountEdgesLogicLvlBehavior(const char channel[], int32 *data);
void setCICountEdgesLogicLvlBehavior(const char channel[], int32 data);
void resetCICountEdgesLogicLvlBehavior(const char channel[]);
void getCICountEdgesDigFltrEnable(const char channel[], bool32 *data);
void setCICountEdgesDigFltrEnable(const char channel[], bool32 data);
void resetCICountEdgesDigFltrEnable(const char channel[]);
void getCICountEdgesDigFltrMinPulseWidth(const char channel[],
					      float64 *data);
void setCICountEdgesDigFltrMinPulseWidth(const char channel[],
					      float64 data);
void resetCICountEdgesDigFltrMinPulseWidth(const char channel[]);
QString getCICountEdgesDigFltrTimebaseSrc(const char channel[]);
void setCICountEdgesDigFltrTimebaseSrc(const char channel[],
					    const char *data);
void resetCICountEdgesDigFltrTimebaseSrc(const char channel[]);
void getCICountEdgesDigFltrTimebaseRate(const char channel[],
					     float64 *data);
void setCICountEdgesDigFltrTimebaseRate(const char channel[],
					     float64 data);
void resetCICountEdgesDigFltrTimebaseRate(const char channel[]);
void getCICountEdgesDigSyncEnable(const char channel[], bool32 *data);
void setCICountEdgesDigSyncEnable(const char channel[], bool32 data);
void resetCICountEdgesDigSyncEnable(const char channel[]);
void getCICountEdgesDir(const char channel[], int32 *data);
void setCICountEdgesDir(const char channel[], int32 data);
void resetCICountEdgesDir(const char channel[]);
QString getCICountEdgesDirTerm(const char channel[]);
void setCICountEdgesDirTerm(const char channel[], const char *data);
void resetCICountEdgesDirTerm(const char channel[]);
void getCICountEdgesCountDirTermCfg(const char channel[], int32 *data);
void setCICountEdgesCountDirTermCfg(const char channel[], int32 data);
void resetCICountEdgesCountDirTermCfg(const char channel[]);
void getCICountEdgesCountDirLogicLvlBehavior(const char channel[],
						  int32 *data);
void setCICountEdgesCountDirLogicLvlBehavior(const char channel[],
						  int32 data);
void resetCICountEdgesCountDirLogicLvlBehavior(const char channel[]);
void getCICountEdgesCountDirDigFltrEnable(const char channel[],
					       bool32 *data);
void setCICountEdgesCountDirDigFltrEnable(const char channel[],
					       bool32 data);
void resetCICountEdgesCountDirDigFltrEnable(const char channel[]);
void getCICountEdgesCountDirDigFltrMinPulseWidth(const char channel[],
						      float64 *data);
void setCICountEdgesCountDirDigFltrMinPulseWidth(const char channel[],
						      float64 data);
void resetCICountEdgesCountDirDigFltrMinPulseWidth(const char channel[]);
QString getCICountEdgesCountDirDigFltrTimebaseSrc(const char channel[]);
void setCICountEdgesCountDirDigFltrTimebaseSrc(const char channel[],
						    const char *data);
void resetCICountEdgesCountDirDigFltrTimebaseSrc(const char channel[]);
void getCICountEdgesCountDirDigFltrTimebaseRate(const char channel[],
						     float64 *data);
void setCICountEdgesCountDirDigFltrTimebaseRate(const char channel[],
						     float64 data);
void resetCICountEdgesCountDirDigFltrTimebaseRate(const char channel[]);
void getCICountEdgesCountDirDigSyncEnable(const char channel[],
					       bool32 *data);
void setCICountEdgesCountDirDigSyncEnable(const char channel[],
					       bool32 data);
void resetCICountEdgesCountDirDigSyncEnable(const char channel[]);
void getCICountEdgesInitialCnt(const char channel[], uInt32 *data);
void setCICountEdgesInitialCnt(const char channel[], uInt32 data);
void resetCICountEdgesInitialCnt(const char channel[]);
void getCICountEdgesActiveEdge(const char channel[], int32 *data);
void setCICountEdgesActiveEdge(const char channel[], int32 data);
void resetCICountEdgesActiveEdge(const char channel[]);
void getCICountEdgesCountResetEnable(const char channel[], bool32 *data);
void setCICountEdgesCountResetEnable(const char channel[], bool32 data);
void resetCICountEdgesCountResetEnable(const char channel[]);
void getCICountEdgesCountResetResetCount(const char channel[],
					      uInt32 *data);
void setCICountEdgesCountResetResetCount(const char channel[],
					      uInt32 data);
void resetCICountEdgesCountResetResetCount(const char channel[]);
QString getCICountEdgesCountResetTerm(const char channel[]);
void setCICountEdgesCountResetTerm(const char channel[],
					const char *data);
void resetCICountEdgesCountResetTerm(const char channel[]);
void getCICountEdgesCountResetTermCfg(const char channel[], int32 *data);
void setCICountEdgesCountResetTermCfg(const char channel[], int32 data);
void resetCICountEdgesCountResetTermCfg(const char channel[]);
void getCICountEdgesCountResetLogicLvlBehavior(const char channel[],
						    int32 *data);
void setCICountEdgesCountResetLogicLvlBehavior(const char channel[],
						    int32 data);
void resetCICountEdgesCountResetLogicLvlBehavior(const char channel[]);
void getCICountEdgesCountResetDigFltrEnable(const char channel[],
						 bool32 *data);
void setCICountEdgesCountResetDigFltrEnable(const char channel[],
						 bool32 data);
void resetCICountEdgesCountResetDigFltrEnable(const char channel[]);
void getCICountEdgesCountResetDigFltrMinPulseWidth(const char channel[],
							float64 *data);
void setCICountEdgesCountResetDigFltrMinPulseWidth(const char channel[],
							float64 data);
void resetCICountEdgesCountResetDigFltrMinPulseWidth(const char channel[]);
QString getCICountEdgesCountResetDigFltrTimebaseSrc(const char channel[]);
void setCICountEdgesCountResetDigFltrTimebaseSrc(const char channel[],
						      const char *data);
void resetCICountEdgesCountResetDigFltrTimebaseSrc(const char channel[]);
void getCICountEdgesCountResetDigFltrTimebaseRate(const char channel[],
						       float64 *data);
void setCICountEdgesCountResetDigFltrTimebaseRate(const char channel[],
						       float64 data);
void resetCICountEdgesCountResetDigFltrTimebaseRate(const char channel[]);
void getCICountEdgesCountResetDigSyncEnable(const char channel[],
						 bool32 *data);
void setCICountEdgesCountResetDigSyncEnable(const char channel[],
						 bool32 data);
void resetCICountEdgesCountResetDigSyncEnable(const char channel[]);
void getCICountEdgesCountResetActiveEdge(const char channel[],
					      int32 *data);
void setCICountEdgesCountResetActiveEdge(const char channel[],
					      int32 data);
void resetCICountEdgesCountResetActiveEdge(const char channel[]);
void getCICountEdgesGateEnable(const char channel[], bool32 *data);
void setCICountEdgesGateEnable(const char channel[], bool32 data);
void resetCICountEdgesGateEnable(const char channel[]);
QString getCICountEdgesGateTerm(const char channel[]);
void setCICountEdgesGateTerm(const char channel[], const char *data);
void resetCICountEdgesGateTerm(const char channel[]);
void getCICountEdgesGateTermCfg(const char channel[], int32 *data);
void setCICountEdgesGateTermCfg(const char channel[], int32 data);
void resetCICountEdgesGateTermCfg(const char channel[]);
void getCICountEdgesGateLogicLvlBehavior(const char channel[],
					      int32 *data);
void setCICountEdgesGateLogicLvlBehavior(const char channel[],
					      int32 data);
void resetCICountEdgesGateLogicLvlBehavior(const char channel[]);
void getCICountEdgesGateDigFltrEnable(const char channel[], bool32 *data);
void setCICountEdgesGateDigFltrEnable(const char channel[], bool32 data);
void resetCICountEdgesGateDigFltrEnable(const char channel[]);
void getCICountEdgesGateDigFltrMinPulseWidth(const char channel[],
						  float64 *data);
void setCICountEdgesGateDigFltrMinPulseWidth(const char channel[],
						  float64 data);
void resetCICountEdgesGateDigFltrMinPulseWidth(const char channel[]);
QString getCICountEdgesGateDigFltrTimebaseSrc(const char channel[]);
void setCICountEdgesGateDigFltrTimebaseSrc(const char channel[],
						const char *data);
void resetCICountEdgesGateDigFltrTimebaseSrc(const char channel[]);
void getCICountEdgesGateDigFltrTimebaseRate(const char channel[],
						 float64 *data);
void setCICountEdgesGateDigFltrTimebaseRate(const char channel[],
						 float64 data);
void resetCICountEdgesGateDigFltrTimebaseRate(const char channel[]);
void getCICountEdgesGateWhen(const char channel[], int32 *data);
void setCICountEdgesGateWhen(const char channel[], int32 data);
void resetCICountEdgesGateWhen(const char channel[]);
QString getCIDutyCycleTerm(const char channel[]);
void setCIDutyCycleTerm(const char channel[], const char *data);
void resetCIDutyCycleTerm(const char channel[]);
void getCIDutyCycleTermCfg(const char channel[], int32 *data);
void setCIDutyCycleTermCfg(const char channel[], int32 data);
void resetCIDutyCycleTermCfg(const char channel[]);
void getCIDutyCycleLogicLvlBehavior(const char channel[], int32 *data);
void setCIDutyCycleLogicLvlBehavior(const char channel[], int32 data);
void resetCIDutyCycleLogicLvlBehavior(const char channel[]);
void getCIDutyCycleDigFltrEnable(const char channel[], bool32 *data);
void setCIDutyCycleDigFltrEnable(const char channel[], bool32 data);
void resetCIDutyCycleDigFltrEnable(const char channel[]);
void getCIDutyCycleDigFltrMinPulseWidth(const char channel[],
					     float64 *data);
void setCIDutyCycleDigFltrMinPulseWidth(const char channel[],
					     float64 data);
void resetCIDutyCycleDigFltrMinPulseWidth(const char channel[]);
QString getCIDutyCycleDigFltrTimebaseSrc(const char channel[]);
void setCIDutyCycleDigFltrTimebaseSrc(const char channel[],
					   const char *data);
void resetCIDutyCycleDigFltrTimebaseSrc(const char channel[]);
void getCIDutyCycleDigFltrTimebaseRate(const char channel[],
					    float64 *data);
void setCIDutyCycleDigFltrTimebaseRate(const char channel[],
					    float64 data);
void resetCIDutyCycleDigFltrTimebaseRate(const char channel[]);
void getCIDutyCycleStartingEdge(const char channel[], int32 *data);
void setCIDutyCycleStartingEdge(const char channel[], int32 data);
void resetCIDutyCycleStartingEdge(const char channel[]);
void getCIAngEncoderUnits(const char channel[], int32 *data);
void setCIAngEncoderUnits(const char channel[], int32 data);
void resetCIAngEncoderUnits(const char channel[]);
void getCIAngEncoderPulsesPerRev(const char channel[], uInt32 *data);
void setCIAngEncoderPulsesPerRev(const char channel[], uInt32 data);
void resetCIAngEncoderPulsesPerRev(const char channel[]);
void getCIAngEncoderInitialAngle(const char channel[], float64 *data);
void setCIAngEncoderInitialAngle(const char channel[], float64 data);
void resetCIAngEncoderInitialAngle(const char channel[]);
void getCILinEncoderUnits(const char channel[], int32 *data);
void setCILinEncoderUnits(const char channel[], int32 data);
void resetCILinEncoderUnits(const char channel[]);
void getCILinEncoderDistPerPulse(const char channel[], float64 *data);
void setCILinEncoderDistPerPulse(const char channel[], float64 data);
void resetCILinEncoderDistPerPulse(const char channel[]);
void getCILinEncoderInitialPos(const char channel[], float64 *data);
void setCILinEncoderInitialPos(const char channel[], float64 data);
void resetCILinEncoderInitialPos(const char channel[]);
void getCIEncoderDecodingType(const char channel[], int32 *data);
void setCIEncoderDecodingType(const char channel[], int32 data);
void resetCIEncoderDecodingType(const char channel[]);
QString getCIEncoderAInputTerm(const char channel[]);
void setCIEncoderAInputTerm(const char channel[], const char *data);
void resetCIEncoderAInputTerm(const char channel[]);
void getCIEncoderAInputTermCfg(const char channel[], int32 *data);
void setCIEncoderAInputTermCfg(const char channel[], int32 data);
void resetCIEncoderAInputTermCfg(const char channel[]);
void getCIEncoderAInputLogicLvlBehavior(const char channel[],
					     int32 *data);
void setCIEncoderAInputLogicLvlBehavior(const char channel[], int32 data);
void resetCIEncoderAInputLogicLvlBehavior(const char channel[]);
void getCIEncoderAInputDigFltrEnable(const char channel[], bool32 *data);
void setCIEncoderAInputDigFltrEnable(const char channel[], bool32 data);
void resetCIEncoderAInputDigFltrEnable(const char channel[]);
void getCIEncoderAInputDigFltrMinPulseWidth(const char channel[],
						 float64 *data);
void setCIEncoderAInputDigFltrMinPulseWidth(const char channel[],
						 float64 data);
void resetCIEncoderAInputDigFltrMinPulseWidth(const char channel[]);
QString getCIEncoderAInputDigFltrTimebaseSrc(const char channel[]);
void setCIEncoderAInputDigFltrTimebaseSrc(const char channel[],
					       const char *data);
void resetCIEncoderAInputDigFltrTimebaseSrc(const char channel[]);
void getCIEncoderAInputDigFltrTimebaseRate(const char channel[],
						float64 *data);
void setCIEncoderAInputDigFltrTimebaseRate(const char channel[],
						float64 data);
void resetCIEncoderAInputDigFltrTimebaseRate(const char channel[]);
void getCIEncoderAInputDigSyncEnable(const char channel[], bool32 *data);
void setCIEncoderAInputDigSyncEnable(const char channel[], bool32 data);
void resetCIEncoderAInputDigSyncEnable(const char channel[]);
QString getCIEncoderBInputTerm(const char channel[]);
void setCIEncoderBInputTerm(const char channel[], const char *data);
void resetCIEncoderBInputTerm(const char channel[]);
void getCIEncoderBInputTermCfg(const char channel[], int32 *data);
void setCIEncoderBInputTermCfg(const char channel[], int32 data);
void resetCIEncoderBInputTermCfg(const char channel[]);
void getCIEncoderBInputLogicLvlBehavior(const char channel[],
					     int32 *data);
void setCIEncoderBInputLogicLvlBehavior(const char channel[], int32 data);
void resetCIEncoderBInputLogicLvlBehavior(const char channel[]);
void getCIEncoderBInputDigFltrEnable(const char channel[], bool32 *data);
void setCIEncoderBInputDigFltrEnable(const char channel[], bool32 data);
void resetCIEncoderBInputDigFltrEnable(const char channel[]);
void getCIEncoderBInputDigFltrMinPulseWidth(const char channel[],
						 float64 *data);
void setCIEncoderBInputDigFltrMinPulseWidth(const char channel[],
						 float64 data);
void resetCIEncoderBInputDigFltrMinPulseWidth(const char channel[]);
QString getCIEncoderBInputDigFltrTimebaseSrc(const char channel[]);
void setCIEncoderBInputDigFltrTimebaseSrc(const char channel[],
					       const char *data);
void resetCIEncoderBInputDigFltrTimebaseSrc(const char channel[]);
void getCIEncoderBInputDigFltrTimebaseRate(const char channel[],
						float64 *data);
void setCIEncoderBInputDigFltrTimebaseRate(const char channel[],
						float64 data);
void resetCIEncoderBInputDigFltrTimebaseRate(const char channel[]);
void getCIEncoderBInputDigSyncEnable(const char channel[], bool32 *data);
void setCIEncoderBInputDigSyncEnable(const char channel[], bool32 data);
void resetCIEncoderBInputDigSyncEnable(const char channel[]);
QString getCIEncoderZInputTerm(const char channel[]);
void setCIEncoderZInputTerm(const char channel[], const char *data);
void resetCIEncoderZInputTerm(const char channel[]);
void getCIEncoderZInputTermCfg(const char channel[], int32 *data);
void setCIEncoderZInputTermCfg(const char channel[], int32 data);
void resetCIEncoderZInputTermCfg(const char channel[]);
void getCIEncoderZInputLogicLvlBehavior(const char channel[],
					     int32 *data);
void setCIEncoderZInputLogicLvlBehavior(const char channel[], int32 data);
void resetCIEncoderZInputLogicLvlBehavior(const char channel[]);
void getCIEncoderZInputDigFltrEnable(const char channel[], bool32 *data);
void setCIEncoderZInputDigFltrEnable(const char channel[], bool32 data);
void resetCIEncoderZInputDigFltrEnable(const char channel[]);
void getCIEncoderZInputDigFltrMinPulseWidth(const char channel[],
						 float64 *data);
void setCIEncoderZInputDigFltrMinPulseWidth(const char channel[],
						 float64 data);
void resetCIEncoderZInputDigFltrMinPulseWidth(const char channel[]);
QString getCIEncoderZInputDigFltrTimebaseSrc(const char channel[]);
void setCIEncoderZInputDigFltrTimebaseSrc(const char channel[],
					       const char *data);
void resetCIEncoderZInputDigFltrTimebaseSrc(const char channel[]);
void getCIEncoderZInputDigFltrTimebaseRate(const char channel[],
						float64 *data);
void setCIEncoderZInputDigFltrTimebaseRate(const char channel[],
						float64 data);
void resetCIEncoderZInputDigFltrTimebaseRate(const char channel[]);
void getCIEncoderZInputDigSyncEnable(const char channel[], bool32 *data);
void setCIEncoderZInputDigSyncEnable(const char channel[], bool32 data);
void resetCIEncoderZInputDigSyncEnable(const char channel[]);
void getCIEncoderZIndexEnable(const char channel[], bool32 *data);
void setCIEncoderZIndexEnable(const char channel[], bool32 data);
void resetCIEncoderZIndexEnable(const char channel[]);
void getCIEncoderZIndexVal(const char channel[], float64 *data);
void setCIEncoderZIndexVal(const char channel[], float64 data);
void resetCIEncoderZIndexVal(const char channel[]);
void getCIEncoderZIndexPhase(const char channel[], int32 *data);
void setCIEncoderZIndexPhase(const char channel[], int32 data);
void resetCIEncoderZIndexPhase(const char channel[]);
void getCIPulseWidthUnits(const char channel[], int32 *data);
void setCIPulseWidthUnits(const char channel[], int32 data);
void resetCIPulseWidthUnits(const char channel[]);
QString getCIPulseWidthTerm(const char channel[]);
void setCIPulseWidthTerm(const char channel[], const char *data);
void resetCIPulseWidthTerm(const char channel[]);
void getCIPulseWidthTermCfg(const char channel[], int32 *data);
void setCIPulseWidthTermCfg(const char channel[], int32 data);
void resetCIPulseWidthTermCfg(const char channel[]);
void getCIPulseWidthLogicLvlBehavior(const char channel[], int32 *data);
void setCIPulseWidthLogicLvlBehavior(const char channel[], int32 data);
void resetCIPulseWidthLogicLvlBehavior(const char channel[]);
void getCIPulseWidthDigFltrEnable(const char channel[], bool32 *data);
void setCIPulseWidthDigFltrEnable(const char channel[], bool32 data);
void resetCIPulseWidthDigFltrEnable(const char channel[]);
void getCIPulseWidthDigFltrMinPulseWidth(const char channel[],
					      float64 *data);
void setCIPulseWidthDigFltrMinPulseWidth(const char channel[],
					      float64 data);
void resetCIPulseWidthDigFltrMinPulseWidth(const char channel[]);
QString getCIPulseWidthDigFltrTimebaseSrc(const char channel[]);
void setCIPulseWidthDigFltrTimebaseSrc(const char channel[],
					    const char *data);
void resetCIPulseWidthDigFltrTimebaseSrc(const char channel[]);
void getCIPulseWidthDigFltrTimebaseRate(const char channel[],
					     float64 *data);
void setCIPulseWidthDigFltrTimebaseRate(const char channel[],
					     float64 data);
void resetCIPulseWidthDigFltrTimebaseRate(const char channel[]);
void getCIPulseWidthDigSyncEnable(const char channel[], bool32 *data);
void setCIPulseWidthDigSyncEnable(const char channel[], bool32 data);
void resetCIPulseWidthDigSyncEnable(const char channel[]);
void getCIPulseWidthStartingEdge(const char channel[], int32 *data);
void setCIPulseWidthStartingEdge(const char channel[], int32 data);
void resetCIPulseWidthStartingEdge(const char channel[]);
void getCITimestampUnits(const char channel[], int32 *data);
void setCITimestampUnits(const char channel[], int32 data);
void resetCITimestampUnits(const char channel[]);
void getCITimestampInitialSeconds(const char channel[], uInt32 *data);
void setCITimestampInitialSeconds(const char channel[], uInt32 data);
void resetCITimestampInitialSeconds(const char channel[]);
void getCIGPSSyncMethod(const char channel[], int32 *data);
void setCIGPSSyncMethod(const char channel[], int32 data);
void resetCIGPSSyncMethod(const char channel[]);
QString getCIGPSSyncSrc(const char channel[]);
void setCIGPSSyncSrc(const char channel[], const char *data);
void resetCIGPSSyncSrc(const char channel[]);
void getCIVelocityAngEncoderUnits(const char channel[], int32 *data);
void setCIVelocityAngEncoderUnits(const char channel[], int32 data);
void resetCIVelocityAngEncoderUnits(const char channel[]);
void getCIVelocityAngEncoderPulsesPerRev(const char channel[],
					      uInt32 *data);
void setCIVelocityAngEncoderPulsesPerRev(const char channel[],
					      uInt32 data);
void resetCIVelocityAngEncoderPulsesPerRev(const char channel[]);
void getCIVelocityLinEncoderUnits(const char channel[], int32 *data);
void setCIVelocityLinEncoderUnits(const char channel[], int32 data);
void resetCIVelocityLinEncoderUnits(const char channel[]);
void getCIVelocityLinEncoderDistPerPulse(const char channel[],
					      float64 *data);
void setCIVelocityLinEncoderDistPerPulse(const char channel[],
					      float64 data);
void resetCIVelocityLinEncoderDistPerPulse(const char channel[]);
void getCIVelocityEncoderDecodingType(const char channel[], int32 *data);
void setCIVelocityEncoderDecodingType(const char channel[], int32 data);
void resetCIVelocityEncoderDecodingType(const char channel[]);
QString getCIVelocityEncoderAInputTerm(const char channel[]);
void setCIVelocityEncoderAInputTerm(const char channel[],
					 const char *data);
void resetCIVelocityEncoderAInputTerm(const char channel[]);
void getCIVelocityEncoderAInputTermCfg(const char channel[], int32 *data);
void setCIVelocityEncoderAInputTermCfg(const char channel[], int32 data);
void resetCIVelocityEncoderAInputTermCfg(const char channel[]);
void getCIVelocityEncoderAInputLogicLvlBehavior(const char channel[],
						     int32 *data);
void setCIVelocityEncoderAInputLogicLvlBehavior(const char channel[],
						     int32 data);
void resetCIVelocityEncoderAInputLogicLvlBehavior(const char channel[]);
void getCIVelocityEncoderAInputDigFltrEnable(const char channel[],
						  bool32 *data);
void setCIVelocityEncoderAInputDigFltrEnable(const char channel[],
						  bool32 data);
void resetCIVelocityEncoderAInputDigFltrEnable(const char channel[]);
void getCIVelocityEncoderAInputDigFltrMinPulseWidth(const char channel[],
							 float64 *data);
void setCIVelocityEncoderAInputDigFltrMinPulseWidth(const char channel[],
							 float64 data);
void resetCIVelocityEncoderAInputDigFltrMinPulseWidth(const char channel[]);
QString getCIVelocityEncoderAInputDigFltrTimebaseSrc(const char channel[]);
void setCIVelocityEncoderAInputDigFltrTimebaseSrc(const char channel[],
						       const char *data);
void resetCIVelocityEncoderAInputDigFltrTimebaseSrc(const char channel[]);
void getCIVelocityEncoderAInputDigFltrTimebaseRate(const char channel[],
							float64 *data);
void setCIVelocityEncoderAInputDigFltrTimebaseRate(const char channel[],
							float64 data);
void resetCIVelocityEncoderAInputDigFltrTimebaseRate(const char channel[]);
QString getCIVelocityEncoderBInputTerm(const char channel[]);
void setCIVelocityEncoderBInputTerm(const char channel[],
					 const char *data);
void resetCIVelocityEncoderBInputTerm(const char channel[]);
void getCIVelocityEncoderBInputTermCfg(const char channel[], int32 *data);
void setCIVelocityEncoderBInputTermCfg(const char channel[], int32 data);
void resetCIVelocityEncoderBInputTermCfg(const char channel[]);
void getCIVelocityEncoderBInputLogicLvlBehavior(const char channel[],
						     int32 *data);
void setCIVelocityEncoderBInputLogicLvlBehavior(const char channel[],
						     int32 data);
void resetCIVelocityEncoderBInputLogicLvlBehavior(const char channel[]);
void getCIVelocityEncoderBInputDigFltrEnable(const char channel[],
						  bool32 *data);
void setCIVelocityEncoderBInputDigFltrEnable(const char channel[],
						  bool32 data);
void resetCIVelocityEncoderBInputDigFltrEnable(const char channel[]);
void getCIVelocityEncoderBInputDigFltrMinPulseWidth(const char channel[],
							 float64 *data);
void setCIVelocityEncoderBInputDigFltrMinPulseWidth(const char channel[],
							 float64 data);
void resetCIVelocityEncoderBInputDigFltrMinPulseWidth(const char channel[]);
QString getCIVelocityEncoderBInputDigFltrTimebaseSrc(const char channel[]);
void setCIVelocityEncoderBInputDigFltrTimebaseSrc(const char channel[],
						       const char *data);
void resetCIVelocityEncoderBInputDigFltrTimebaseSrc(const char channel[]);
void getCIVelocityEncoderBInputDigFltrTimebaseRate(const char channel[],
							float64 *data);
void setCIVelocityEncoderBInputDigFltrTimebaseRate(const char channel[],
							float64 data);
void resetCIVelocityEncoderBInputDigFltrTimebaseRate(const char channel[]);
void getCIVelocityMeasTime(const char channel[], float64 *data);
void setCIVelocityMeasTime(const char channel[], float64 data);
void resetCIVelocityMeasTime(const char channel[]);
void getCIVelocityDiv(const char channel[], uInt32 *data);
void setCIVelocityDiv(const char channel[], uInt32 data);
void resetCIVelocityDiv(const char channel[]);
void getCITwoEdgeSepUnits(const char channel[], int32 *data);
void setCITwoEdgeSepUnits(const char channel[], int32 data);
void resetCITwoEdgeSepUnits(const char channel[]);
QString getCITwoEdgeSepFirstTerm(const char channel[]);
void setCITwoEdgeSepFirstTerm(const char channel[], const char *data);
void resetCITwoEdgeSepFirstTerm(const char channel[]);
void getCITwoEdgeSepFirstTermCfg(const char channel[], int32 *data);
void setCITwoEdgeSepFirstTermCfg(const char channel[], int32 data);
void resetCITwoEdgeSepFirstTermCfg(const char channel[]);
void getCITwoEdgeSepFirstLogicLvlBehavior(const char channel[],
					       int32 *data);
void setCITwoEdgeSepFirstLogicLvlBehavior(const char channel[],
					       int32 data);
void resetCITwoEdgeSepFirstLogicLvlBehavior(const char channel[]);
void getCITwoEdgeSepFirstDigFltrEnable(const char channel[],
					    bool32 *data);
void setCITwoEdgeSepFirstDigFltrEnable(const char channel[], bool32 data);
void resetCITwoEdgeSepFirstDigFltrEnable(const char channel[]);
void getCITwoEdgeSepFirstDigFltrMinPulseWidth(const char channel[],
						   float64 *data);
void setCITwoEdgeSepFirstDigFltrMinPulseWidth(const char channel[],
						   float64 data);
void resetCITwoEdgeSepFirstDigFltrMinPulseWidth(const char channel[]);
QString getCITwoEdgeSepFirstDigFltrTimebaseSrc(const char channel[]);
void setCITwoEdgeSepFirstDigFltrTimebaseSrc(const char channel[],
						 const char *data);
void resetCITwoEdgeSepFirstDigFltrTimebaseSrc(const char channel[]);
void getCITwoEdgeSepFirstDigFltrTimebaseRate(const char channel[],
						  float64 *data);
void setCITwoEdgeSepFirstDigFltrTimebaseRate(const char channel[],
						  float64 data);
void resetCITwoEdgeSepFirstDigFltrTimebaseRate(const char channel[]);
void getCITwoEdgeSepFirstDigSyncEnable(const char channel[],
					    bool32 *data);
void setCITwoEdgeSepFirstDigSyncEnable(const char channel[], bool32 data);
void resetCITwoEdgeSepFirstDigSyncEnable(const char channel[]);
void getCITwoEdgeSepFirstEdge(const char channel[], int32 *data);
void setCITwoEdgeSepFirstEdge(const char channel[], int32 data);
void resetCITwoEdgeSepFirstEdge(const char channel[]);
QString getCITwoEdgeSepSecondTerm(const char channel[]);
void setCITwoEdgeSepSecondTerm(const char channel[], const char *data);
void resetCITwoEdgeSepSecondTerm(const char channel[]);
void getCITwoEdgeSepSecondTermCfg(const char channel[], int32 *data);
void setCITwoEdgeSepSecondTermCfg(const char channel[], int32 data);
void resetCITwoEdgeSepSecondTermCfg(const char channel[]);
void getCITwoEdgeSepSecondLogicLvlBehavior(const char channel[],
						int32 *data);
void setCITwoEdgeSepSecondLogicLvlBehavior(const char channel[],
						int32 data);
void resetCITwoEdgeSepSecondLogicLvlBehavior(const char channel[]);
void getCITwoEdgeSepSecondDigFltrEnable(const char channel[],
					     bool32 *data);
void setCITwoEdgeSepSecondDigFltrEnable(const char channel[],
					     bool32 data);
void resetCITwoEdgeSepSecondDigFltrEnable(const char channel[]);
void getCITwoEdgeSepSecondDigFltrMinPulseWidth(const char channel[],
						    float64 *data);
void setCITwoEdgeSepSecondDigFltrMinPulseWidth(const char channel[],
						    float64 data);
void resetCITwoEdgeSepSecondDigFltrMinPulseWidth(const char channel[]);
QString getCITwoEdgeSepSecondDigFltrTimebaseSrc(const char channel[]);
void setCITwoEdgeSepSecondDigFltrTimebaseSrc(const char channel[],
						  const char *data);
void resetCITwoEdgeSepSecondDigFltrTimebaseSrc(const char channel[]);
void getCITwoEdgeSepSecondDigFltrTimebaseRate(const char channel[],
						   float64 *data);
void setCITwoEdgeSepSecondDigFltrTimebaseRate(const char channel[],
						   float64 data);
void resetCITwoEdgeSepSecondDigFltrTimebaseRate(const char channel[]);
void getCITwoEdgeSepSecondDigSyncEnable(const char channel[],
					     bool32 *data);
void setCITwoEdgeSepSecondDigSyncEnable(const char channel[],
					     bool32 data);
void resetCITwoEdgeSepSecondDigSyncEnable(const char channel[]);
void getCITwoEdgeSepSecondEdge(const char channel[], int32 *data);
void setCITwoEdgeSepSecondEdge(const char channel[], int32 data);
void resetCITwoEdgeSepSecondEdge(const char channel[]);
void getCISemiPeriodUnits(const char channel[], int32 *data);
void setCISemiPeriodUnits(const char channel[], int32 data);
void resetCISemiPeriodUnits(const char channel[]);
QString getCISemiPeriodTerm(const char channel[]);
void setCISemiPeriodTerm(const char channel[], const char *data);
void resetCISemiPeriodTerm(const char channel[]);
void getCISemiPeriodTermCfg(const char channel[], int32 *data);
void setCISemiPeriodTermCfg(const char channel[], int32 data);
void resetCISemiPeriodTermCfg(const char channel[]);
void getCISemiPeriodLogicLvlBehavior(const char channel[], int32 *data);
void setCISemiPeriodLogicLvlBehavior(const char channel[], int32 data);
void resetCISemiPeriodLogicLvlBehavior(const char channel[]);
void getCISemiPeriodDigFltrEnable(const char channel[], bool32 *data);
void setCISemiPeriodDigFltrEnable(const char channel[], bool32 data);
void resetCISemiPeriodDigFltrEnable(const char channel[]);
void getCISemiPeriodDigFltrMinPulseWidth(const char channel[],
					      float64 *data);
void setCISemiPeriodDigFltrMinPulseWidth(const char channel[],
					      float64 data);
void resetCISemiPeriodDigFltrMinPulseWidth(const char channel[]);
QString getCISemiPeriodDigFltrTimebaseSrc(const char channel[]);
void setCISemiPeriodDigFltrTimebaseSrc(const char channel[],
					    const char *data);
void resetCISemiPeriodDigFltrTimebaseSrc(const char channel[]);
void getCISemiPeriodDigFltrTimebaseRate(const char channel[],
					     float64 *data);
void setCISemiPeriodDigFltrTimebaseRate(const char channel[],
					     float64 data);
void resetCISemiPeriodDigFltrTimebaseRate(const char channel[]);
void getCISemiPeriodDigSyncEnable(const char channel[], bool32 *data);
void setCISemiPeriodDigSyncEnable(const char channel[], bool32 data);
void resetCISemiPeriodDigSyncEnable(const char channel[]);
void getCISemiPeriodStartingEdge(const char channel[], int32 *data);
void setCISemiPeriodStartingEdge(const char channel[], int32 data);
void resetCISemiPeriodStartingEdge(const char channel[]);
void getCIPulseFreqUnits(const char channel[], int32 *data);
void setCIPulseFreqUnits(const char channel[], int32 data);
void resetCIPulseFreqUnits(const char channel[]);
QString getCIPulseFreqTerm(const char channel[]);
void setCIPulseFreqTerm(const char channel[], const char *data);
void resetCIPulseFreqTerm(const char channel[]);
void getCIPulseFreqTermCfg(const char channel[], int32 *data);
void setCIPulseFreqTermCfg(const char channel[], int32 data);
void resetCIPulseFreqTermCfg(const char channel[]);
void getCIPulseFreqLogicLvlBehavior(const char channel[], int32 *data);
void setCIPulseFreqLogicLvlBehavior(const char channel[], int32 data);
void resetCIPulseFreqLogicLvlBehavior(const char channel[]);
void getCIPulseFreqDigFltrEnable(const char channel[], bool32 *data);
void setCIPulseFreqDigFltrEnable(const char channel[], bool32 data);
void resetCIPulseFreqDigFltrEnable(const char channel[]);
void getCIPulseFreqDigFltrMinPulseWidth(const char channel[],
					     float64 *data);
void setCIPulseFreqDigFltrMinPulseWidth(const char channel[],
					     float64 data);
void resetCIPulseFreqDigFltrMinPulseWidth(const char channel[]);
QString getCIPulseFreqDigFltrTimebaseSrc(const char channel[]);
void setCIPulseFreqDigFltrTimebaseSrc(const char channel[],
					   const char *data);
void resetCIPulseFreqDigFltrTimebaseSrc(const char channel[]);
void getCIPulseFreqDigFltrTimebaseRate(const char channel[],
					    float64 *data);
void setCIPulseFreqDigFltrTimebaseRate(const char channel[],
					    float64 data);
void resetCIPulseFreqDigFltrTimebaseRate(const char channel[]);
void getCIPulseFreqDigSyncEnable(const char channel[], bool32 *data);
void setCIPulseFreqDigSyncEnable(const char channel[], bool32 data);
void resetCIPulseFreqDigSyncEnable(const char channel[]);
void getCIPulseFreqStartEdge(const char channel[], int32 *data);
void setCIPulseFreqStartEdge(const char channel[], int32 data);
void resetCIPulseFreqStartEdge(const char channel[]);
void getCIPulseTimeUnits(const char channel[], int32 *data);
void setCIPulseTimeUnits(const char channel[], int32 data);
void resetCIPulseTimeUnits(const char channel[]);
QString getCIPulseTimeTerm(const char channel[]);
void setCIPulseTimeTerm(const char channel[], const char *data);
void resetCIPulseTimeTerm(const char channel[]);
void getCIPulseTimeTermCfg(const char channel[], int32 *data);
void setCIPulseTimeTermCfg(const char channel[], int32 data);
void resetCIPulseTimeTermCfg(const char channel[]);
void getCIPulseTimeLogicLvlBehavior(const char channel[], int32 *data);
void setCIPulseTimeLogicLvlBehavior(const char channel[], int32 data);
void resetCIPulseTimeLogicLvlBehavior(const char channel[]);
void getCIPulseTimeDigFltrEnable(const char channel[], bool32 *data);
void setCIPulseTimeDigFltrEnable(const char channel[], bool32 data);
void resetCIPulseTimeDigFltrEnable(const char channel[]);
void getCIPulseTimeDigFltrMinPulseWidth(const char channel[],
					     float64 *data);
void setCIPulseTimeDigFltrMinPulseWidth(const char channel[],
					     float64 data);
void resetCIPulseTimeDigFltrMinPulseWidth(const char channel[]);
QString getCIPulseTimeDigFltrTimebaseSrc(const char channel[]);
void setCIPulseTimeDigFltrTimebaseSrc(const char channel[],
					   const char *data);
void resetCIPulseTimeDigFltrTimebaseSrc(const char channel[]);
void getCIPulseTimeDigFltrTimebaseRate(const char channel[],
					    float64 *data);
void setCIPulseTimeDigFltrTimebaseRate(const char channel[],
					    float64 data);
void resetCIPulseTimeDigFltrTimebaseRate(const char channel[]);
void getCIPulseTimeDigSyncEnable(const char channel[], bool32 *data);
void setCIPulseTimeDigSyncEnable(const char channel[], bool32 data);
void resetCIPulseTimeDigSyncEnable(const char channel[]);
void getCIPulseTimeStartEdge(const char channel[], int32 *data);
void setCIPulseTimeStartEdge(const char channel[], int32 data);
void resetCIPulseTimeStartEdge(const char channel[]);
QString getCIPulseTicksTerm(const char channel[]);
void setCIPulseTicksTerm(const char channel[], const char *data);
void resetCIPulseTicksTerm(const char channel[]);
void getCIPulseTicksTermCfg(const char channel[], int32 *data);
void setCIPulseTicksTermCfg(const char channel[], int32 data);
void resetCIPulseTicksTermCfg(const char channel[]);
void getCIPulseTicksLogicLvlBehavior(const char channel[], int32 *data);
void setCIPulseTicksLogicLvlBehavior(const char channel[], int32 data);
void resetCIPulseTicksLogicLvlBehavior(const char channel[]);
void getCIPulseTicksDigFltrEnable(const char channel[], bool32 *data);
void setCIPulseTicksDigFltrEnable(const char channel[], bool32 data);
void resetCIPulseTicksDigFltrEnable(const char channel[]);
void getCIPulseTicksDigFltrMinPulseWidth(const char channel[],
					      float64 *data);
void setCIPulseTicksDigFltrMinPulseWidth(const char channel[],
					      float64 data);
void resetCIPulseTicksDigFltrMinPulseWidth(const char channel[]);
QString getCIPulseTicksDigFltrTimebaseSrc(const char channel[]);
void setCIPulseTicksDigFltrTimebaseSrc(const char channel[],
					    const char *data);
void resetCIPulseTicksDigFltrTimebaseSrc(const char channel[]);
void getCIPulseTicksDigFltrTimebaseRate(const char channel[],
					     float64 *data);
void setCIPulseTicksDigFltrTimebaseRate(const char channel[],
					     float64 data);
void resetCIPulseTicksDigFltrTimebaseRate(const char channel[]);
void getCIPulseTicksDigSyncEnable(const char channel[], bool32 *data);
void setCIPulseTicksDigSyncEnable(const char channel[], bool32 data);
void resetCIPulseTicksDigSyncEnable(const char channel[]);
void getCIPulseTicksStartEdge(const char channel[], int32 *data);
void setCIPulseTicksStartEdge(const char channel[], int32 data);
void resetCIPulseTicksStartEdge(const char channel[]);
QString getCICtrTimebaseSrc(const char channel[]);
void setCICtrTimebaseSrc(const char channel[], const char *data);
void resetCICtrTimebaseSrc(const char channel[]);
void getCICtrTimebaseRate(const char channel[], float64 *data);
void setCICtrTimebaseRate(const char channel[], float64 data);
void resetCICtrTimebaseRate(const char channel[]);
void getCICtrTimebaseActiveEdge(const char channel[], int32 *data);
void setCICtrTimebaseActiveEdge(const char channel[], int32 data);
void resetCICtrTimebaseActiveEdge(const char channel[]);
void getCICtrTimebaseDigFltrEnable(const char channel[], bool32 *data);
void setCICtrTimebaseDigFltrEnable(const char channel[], bool32 data);
void resetCICtrTimebaseDigFltrEnable(const char channel[]);
void getCICtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 *data);
void setCICtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 data);
void resetCICtrTimebaseDigFltrMinPulseWidth(const char channel[]);
QString getCICtrTimebaseDigFltrTimebaseSrc(const char channel[]);
void setCICtrTimebaseDigFltrTimebaseSrc(const char channel[],
					     const char *data);
void resetCICtrTimebaseDigFltrTimebaseSrc(const char channel[]);
void getCICtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 *data);
void setCICtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 data);
void resetCICtrTimebaseDigFltrTimebaseRate(const char channel[]);
void getCICtrTimebaseDigSyncEnable(const char channel[], bool32 *data);
void setCICtrTimebaseDigSyncEnable(const char channel[], bool32 data);
void resetCICtrTimebaseDigSyncEnable(const char channel[]);
void getCIThreshVoltage(const char channel[], float64 *data);
void setCIThreshVoltage(const char channel[], float64 data);
void resetCIThreshVoltage(const char channel[]);
void getCICount(const char channel[], uInt32 *data);
void getCIOutputState(const char channel[], int32 *data);
void getCITCReached(const char channel[], bool32 *data);
void getCICtrTimebaseMasterTimebaseDiv(const char channel[],
					    uInt32 *data);
void setCICtrTimebaseMasterTimebaseDiv(const char channel[], uInt32 data);
void resetCICtrTimebaseMasterTimebaseDiv(const char channel[]);
void getCISampClkOverrunBehavior(const char channel[], int32 *data);
void setCISampClkOverrunBehavior(const char channel[], int32 data);
void resetCISampClkOverrunBehavior(const char channel[]);
void getCISampClkOverrunSentinelVal(const char channel[], int32 *data);
void setCISampClkOverrunSentinelVal(const char channel[], int32 data);
void resetCISampClkOverrunSentinelVal(const char channel[]);
void getCIDataXferMech(const char channel[], int32 *data);
void setCIDataXferMech(const char channel[], int32 data);
void resetCIDataXferMech(const char channel[]);
void getCIDataXferReqCond(const char channel[], int32 *data);
void setCIDataXferReqCond(const char channel[], int32 data);
void resetCIDataXferReqCond(const char channel[]);
void getCIUsbXferReqSize(const char channel[], uInt32 *data);
void setCIUsbXferReqSize(const char channel[], uInt32 data);
void resetCIUsbXferReqSize(const char channel[]);
void getCIUsbXferReqCount(const char channel[], uInt32 *data);
void setCIUsbXferReqCount(const char channel[], uInt32 data);
void resetCIUsbXferReqCount(const char channel[]);
void getCIMemMapEnable(const char channel[], bool32 *data);
void setCIMemMapEnable(const char channel[], bool32 data);
void resetCIMemMapEnable(const char channel[]);
void getCINumPossiblyInvalidSamps(const char channel[], uInt32 *data);
void getCIDupCountPrevent(const char channel[], bool32 *data);
void setCIDupCountPrevent(const char channel[], bool32 data);
void resetCIDupCountPrevent(const char channel[]);
void getCIPrescaler(const char channel[], uInt32 *data);
void setCIPrescaler(const char channel[], uInt32 data);
void resetCIPrescaler(const char channel[]);
void getCIMaxMeasPeriod(const char channel[], float64 *data);
void setCIMaxMeasPeriod(const char channel[], float64 data);
void resetCIMaxMeasPeriod(const char channel[]);
void getCOOutputType(const char channel[], int32 *data);
void getCOPulseIdleState(const char channel[], int32 *data);
void setCOPulseIdleState(const char channel[], int32 data);
void resetCOPulseIdleState(const char channel[]);
QString getCOPulseTerm(const char channel[]);
void setCOPulseTerm(const char channel[], const char *data);
void resetCOPulseTerm(const char channel[]);
void getCOPulseTimeUnits(const char channel[], int32 *data);
void setCOPulseTimeUnits(const char channel[], int32 data);
void resetCOPulseTimeUnits(const char channel[]);
void getCOPulseHighTime(const char channel[], float64 *data);
void setCOPulseHighTime(const char channel[], float64 data);
void resetCOPulseHighTime(const char channel[]);
void getCOPulseLowTime(const char channel[], float64 *data);
void setCOPulseLowTime(const char channel[], float64 data);
void resetCOPulseLowTime(const char channel[]);
void getCOPulseTimeInitialDelay(const char channel[], float64 *data);
void setCOPulseTimeInitialDelay(const char channel[], float64 data);
void resetCOPulseTimeInitialDelay(const char channel[]);
void getCOPulseDutyCyc(const char channel[], float64 *data);
void setCOPulseDutyCyc(const char channel[], float64 data);
void resetCOPulseDutyCyc(const char channel[]);
void getCOPulseFreqUnits(const char channel[], int32 *data);
void setCOPulseFreqUnits(const char channel[], int32 data);
void resetCOPulseFreqUnits(const char channel[]);
void getCOPulseFreq(const char channel[], float64 *data);
void setCOPulseFreq(const char channel[], float64 data);
void resetCOPulseFreq(const char channel[]);
void getCOPulseFreqInitialDelay(const char channel[], float64 *data);
void setCOPulseFreqInitialDelay(const char channel[], float64 data);
void resetCOPulseFreqInitialDelay(const char channel[]);
void getCOPulseHighTicks(const char channel[], uInt32 *data);
void setCOPulseHighTicks(const char channel[], uInt32 data);
void resetCOPulseHighTicks(const char channel[]);
void getCOPulseLowTicks(const char channel[], uInt32 *data);
void setCOPulseLowTicks(const char channel[], uInt32 data);
void resetCOPulseLowTicks(const char channel[]);
void getCOPulseTicksInitialDelay(const char channel[], uInt32 *data);
void setCOPulseTicksInitialDelay(const char channel[], uInt32 data);
void resetCOPulseTicksInitialDelay(const char channel[]);
QString getCOCtrTimebaseSrc(const char channel[]);
void setCOCtrTimebaseSrc(const char channel[], const char *data);
void resetCOCtrTimebaseSrc(const char channel[]);
void getCOCtrTimebaseRate(const char channel[], float64 *data);
void setCOCtrTimebaseRate(const char channel[], float64 data);
void resetCOCtrTimebaseRate(const char channel[]);
void getCOCtrTimebaseActiveEdge(const char channel[], int32 *data);
void setCOCtrTimebaseActiveEdge(const char channel[], int32 data);
void resetCOCtrTimebaseActiveEdge(const char channel[]);
void getCOCtrTimebaseDigFltrEnable(const char channel[], bool32 *data);
void setCOCtrTimebaseDigFltrEnable(const char channel[], bool32 data);
void resetCOCtrTimebaseDigFltrEnable(const char channel[]);
void getCOCtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 *data);
void setCOCtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 data);
void resetCOCtrTimebaseDigFltrMinPulseWidth(const char channel[]);
QString getCOCtrTimebaseDigFltrTimebaseSrc(const char channel[]);
void setCOCtrTimebaseDigFltrTimebaseSrc(const char channel[],
					     const char *data);
void resetCOCtrTimebaseDigFltrTimebaseSrc(const char channel[]);
void getCOCtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 *data);
void setCOCtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 data);
void resetCOCtrTimebaseDigFltrTimebaseRate(const char channel[]);
void getCOCtrTimebaseDigSyncEnable(const char channel[], bool32 *data);
void setCOCtrTimebaseDigSyncEnable(const char channel[], bool32 data);
void resetCOCtrTimebaseDigSyncEnable(const char channel[]);
void getCOCount(const char channel[], uInt32 *data);
void getCOOutputState(const char channel[], int32 *data);
void getCOAutoIncrCnt(const char channel[], uInt32 *data);
void setCOAutoIncrCnt(const char channel[], uInt32 data);
void resetCOAutoIncrCnt(const char channel[]);
void getCOCtrTimebaseMasterTimebaseDiv(const char channel[],
					    uInt32 *data);
void setCOCtrTimebaseMasterTimebaseDiv(const char channel[], uInt32 data);
void resetCOCtrTimebaseMasterTimebaseDiv(const char channel[]);
void getCOPulseDone(const char channel[], bool32 *data);
void getCOEnableInitialDelayOnRetrigger(const char channel[],
					     bool32 *data);
void setCOEnableInitialDelayOnRetrigger(const char channel[],
					     bool32 data);
void resetCOEnableInitialDelayOnRetrigger(const char channel[]);
void getCOConstrainedGenMode(const char channel[], int32 *data);
void setCOConstrainedGenMode(const char channel[], int32 data);
void resetCOConstrainedGenMode(const char channel[]);
void getCOUseOnlyOnBrdMem(const char channel[], bool32 *data);
void setCOUseOnlyOnBrdMem(const char channel[], bool32 data);
void resetCOUseOnlyOnBrdMem(const char channel[]);
void getCODataXferMech(const char channel[], int32 *data);
void setCODataXferMech(const char channel[], int32 data);
void resetCODataXferMech(const char channel[]);
void getCODataXferReqCond(const char channel[], int32 *data);
void setCODataXferReqCond(const char channel[], int32 data);
void resetCODataXferReqCond(const char channel[]);
void getCOUsbXferReqSize(const char channel[], uInt32 *data);
void setCOUsbXferReqSize(const char channel[], uInt32 data);
void resetCOUsbXferReqSize(const char channel[]);
void getCOUsbXferReqCount(const char channel[], uInt32 *data);
void setCOUsbXferReqCount(const char channel[], uInt32 data);
void resetCOUsbXferReqCount(const char channel[]);
void getCOMemMapEnable(const char channel[], bool32 *data);
void setCOMemMapEnable(const char channel[], bool32 data);
void resetCOMemMapEnable(const char channel[]);
void getCOPrescaler(const char channel[], uInt32 *data);
void setCOPrescaler(const char channel[], uInt32 data);
void resetCOPrescaler(const char channel[]);
void getCORdyForNewVal(const char channel[], bool32 *data);
void getChanType(const char channel[], int32 *data);
QString getPhysicalChanName(const char channel[]);
void setPhysicalChanName(const char channel[], const char *data);
QString getChanDescr(const char channel[]);
void setChanDescr(const char channel[], const char *data);
void resetChanDescr(const char channel[]);
void getChanIsGlobal(const char channel[], bool32 *data);
void getChanSyncUnlockBehavior(const char channel[], int32 *data);
void setChanSyncUnlockBehavior(const char channel[], int32 data);
void resetChanSyncUnlockBehavior(const char channel[]);
QString getExportedAIConvClkOutputTerm();
void setExportedAIConvClkOutputTerm(const char *data);
void resetExportedAIConvClkOutputTerm();
int32 getExportedAIConvClkPulsePolarity();
QString getExported10MHzRefClkOutputTerm();
void setExported10MHzRefClkOutputTerm(const char *data);
void resetExported10MHzRefClkOutputTerm();
QString getExported20MHzTimebaseOutputTerm();
void setExported20MHzTimebaseOutputTerm(const char *data);
void resetExported20MHzTimebaseOutputTerm();
int32 getExportedSampClkOutputBehavior();
void setExportedSampClkOutputBehavior(int32 data);
void resetExportedSampClkOutputBehavior();
QString getExportedSampClkOutputTerm();
void setExportedSampClkOutputTerm(const char *data);
void resetExportedSampClkOutputTerm();
float64 getExportedSampClkDelayOffset();
void setExportedSampClkDelayOffset(float64 data);
void resetExportedSampClkDelayOffset();
int32 getExportedSampClkPulsePolarity();
void setExportedSampClkPulsePolarity(int32 data);
void resetExportedSampClkPulsePolarity();
QString getExportedSampClkTimebaseOutputTerm();
void setExportedSampClkTimebaseOutputTerm(const char *data);
void resetExportedSampClkTimebaseOutputTerm();
QString getExportedDividedSampClkTimebaseOutputTerm();
void setExportedDividedSampClkTimebaseOutputTerm(const char *data);
void resetExportedDividedSampClkTimebaseOutputTerm();
QString getExportedAdvTrigOutputTerm();
void setExportedAdvTrigOutputTerm(const char *data);
void resetExportedAdvTrigOutputTerm();
int32 getExportedAdvTrigPulsePolarity();
int32 getExportedAdvTrigPulseWidthUnits();
void setExportedAdvTrigPulseWidthUnits(int32 data);
void resetExportedAdvTrigPulseWidthUnits();
float64 getExportedAdvTrigPulseWidth();
void setExportedAdvTrigPulseWidth(float64 data);
void resetExportedAdvTrigPulseWidth();
QString getExportedPauseTrigOutputTerm();
void setExportedPauseTrigOutputTerm(const char *data);
void resetExportedPauseTrigOutputTerm();
int32 getExportedPauseTrigLvlActiveLvl();
void setExportedPauseTrigLvlActiveLvl(int32 data);
void resetExportedPauseTrigLvlActiveLvl();
QString getExportedRefTrigOutputTerm();
void setExportedRefTrigOutputTerm(const char *data);
void resetExportedRefTrigOutputTerm();
int32 getExportedRefTrigPulsePolarity();
void setExportedRefTrigPulsePolarity(int32 data);
void resetExportedRefTrigPulsePolarity();
QString getExportedStartTrigOutputTerm();
void setExportedStartTrigOutputTerm(const char *data);
void resetExportedStartTrigOutputTerm();
int32 getExportedStartTrigPulsePolarity();
void setExportedStartTrigPulsePolarity(int32 data);
void resetExportedStartTrigPulsePolarity();
QString getExportedAdvCmpltEventOutputTerm();
void setExportedAdvCmpltEventOutputTerm(const char *data);
void resetExportedAdvCmpltEventOutputTerm();
float64 getExportedAdvCmpltEventDelay();
void setExportedAdvCmpltEventDelay(float64 data);
void resetExportedAdvCmpltEventDelay();
int32 getExportedAdvCmpltEventPulsePolarity();
void setExportedAdvCmpltEventPulsePolarity(int32 data);
void resetExportedAdvCmpltEventPulsePolarity();
float64 getExportedAdvCmpltEventPulseWidth();
void setExportedAdvCmpltEventPulseWidth(float64 data);
void resetExportedAdvCmpltEventPulseWidth();
QString getExportedAIHoldCmpltEventOutputTerm();
void setExportedAIHoldCmpltEventOutputTerm(const char *data);
void resetExportedAIHoldCmpltEventOutputTerm();
int32 getExportedAIHoldCmpltEventPulsePolarity();
void setExportedAIHoldCmpltEventPulsePolarity(int32 data);
void resetExportedAIHoldCmpltEventPulsePolarity();
QString getExportedChangeDetectEventOutputTerm();
void setExportedChangeDetectEventOutputTerm(const char *data);
void resetExportedChangeDetectEventOutputTerm();
int32 getExportedChangeDetectEventPulsePolarity();
void setExportedChangeDetectEventPulsePolarity(int32 data);
void resetExportedChangeDetectEventPulsePolarity();
QString getExportedCtrOutEventOutputTerm();
void setExportedCtrOutEventOutputTerm(const char *data);
void resetExportedCtrOutEventOutputTerm();
int32 getExportedCtrOutEventOutputBehavior();
void setExportedCtrOutEventOutputBehavior(int32 data);
void resetExportedCtrOutEventOutputBehavior();
int32 getExportedCtrOutEventPulsePolarity();
void setExportedCtrOutEventPulsePolarity(int32 data);
void resetExportedCtrOutEventPulsePolarity();
int32 getExportedCtrOutEventToggleIdleState();
void setExportedCtrOutEventToggleIdleState(int32 data);
void resetExportedCtrOutEventToggleIdleState();
QString getExportedHshkEventOutputTerm();
void setExportedHshkEventOutputTerm(const char *data);
void resetExportedHshkEventOutputTerm();
int32 getExportedHshkEventOutputBehavior();
void setExportedHshkEventOutputBehavior(int32 data);
void resetExportedHshkEventOutputBehavior();
float64 getExportedHshkEventDelay();
void setExportedHshkEventDelay(float64 data);
void resetExportedHshkEventDelay();
int32 getExportedHshkEventInterlockedAssertedLvl();
void setExportedHshkEventInterlockedAssertedLvl(int32 data);
void resetExportedHshkEventInterlockedAssertedLvl();
bool32 getExportedHshkEventInterlockedAssertOnStart();
void setExportedHshkEventInterlockedAssertOnStart(bool32 data);
void resetExportedHshkEventInterlockedAssertOnStart();
float64 getExportedHshkEventInterlockedDeassertDelay();
void setExportedHshkEventInterlockedDeassertDelay(float64 data);
void resetExportedHshkEventInterlockedDeassertDelay();
int32 getExportedHshkEventPulsePolarity();
void setExportedHshkEventPulsePolarity(int32 data);
void resetExportedHshkEventPulsePolarity();
float64 getExportedHshkEventPulseWidth();
void setExportedHshkEventPulseWidth(float64 data);
void resetExportedHshkEventPulseWidth();
QString getExportedRdyForXferEventOutputTerm();
void setExportedRdyForXferEventOutputTerm(const char *data);
void resetExportedRdyForXferEventOutputTerm();
int32 getExportedRdyForXferEventLvlActiveLvl();
void setExportedRdyForXferEventLvlActiveLvl(int32 data);
void resetExportedRdyForXferEventLvlActiveLvl();
int32 getExportedRdyForXferEventDeassertCond();
void setExportedRdyForXferEventDeassertCond(int32 data);
void resetExportedRdyForXferEventDeassertCond();
uInt32 getExportedRdyForXferEventDeassertCondCustomThreshold();
void setExportedRdyForXferEventDeassertCondCustomThreshold(uInt32 data);
void resetExportedRdyForXferEventDeassertCondCustomThreshold();
QString getExportedDataActiveEventOutputTerm();
void setExportedDataActiveEventOutputTerm(const char *data);
void resetExportedDataActiveEventOutputTerm();
int32 getExportedDataActiveEventLvlActiveLvl();
void setExportedDataActiveEventLvlActiveLvl(int32 data);
void resetExportedDataActiveEventLvlActiveLvl();
QString getExportedRdyForStartEventOutputTerm();
void setExportedRdyForStartEventOutputTerm(const char *data);
void resetExportedRdyForStartEventOutputTerm();
int32 getExportedRdyForStartEventLvlActiveLvl();
void setExportedRdyForStartEventLvlActiveLvl(int32 data);
void resetExportedRdyForStartEventLvlActiveLvl();
QString getExportedSyncPulseEventOutputTerm();
void setExportedSyncPulseEventOutputTerm(const char *data);
void resetExportedSyncPulseEventOutputTerm();
QString getExportedWatchdogExpiredEventOutputTerm();
void setExportedWatchdogExpiredEventOutputTerm(const char *data);
void resetExportedWatchdogExpiredEventOutputTerm();
int32 getReadRelativeTo();
void setReadRelativeTo(int32 data);
void resetReadRelativeTo();
int32 getReadOffset();
void setReadOffset(int32 data);
void resetReadOffset();
QString getReadChannelsToRead();
void setReadChannelsToRead(const char *data);
void resetReadChannelsToRead();
bool32 getReadReadAllAvailSamp();
void setReadReadAllAvailSamp(bool32 data);
void resetReadReadAllAvailSamp();
bool32 getReadAutoStart();
void setReadAutoStart(bool32 data);
void resetReadAutoStart();
int32 getReadOverWrite();
void setReadOverWrite(int32 data);
void resetReadOverWrite();
QString getLoggingFilePath();
void setLoggingFilePath(const char *data);
void resetLoggingFilePath();
int32 getLoggingMode();
void setLoggingMode(int32 data);
void resetLoggingMode();
QString getLoggingTDMSGroupName();
void setLoggingTDMSGroupName(const char *data);
void resetLoggingTDMSGroupName();
int32 getLoggingTDMSOperation();
void setLoggingTDMSOperation(int32 data);
void resetLoggingTDMSOperation();
bool32 getLoggingPause();
void setLoggingPause(bool32 data);
void resetLoggingPause();
uInt64 getLoggingSampsPerFile();
void setLoggingSampsPerFile(uInt64 data);
void resetLoggingSampsPerFile();
uInt32 getLoggingFileWriteSize();
void setLoggingFileWriteSize(uInt32 data);
void resetLoggingFileWriteSize();
uInt64 getLoggingFilePreallocationSize();
void setLoggingFilePreallocationSize(uInt64 data);
void resetLoggingFilePreallocationSize();
uInt64 getReadCurrReadPos();
uInt32 getReadAvailSampPerChan();
uInt64 getReadTotalSampPerChanAcquired();
bool32 getReadCommonModeRangeErrorChansExist();
QString getReadCommonModeRangeErrorChans();
bool32 getReadExcitFaultChansExist();
QString getReadExcitFaultChans();
bool32 getReadOvercurrentChansExist();
QString getReadOvercurrentChans();
bool32 getReadOvertemperatureChansExist();
QString getReadOvertemperatureChans();
bool32 getReadOpenChansExist();
QString getReadOpenChans();
QString getReadOpenChansDetails();
bool32 getReadOpenCurrentLoopChansExist();
QString getReadOpenCurrentLoopChans();
bool32 getReadOpenThrmcplChansExist();
QString getReadOpenThrmcplChans();
bool32 getReadOverloadedChansExist();
QString getReadOverloadedChans();
bool32 getReadInputLimitsFaultChansExist();
QString getReadInputLimitsFaultChans();
bool32 getReadPLLUnlockedChansExist();
QString getReadPLLUnlockedChans();
bool32 getReadPowerSupplyFaultChansExist();
QString getReadPowerSupplyFaultChans();
bool32 getReadSyncUnlockedChansExist();
QString getReadSyncUnlockedChans();
bool32 getReadAccessoryInsertionOrRemovalDetected();
QString getReadDevsWithInsertedOrRemovedAccessories();
bool32 getReadChangeDetectHasOverflowed();
uInt32 getReadRawDataWidth();
uInt32 getReadNumChans();
uInt32 getReadDigitalLinesBytesPerChan();
int32 getReadWaitMode();
void setReadWaitMode(int32 data);
void resetReadWaitMode();
float64 getReadSleepTime();
void setReadSleepTime(float64 data);
void resetReadSleepTime();
bool32 getRealTimeConvLateErrorsToWarnings();
void setRealTimeConvLateErrorsToWarnings(bool32 data);
void resetRealTimeConvLateErrorsToWarnings();
uInt32 getRealTimeNumOfWarmupIters();
void setRealTimeNumOfWarmupIters(uInt32 data);
void resetRealTimeNumOfWarmupIters();
int32 getRealTimeWaitForNextSampClkWaitMode();
void setRealTimeWaitForNextSampClkWaitMode(int32 data);
void resetRealTimeWaitForNextSampClkWaitMode();
bool32 getRealTimeReportMissedSamp();
void setRealTimeReportMissedSamp(bool32 data);
void resetRealTimeReportMissedSamp();
int32 getRealTimeWriteRecoveryMode();
void setRealTimeWriteRecoveryMode(int32 data);
void resetRealTimeWriteRecoveryMode();
int32 getSwitchScanBreakMode();
void setSwitchScanBreakMode(int32 data);
void resetSwitchScanBreakMode();
int32 getSwitchScanRepeatMode();
void setSwitchScanRepeatMode(int32 data);
void resetSwitchScanRepeatMode();
bool32 getSwitchScanWaitingForAdv();
QString getTaskName();
QString getTaskChannels();
uInt32 getTaskNumChans();
QString getTaskDevices();
uInt32 getTaskNumDevices();
bool32 getTaskComplete();
int32 getSampQuantSampMode();
void setSampQuantSampMode(int32 data);
void resetSampQuantSampMode();
uInt64 getSampQuantSampPerChan();
void setSampQuantSampPerChan(uInt64 data);
void resetSampQuantSampPerChan();
int32 getSampTimingType();
void setSampTimingType(int32 data);
void resetSampTimingType();
float64 getSampClkRate();
void setSampClkRate(float64 data);
void resetSampClkRate();
float64 getSampClkMaxRate();
QString getSampClkSrc();
void setSampClkSrc(const char *data);
void resetSampClkSrc();
int32 getSampClkActiveEdge();
void setSampClkActiveEdge(int32 data);
void resetSampClkActiveEdge();
int32 getSampClkOverrunBehavior();
void setSampClkOverrunBehavior(int32 data);
void resetSampClkOverrunBehavior();
int32 getSampClkUnderflowBehavior();
void setSampClkUnderflowBehavior(int32 data);
void resetSampClkUnderflowBehavior();
uInt32 getSampClkTimebaseDiv();
void setSampClkTimebaseDiv(uInt32 data);
void resetSampClkTimebaseDiv();
QString getSampClkTerm();
float64 getSampClkTimebaseRate();
void setSampClkTimebaseRate(float64 data);
void resetSampClkTimebaseRate();
QString getSampClkTimebaseSrc();
void setSampClkTimebaseSrc(const char *data);
void resetSampClkTimebaseSrc();
int32 getSampClkTimebaseActiveEdge();
void setSampClkTimebaseActiveEdge(int32 data);
void resetSampClkTimebaseActiveEdge();
uInt32 getSampClkTimebaseMasterTimebaseDiv();
void setSampClkTimebaseMasterTimebaseDiv(uInt32 data);
void resetSampClkTimebaseMasterTimebaseDiv();
QString getSampClkTimebaseTerm();
bool32 getSampClkDigFltrEnable();
void setSampClkDigFltrEnable(bool32 data);
void resetSampClkDigFltrEnable();
float64 getSampClkDigFltrMinPulseWidth();
void setSampClkDigFltrMinPulseWidth(float64 data);
void resetSampClkDigFltrMinPulseWidth();
QString getSampClkDigFltrTimebaseSrc();
void setSampClkDigFltrTimebaseSrc(const char *data);
void resetSampClkDigFltrTimebaseSrc();
float64 getSampClkDigFltrTimebaseRate();
void setSampClkDigFltrTimebaseRate(float64 data);
void resetSampClkDigFltrTimebaseRate();
bool32 getSampClkDigSyncEnable();
void setSampClkDigSyncEnable(bool32 data);
void resetSampClkDigSyncEnable();
bool32 getSampClkWriteWfmUseInitialWfmDT();
void setSampClkWriteWfmUseInitialWfmDT(bool32 data);
void resetSampClkWriteWfmUseInitialWfmDT();
float64 getHshkDelayAfterXfer();
void setHshkDelayAfterXfer(float64 data);
void resetHshkDelayAfterXfer();
int32 getHshkStartCond();
void setHshkStartCond(int32 data);
void resetHshkStartCond();
int32 getHshkSampleInputDataWhen();
void setHshkSampleInputDataWhen(int32 data);
void resetHshkSampleInputDataWhen();
QString getChangeDetectDIRisingEdgePhysicalChans();
void setChangeDetectDIRisingEdgePhysicalChans(const char *data);
void resetChangeDetectDIRisingEdgePhysicalChans();
QString getChangeDetectDIFallingEdgePhysicalChans();
void setChangeDetectDIFallingEdgePhysicalChans(const char *data);
void resetChangeDetectDIFallingEdgePhysicalChans();
bool32 getChangeDetectDITristate();
void setChangeDetectDITristate(bool32 data);
void resetChangeDetectDITristate();
bool32 getOnDemandSimultaneousAOEnable();
void setOnDemandSimultaneousAOEnable(bool32 data);
void resetOnDemandSimultaneousAOEnable();
int32 getImplicitUnderflowBehavior();
void setImplicitUnderflowBehavior(int32 data);
void resetImplicitUnderflowBehavior();
float64 getAIConvRate();
void setAIConvRate(float64 data);
void resetAIConvRate();
void getAIConvRateEx(const char deviceNames[], float64 *data);
void setAIConvRateEx(const char deviceNames[], float64 data);
void resetAIConvRateEx(const char deviceNames[]);
float64 getAIConvMaxRate();
void getAIConvMaxRateEx(const char deviceNames[], float64 *data);
QString getAIConvSrc();
void setAIConvSrc(const char *data);
void resetAIConvSrc();
QString getAIConvSrcEx(const char deviceNames[]);
void setAIConvSrcEx(const char deviceNames[], const char *data);
void resetAIConvSrcEx(const char deviceNames[]);
int32 getAIConvActiveEdge();
void setAIConvActiveEdge(int32 data);
void resetAIConvActiveEdge();
void getAIConvActiveEdgeEx(const char deviceNames[], int32 *data);
void setAIConvActiveEdgeEx(const char deviceNames[], int32 data);
void resetAIConvActiveEdgeEx(const char deviceNames[]);
uInt32 getAIConvTimebaseDiv();
void setAIConvTimebaseDiv(uInt32 data);
void resetAIConvTimebaseDiv();
void getAIConvTimebaseDivEx(const char deviceNames[], uInt32 *data);
void setAIConvTimebaseDivEx(const char deviceNames[], uInt32 data);
void resetAIConvTimebaseDivEx(const char deviceNames[]);
int32 getAIConvTimebaseSrc();
void setAIConvTimebaseSrc(int32 data);
void resetAIConvTimebaseSrc();
void getAIConvTimebaseSrcEx(const char deviceNames[], int32 *data);
void setAIConvTimebaseSrcEx(const char deviceNames[], int32 data);
void resetAIConvTimebaseSrcEx(const char deviceNames[]);
int32 getDelayFromSampClkDelayUnits();
void setDelayFromSampClkDelayUnits(int32 data);
void resetDelayFromSampClkDelayUnits();
void getDelayFromSampClkDelayUnitsEx(const char deviceNames[],
					  int32 *data);
void setDelayFromSampClkDelayUnitsEx(const char deviceNames[],
					  int32 data);
void resetDelayFromSampClkDelayUnitsEx(const char deviceNames[]);
float64 getDelayFromSampClkDelay();
void setDelayFromSampClkDelay(float64 data);
void resetDelayFromSampClkDelay();
void getDelayFromSampClkDelayEx(const char deviceNames[], float64 *data);
void setDelayFromSampClkDelayEx(const char deviceNames[], float64 data);
void resetDelayFromSampClkDelayEx(const char deviceNames[]);
bool32 getAIConvDigFltrEnable();
void setAIConvDigFltrEnable(bool32 data);
void resetAIConvDigFltrEnable();
void getAIConvDigFltrEnableEx(const char deviceNames[], bool32 *data);
void setAIConvDigFltrEnableEx(const char deviceNames[], bool32 data);
void resetAIConvDigFltrEnableEx(const char deviceNames[]);
float64 getAIConvDigFltrMinPulseWidth();
void setAIConvDigFltrMinPulseWidth(float64 data);
void resetAIConvDigFltrMinPulseWidth();
void getAIConvDigFltrMinPulseWidthEx(const char deviceNames[],
					  float64 *data);
void setAIConvDigFltrMinPulseWidthEx(const char deviceNames[],
					  float64 data);
void resetAIConvDigFltrMinPulseWidthEx(const char deviceNames[]);
QString getAIConvDigFltrTimebaseSrc();
void setAIConvDigFltrTimebaseSrc(const char *data);
void resetAIConvDigFltrTimebaseSrc();
QString getAIConvDigFltrTimebaseSrcEx(const char deviceNames[]);
void setAIConvDigFltrTimebaseSrcEx(const char deviceNames[],
					const char *data);
void resetAIConvDigFltrTimebaseSrcEx(const char deviceNames[]);
float64 getAIConvDigFltrTimebaseRate();
void setAIConvDigFltrTimebaseRate(float64 data);
void resetAIConvDigFltrTimebaseRate();
void getAIConvDigFltrTimebaseRateEx(const char deviceNames[],
					 float64 *data);
void setAIConvDigFltrTimebaseRateEx(const char deviceNames[],
					 float64 data);
void resetAIConvDigFltrTimebaseRateEx(const char deviceNames[]);
bool32 getAIConvDigSyncEnable();
void setAIConvDigSyncEnable(bool32 data);
void resetAIConvDigSyncEnable();
void getAIConvDigSyncEnableEx(const char deviceNames[], bool32 *data);
void setAIConvDigSyncEnableEx(const char deviceNames[], bool32 data);
void resetAIConvDigSyncEnableEx(const char deviceNames[]);
float64 getMasterTimebaseRate();
void setMasterTimebaseRate(float64 data);
void resetMasterTimebaseRate();
QString getMasterTimebaseSrc();
void setMasterTimebaseSrc(const char *data);
void resetMasterTimebaseSrc();
float64 getRefClkRate();
void setRefClkRate(float64 data);
void resetRefClkRate();
QString getRefClkSrc();
void setRefClkSrc(const char *data);
void resetRefClkSrc();
int32 getSyncPulseType();
void setSyncPulseType(int32 data);
void resetSyncPulseType();
QString getSyncPulseSrc();
void setSyncPulseSrc(const char *data);
void resetSyncPulseSrc();
CVIAbsoluteTime getSyncPulseTimeWhen();
void setSyncPulseTimeWhen(CVIAbsoluteTime data);
void resetSyncPulseTimeWhen();
int32 getSyncPulseTimeTimescale();
void setSyncPulseTimeTimescale(int32 data);
void resetSyncPulseTimeTimescale();
float64 getSyncPulseSyncTime();
float64 getSyncPulseMinDelayToStart();
void setSyncPulseMinDelayToStart(float64 data);
void resetSyncPulseMinDelayToStart();
float64 getSyncPulseResetTime();
float64 getSyncPulseResetDelay();
void setSyncPulseResetDelay(float64 data);
void resetSyncPulseResetDelay();
QString getSyncPulseTerm();
uInt32 getSyncClkInterval();
void setSyncClkInterval(uInt32 data);
void resetSyncClkInterval();
uInt32 getSampTimingEngine();
void setSampTimingEngine(uInt32 data);
void resetSampTimingEngine();
bool32 getFirstSampTimestampEnable();
void setFirstSampTimestampEnable(bool32 data);
void resetFirstSampTimestampEnable();
int32 getFirstSampTimestampTimescale();
void setFirstSampTimestampTimescale(int32 data);
void resetFirstSampTimestampTimescale();
CVIAbsoluteTime getFirstSampTimestampVal();
CVIAbsoluteTime getFirstSampClkWhen();
void setFirstSampClkWhen(CVIAbsoluteTime data);
void resetFirstSampClkWhen();
int32 getFirstSampClkTimescale();
void setFirstSampClkTimescale(int32 data);
void resetFirstSampClkTimescale();
int32 getStartTrigType();
void setStartTrigType(int32 data);
void resetStartTrigType();
QString getStartTrigTerm();
QString getDigEdgeStartTrigSrc();
void setDigEdgeStartTrigSrc(const char *data);
void resetDigEdgeStartTrigSrc();
int32 getDigEdgeStartTrigEdge();
void setDigEdgeStartTrigEdge(int32 data);
void resetDigEdgeStartTrigEdge();
bool32 getDigEdgeStartTrigDigFltrEnable();
void setDigEdgeStartTrigDigFltrEnable(bool32 data);
void resetDigEdgeStartTrigDigFltrEnable();
float64 getDigEdgeStartTrigDigFltrMinPulseWidth();
void setDigEdgeStartTrigDigFltrMinPulseWidth(float64 data);
void resetDigEdgeStartTrigDigFltrMinPulseWidth();
QString getDigEdgeStartTrigDigFltrTimebaseSrc();
void setDigEdgeStartTrigDigFltrTimebaseSrc(const char *data);
void resetDigEdgeStartTrigDigFltrTimebaseSrc();
float64 getDigEdgeStartTrigDigFltrTimebaseRate();
void setDigEdgeStartTrigDigFltrTimebaseRate(float64 data);
void resetDigEdgeStartTrigDigFltrTimebaseRate();
bool32 getDigEdgeStartTrigDigSyncEnable();
void setDigEdgeStartTrigDigSyncEnable(bool32 data);
void resetDigEdgeStartTrigDigSyncEnable();
QString getDigPatternStartTrigSrc();
void setDigPatternStartTrigSrc(const char *data);
void resetDigPatternStartTrigSrc();
QString getDigPatternStartTrigPattern();
void setDigPatternStartTrigPattern(const char *data);
void resetDigPatternStartTrigPattern();
int32 getDigPatternStartTrigWhen();
void setDigPatternStartTrigWhen(int32 data);
void resetDigPatternStartTrigWhen();
QString getAnlgEdgeStartTrigSrc();
void setAnlgEdgeStartTrigSrc(const char *data);
void resetAnlgEdgeStartTrigSrc();
int32 getAnlgEdgeStartTrigSlope();
void setAnlgEdgeStartTrigSlope(int32 data);
void resetAnlgEdgeStartTrigSlope();
float64 getAnlgEdgeStartTrigLvl();
void setAnlgEdgeStartTrigLvl(float64 data);
void resetAnlgEdgeStartTrigLvl();
float64 getAnlgEdgeStartTrigHyst();
void setAnlgEdgeStartTrigHyst(float64 data);
void resetAnlgEdgeStartTrigHyst();
int32 getAnlgEdgeStartTrigCoupling();
void setAnlgEdgeStartTrigCoupling(int32 data);
void resetAnlgEdgeStartTrigCoupling();
bool32 getAnlgEdgeStartTrigDigFltrEnable();
void setAnlgEdgeStartTrigDigFltrEnable(bool32 data);
void resetAnlgEdgeStartTrigDigFltrEnable();
float64 getAnlgEdgeStartTrigDigFltrMinPulseWidth();
void setAnlgEdgeStartTrigDigFltrMinPulseWidth(float64 data);
void resetAnlgEdgeStartTrigDigFltrMinPulseWidth();
QString getAnlgEdgeStartTrigDigFltrTimebaseSrc();
void setAnlgEdgeStartTrigDigFltrTimebaseSrc(const char *data);
void resetAnlgEdgeStartTrigDigFltrTimebaseSrc();
float64 getAnlgEdgeStartTrigDigFltrTimebaseRate();
void setAnlgEdgeStartTrigDigFltrTimebaseRate(float64 data);
void resetAnlgEdgeStartTrigDigFltrTimebaseRate();
bool32 getAnlgEdgeStartTrigDigSyncEnable();
void setAnlgEdgeStartTrigDigSyncEnable(bool32 data);
void resetAnlgEdgeStartTrigDigSyncEnable();
QString getAnlgMultiEdgeStartTrigSrcs();
void setAnlgMultiEdgeStartTrigSrcs(const char *data);
void resetAnlgMultiEdgeStartTrigSrcs();
void getAnlgMultiEdgeStartTrigSlopes(int32 *data,
					  uInt32 arraySizeInElements);
void setAnlgMultiEdgeStartTrigSlopes(int32 *data,
					  uInt32 arraySizeInElements);
void resetAnlgMultiEdgeStartTrigSlopes();
void getAnlgMultiEdgeStartTrigLvls(float64 *data,
					uInt32 arraySizeInElements);
void setAnlgMultiEdgeStartTrigLvls(float64 *data,
					uInt32 arraySizeInElements);
void resetAnlgMultiEdgeStartTrigLvls();
void getAnlgMultiEdgeStartTrigHysts(float64 *data,
					 uInt32 arraySizeInElements);
void setAnlgMultiEdgeStartTrigHysts(float64 *data,
					 uInt32 arraySizeInElements);
void resetAnlgMultiEdgeStartTrigHysts();
void getAnlgMultiEdgeStartTrigCouplings(int32 *data,
					     uInt32 arraySizeInElements);
void setAnlgMultiEdgeStartTrigCouplings(int32 *data,
					     uInt32 arraySizeInElements);
void resetAnlgMultiEdgeStartTrigCouplings();
QString getAnlgWinStartTrigSrc();
void setAnlgWinStartTrigSrc(const char *data);
void resetAnlgWinStartTrigSrc();
int32 getAnlgWinStartTrigWhen();
void setAnlgWinStartTrigWhen(int32 data);
void resetAnlgWinStartTrigWhen();
float64 getAnlgWinStartTrigTop();
void setAnlgWinStartTrigTop(float64 data);
void resetAnlgWinStartTrigTop();
float64 getAnlgWinStartTrigBtm();
void setAnlgWinStartTrigBtm(float64 data);
void resetAnlgWinStartTrigBtm();
int32 getAnlgWinStartTrigCoupling();
void setAnlgWinStartTrigCoupling(int32 data);
void resetAnlgWinStartTrigCoupling();
bool32 getAnlgWinStartTrigDigFltrEnable();
void setAnlgWinStartTrigDigFltrEnable(bool32 data);
void resetAnlgWinStartTrigDigFltrEnable();
float64 getAnlgWinStartTrigDigFltrMinPulseWidth();
void setAnlgWinStartTrigDigFltrMinPulseWidth(float64 data);
void resetAnlgWinStartTrigDigFltrMinPulseWidth();
QString getAnlgWinStartTrigDigFltrTimebaseSrc();
void setAnlgWinStartTrigDigFltrTimebaseSrc(const char *data);
void resetAnlgWinStartTrigDigFltrTimebaseSrc();
float64 getAnlgWinStartTrigDigFltrTimebaseRate();
void setAnlgWinStartTrigDigFltrTimebaseRate(float64 data);
void resetAnlgWinStartTrigDigFltrTimebaseRate();
bool32 getAnlgWinStartTrigDigSyncEnable();
void setAnlgWinStartTrigDigSyncEnable(bool32 data);
void resetAnlgWinStartTrigDigSyncEnable();
CVIAbsoluteTime getStartTrigTrigWhen();
void setStartTrigTrigWhen(CVIAbsoluteTime data);
void resetStartTrigTrigWhen();
int32 getStartTrigTimescale();
void setStartTrigTimescale(int32 data);
void resetStartTrigTimescale();
bool32 getStartTrigTimestampEnable();
void setStartTrigTimestampEnable(bool32 data);
void resetStartTrigTimestampEnable();
int32 getStartTrigTimestampTimescale();
void setStartTrigTimestampTimescale(int32 data);
void resetStartTrigTimestampTimescale();
CVIAbsoluteTime getStartTrigTimestampVal();
float64 getStartTrigDelay();
void setStartTrigDelay(float64 data);
void resetStartTrigDelay();
int32 getStartTrigDelayUnits();
void setStartTrigDelayUnits(int32 data);
void resetStartTrigDelayUnits();
bool32 getStartTrigRetriggerable();
void setStartTrigRetriggerable(bool32 data);
void resetStartTrigRetriggerable();
float64 getStartTrigTrigWin();
void setStartTrigTrigWin(float64 data);
void resetStartTrigTrigWin();
float64 getStartTrigRetriggerWin();
void setStartTrigRetriggerWin(float64 data);
void resetStartTrigRetriggerWin();
uInt32 getStartTrigMaxNumTrigsToDetect();
void setStartTrigMaxNumTrigsToDetect(uInt32 data);
void resetStartTrigMaxNumTrigsToDetect();
int32 getRefTrigType();
void setRefTrigType(int32 data);
void resetRefTrigType();
uInt32 getRefTrigPretrigSamples();
void setRefTrigPretrigSamples(uInt32 data);
void resetRefTrigPretrigSamples();
QString getRefTrigTerm();
QString getDigEdgeRefTrigSrc();
void setDigEdgeRefTrigSrc(const char *data);
void resetDigEdgeRefTrigSrc();
int32 getDigEdgeRefTrigEdge();
void setDigEdgeRefTrigEdge(int32 data);
void resetDigEdgeRefTrigEdge();
bool32 getDigEdgeRefTrigDigFltrEnable();
void setDigEdgeRefTrigDigFltrEnable(bool32 data);
void resetDigEdgeRefTrigDigFltrEnable();
float64 getDigEdgeRefTrigDigFltrMinPulseWidth();
void setDigEdgeRefTrigDigFltrMinPulseWidth(float64 data);
void resetDigEdgeRefTrigDigFltrMinPulseWidth();
QString getDigEdgeRefTrigDigFltrTimebaseSrc();
void setDigEdgeRefTrigDigFltrTimebaseSrc(const char *data);
void resetDigEdgeRefTrigDigFltrTimebaseSrc();
float64 getDigEdgeRefTrigDigFltrTimebaseRate();
void setDigEdgeRefTrigDigFltrTimebaseRate(float64 data);
void resetDigEdgeRefTrigDigFltrTimebaseRate();
bool32 getDigEdgeRefTrigDigSyncEnable();
void setDigEdgeRefTrigDigSyncEnable(bool32 data);
void resetDigEdgeRefTrigDigSyncEnable();
QString getDigPatternRefTrigSrc();
void setDigPatternRefTrigSrc(const char *data);
void resetDigPatternRefTrigSrc();
QString getDigPatternRefTrigPattern();
void setDigPatternRefTrigPattern(const char *data);
void resetDigPatternRefTrigPattern();
int32 getDigPatternRefTrigWhen();
void setDigPatternRefTrigWhen(int32 data);
void resetDigPatternRefTrigWhen();
QString getAnlgEdgeRefTrigSrc();
void setAnlgEdgeRefTrigSrc(const char *data);
void resetAnlgEdgeRefTrigSrc();
int32 getAnlgEdgeRefTrigSlope();
void setAnlgEdgeRefTrigSlope(int32 data);
void resetAnlgEdgeRefTrigSlope();
float64 getAnlgEdgeRefTrigLvl();
void setAnlgEdgeRefTrigLvl(float64 data);
void resetAnlgEdgeRefTrigLvl();
float64 getAnlgEdgeRefTrigHyst();
void setAnlgEdgeRefTrigHyst(float64 data);
void resetAnlgEdgeRefTrigHyst();
int32 getAnlgEdgeRefTrigCoupling();
void setAnlgEdgeRefTrigCoupling(int32 data);
void resetAnlgEdgeRefTrigCoupling();
bool32 getAnlgEdgeRefTrigDigFltrEnable();
void setAnlgEdgeRefTrigDigFltrEnable(bool32 data);
void resetAnlgEdgeRefTrigDigFltrEnable();
float64 getAnlgEdgeRefTrigDigFltrMinPulseWidth();
void setAnlgEdgeRefTrigDigFltrMinPulseWidth(float64 data);
void resetAnlgEdgeRefTrigDigFltrMinPulseWidth();
QString getAnlgEdgeRefTrigDigFltrTimebaseSrc();
void setAnlgEdgeRefTrigDigFltrTimebaseSrc(const char *data);
void resetAnlgEdgeRefTrigDigFltrTimebaseSrc();
float64 getAnlgEdgeRefTrigDigFltrTimebaseRate();
void setAnlgEdgeRefTrigDigFltrTimebaseRate(float64 data);
void resetAnlgEdgeRefTrigDigFltrTimebaseRate();
bool32 getAnlgEdgeRefTrigDigSyncEnable();
void setAnlgEdgeRefTrigDigSyncEnable(bool32 data);
void resetAnlgEdgeRefTrigDigSyncEnable();
QString getAnlgMultiEdgeRefTrigSrcs();
void setAnlgMultiEdgeRefTrigSrcs(const char *data);
void resetAnlgMultiEdgeRefTrigSrcs();
void getAnlgMultiEdgeRefTrigSlopes(int32 *data,
					uInt32 arraySizeInElements);
void setAnlgMultiEdgeRefTrigSlopes(int32 *data,
					uInt32 arraySizeInElements);
void resetAnlgMultiEdgeRefTrigSlopes();
void getAnlgMultiEdgeRefTrigLvls(float64 *data,
				      uInt32 arraySizeInElements);
void setAnlgMultiEdgeRefTrigLvls(float64 *data,
				      uInt32 arraySizeInElements);
void resetAnlgMultiEdgeRefTrigLvls();
void getAnlgMultiEdgeRefTrigHysts(float64 *data,
				       uInt32 arraySizeInElements);
void setAnlgMultiEdgeRefTrigHysts(float64 *data,
				       uInt32 arraySizeInElements);
void resetAnlgMultiEdgeRefTrigHysts();
void getAnlgMultiEdgeRefTrigCouplings(int32 *data,
					   uInt32 arraySizeInElements);
void setAnlgMultiEdgeRefTrigCouplings(int32 *data,
					   uInt32 arraySizeInElements);
void resetAnlgMultiEdgeRefTrigCouplings();
QString getAnlgWinRefTrigSrc();
void setAnlgWinRefTrigSrc(const char *data);
void resetAnlgWinRefTrigSrc();
int32 getAnlgWinRefTrigWhen();
void setAnlgWinRefTrigWhen(int32 data);
void resetAnlgWinRefTrigWhen();
float64 getAnlgWinRefTrigTop();
void setAnlgWinRefTrigTop(float64 data);
void resetAnlgWinRefTrigTop();
float64 getAnlgWinRefTrigBtm();
void setAnlgWinRefTrigBtm(float64 data);
void resetAnlgWinRefTrigBtm();
int32 getAnlgWinRefTrigCoupling();
void setAnlgWinRefTrigCoupling(int32 data);
void resetAnlgWinRefTrigCoupling();
bool32 getAnlgWinRefTrigDigFltrEnable();
void setAnlgWinRefTrigDigFltrEnable(bool32 data);
void resetAnlgWinRefTrigDigFltrEnable();
float64 getAnlgWinRefTrigDigFltrMinPulseWidth();
void setAnlgWinRefTrigDigFltrMinPulseWidth(float64 data);
void resetAnlgWinRefTrigDigFltrMinPulseWidth();
QString getAnlgWinRefTrigDigFltrTimebaseSrc();
void setAnlgWinRefTrigDigFltrTimebaseSrc(const char *data);
void resetAnlgWinRefTrigDigFltrTimebaseSrc();
float64 getAnlgWinRefTrigDigFltrTimebaseRate();
void setAnlgWinRefTrigDigFltrTimebaseRate(float64 data);
void resetAnlgWinRefTrigDigFltrTimebaseRate();
bool32 getAnlgWinRefTrigDigSyncEnable();
void setAnlgWinRefTrigDigSyncEnable(bool32 data);
void resetAnlgWinRefTrigDigSyncEnable();
bool32 getRefTrigAutoTrigEnable();
void setRefTrigAutoTrigEnable(bool32 data);
void resetRefTrigAutoTrigEnable();
bool32 getRefTrigAutoTriggered();
bool32 getRefTrigTimestampEnable();
void setRefTrigTimestampEnable(bool32 data);
void resetRefTrigTimestampEnable();
int32 getRefTrigTimestampTimescale();
void setRefTrigTimestampTimescale(int32 data);
void resetRefTrigTimestampTimescale();
CVIAbsoluteTime getRefTrigTimestampVal();
float64 getRefTrigDelay();
void setRefTrigDelay(float64 data);
void resetRefTrigDelay();
bool32 getRefTrigRetriggerable();
void setRefTrigRetriggerable(bool32 data);
void resetRefTrigRetriggerable();
float64 getRefTrigTrigWin();
void setRefTrigTrigWin(float64 data);
void resetRefTrigTrigWin();
float64 getRefTrigRetriggerWin();
void setRefTrigRetriggerWin(float64 data);
void resetRefTrigRetriggerWin();
uInt32 getRefTrigMaxNumTrigsToDetect();
void setRefTrigMaxNumTrigsToDetect(uInt32 data);
void resetRefTrigMaxNumTrigsToDetect();
int32 getAdvTrigType();
void setAdvTrigType(int32 data);
void resetAdvTrigType();
QString getDigEdgeAdvTrigSrc();
void setDigEdgeAdvTrigSrc(const char *data);
void resetDigEdgeAdvTrigSrc();
int32 getDigEdgeAdvTrigEdge();
void setDigEdgeAdvTrigEdge(int32 data);
void resetDigEdgeAdvTrigEdge();
bool32 getDigEdgeAdvTrigDigFltrEnable();
void setDigEdgeAdvTrigDigFltrEnable(bool32 data);
void resetDigEdgeAdvTrigDigFltrEnable();
int32 getHshkTrigType();
void setHshkTrigType(int32 data);
void resetHshkTrigType();
QString getInterlockedHshkTrigSrc();
void setInterlockedHshkTrigSrc(const char *data);
void resetInterlockedHshkTrigSrc();
int32 getInterlockedHshkTrigAssertedLvl();
void setInterlockedHshkTrigAssertedLvl(int32 data);
void resetInterlockedHshkTrigAssertedLvl();
int32 getPauseTrigType();
void setPauseTrigType(int32 data);
void resetPauseTrigType();
QString getPauseTrigTerm();
QString getAnlgLvlPauseTrigSrc();
void setAnlgLvlPauseTrigSrc(const char *data);
void resetAnlgLvlPauseTrigSrc();
int32 getAnlgLvlPauseTrigWhen();
void setAnlgLvlPauseTrigWhen(int32 data);
void resetAnlgLvlPauseTrigWhen();
float64 getAnlgLvlPauseTrigLvl();
void setAnlgLvlPauseTrigLvl(float64 data);
void resetAnlgLvlPauseTrigLvl();
float64 getAnlgLvlPauseTrigHyst();
void setAnlgLvlPauseTrigHyst(float64 data);
void resetAnlgLvlPauseTrigHyst();
int32 getAnlgLvlPauseTrigCoupling();
void setAnlgLvlPauseTrigCoupling(int32 data);
void resetAnlgLvlPauseTrigCoupling();
bool32 getAnlgLvlPauseTrigDigFltrEnable();
void setAnlgLvlPauseTrigDigFltrEnable(bool32 data);
void resetAnlgLvlPauseTrigDigFltrEnable();
float64 getAnlgLvlPauseTrigDigFltrMinPulseWidth();
void setAnlgLvlPauseTrigDigFltrMinPulseWidth(float64 data);
void resetAnlgLvlPauseTrigDigFltrMinPulseWidth();
QString getAnlgLvlPauseTrigDigFltrTimebaseSrc();
void setAnlgLvlPauseTrigDigFltrTimebaseSrc(const char *data);
void resetAnlgLvlPauseTrigDigFltrTimebaseSrc();
float64 getAnlgLvlPauseTrigDigFltrTimebaseRate();
void setAnlgLvlPauseTrigDigFltrTimebaseRate(float64 data);
void resetAnlgLvlPauseTrigDigFltrTimebaseRate();
bool32 getAnlgLvlPauseTrigDigSyncEnable();
void setAnlgLvlPauseTrigDigSyncEnable(bool32 data);
void resetAnlgLvlPauseTrigDigSyncEnable();
QString getAnlgWinPauseTrigSrc();
void setAnlgWinPauseTrigSrc(const char *data);
void resetAnlgWinPauseTrigSrc();
int32 getAnlgWinPauseTrigWhen();
void setAnlgWinPauseTrigWhen(int32 data);
void resetAnlgWinPauseTrigWhen();
float64 getAnlgWinPauseTrigTop();
void setAnlgWinPauseTrigTop(float64 data);
void resetAnlgWinPauseTrigTop();
float64 getAnlgWinPauseTrigBtm();
void setAnlgWinPauseTrigBtm(float64 data);
void resetAnlgWinPauseTrigBtm();
int32 getAnlgWinPauseTrigCoupling();
void setAnlgWinPauseTrigCoupling(int32 data);
void resetAnlgWinPauseTrigCoupling();
bool32 getAnlgWinPauseTrigDigFltrEnable();
void setAnlgWinPauseTrigDigFltrEnable(bool32 data);
void resetAnlgWinPauseTrigDigFltrEnable();
float64 getAnlgWinPauseTrigDigFltrMinPulseWidth();
void setAnlgWinPauseTrigDigFltrMinPulseWidth(float64 data);
void resetAnlgWinPauseTrigDigFltrMinPulseWidth();
QString getAnlgWinPauseTrigDigFltrTimebaseSrc();
void setAnlgWinPauseTrigDigFltrTimebaseSrc(const char *data);
void resetAnlgWinPauseTrigDigFltrTimebaseSrc();
float64 getAnlgWinPauseTrigDigFltrTimebaseRate();
void setAnlgWinPauseTrigDigFltrTimebaseRate(float64 data);
void resetAnlgWinPauseTrigDigFltrTimebaseRate();
bool32 getAnlgWinPauseTrigDigSyncEnable();
void setAnlgWinPauseTrigDigSyncEnable(bool32 data);
void resetAnlgWinPauseTrigDigSyncEnable();
QString getDigLvlPauseTrigSrc();
void setDigLvlPauseTrigSrc(const char *data);
void resetDigLvlPauseTrigSrc();
int32 getDigLvlPauseTrigWhen();
void setDigLvlPauseTrigWhen(int32 data);
void resetDigLvlPauseTrigWhen();
bool32 getDigLvlPauseTrigDigFltrEnable();
void setDigLvlPauseTrigDigFltrEnable(bool32 data);
void resetDigLvlPauseTrigDigFltrEnable();
float64 getDigLvlPauseTrigDigFltrMinPulseWidth();
void setDigLvlPauseTrigDigFltrMinPulseWidth(float64 data);
void resetDigLvlPauseTrigDigFltrMinPulseWidth();
QString getDigLvlPauseTrigDigFltrTimebaseSrc();
void setDigLvlPauseTrigDigFltrTimebaseSrc(const char *data);
void resetDigLvlPauseTrigDigFltrTimebaseSrc();
float64 getDigLvlPauseTrigDigFltrTimebaseRate();
void setDigLvlPauseTrigDigFltrTimebaseRate(float64 data);
void resetDigLvlPauseTrigDigFltrTimebaseRate();
bool32 getDigLvlPauseTrigDigSyncEnable();
void setDigLvlPauseTrigDigSyncEnable(bool32 data);
void resetDigLvlPauseTrigDigSyncEnable();
QString getDigPatternPauseTrigSrc();
void setDigPatternPauseTrigSrc(const char *data);
void resetDigPatternPauseTrigSrc();
QString getDigPatternPauseTrigPattern();
void setDigPatternPauseTrigPattern(const char *data);
void resetDigPatternPauseTrigPattern();
int32 getDigPatternPauseTrigWhen();
void setDigPatternPauseTrigWhen(int32 data);
void resetDigPatternPauseTrigWhen();
int32 getArmStartTrigType();
void setArmStartTrigType(int32 data);
void resetArmStartTrigType();
QString getArmStartTerm();
QString getDigEdgeArmStartTrigSrc();
void setDigEdgeArmStartTrigSrc(const char *data);
void resetDigEdgeArmStartTrigSrc();
int32 getDigEdgeArmStartTrigEdge();
void setDigEdgeArmStartTrigEdge(int32 data);
void resetDigEdgeArmStartTrigEdge();
bool32 getDigEdgeArmStartTrigDigFltrEnable();
void setDigEdgeArmStartTrigDigFltrEnable(bool32 data);
void resetDigEdgeArmStartTrigDigFltrEnable();
float64 getDigEdgeArmStartTrigDigFltrMinPulseWidth();
void setDigEdgeArmStartTrigDigFltrMinPulseWidth(float64 data);
void resetDigEdgeArmStartTrigDigFltrMinPulseWidth();
QString getDigEdgeArmStartTrigDigFltrTimebaseSrc();
void setDigEdgeArmStartTrigDigFltrTimebaseSrc(const char *data);
void resetDigEdgeArmStartTrigDigFltrTimebaseSrc();
float64 getDigEdgeArmStartTrigDigFltrTimebaseRate();
void setDigEdgeArmStartTrigDigFltrTimebaseRate(float64 data);
void resetDigEdgeArmStartTrigDigFltrTimebaseRate();
bool32 getDigEdgeArmStartTrigDigSyncEnable();
void setDigEdgeArmStartTrigDigSyncEnable(bool32 data);
void resetDigEdgeArmStartTrigDigSyncEnable();
CVIAbsoluteTime getArmStartTrigTrigWhen();
void setArmStartTrigTrigWhen(CVIAbsoluteTime data);
void resetArmStartTrigTrigWhen();
int32 getArmStartTrigTimescale();
void setArmStartTrigTimescale(int32 data);
void resetArmStartTrigTimescale();
bool32 getArmStartTrigTimestampEnable();
void setArmStartTrigTimestampEnable(bool32 data);
void resetArmStartTrigTimestampEnable();
int32 getArmStartTrigTimestampTimescale();
void setArmStartTrigTimestampTimescale(int32 data);
void resetArmStartTrigTimestampTimescale();
CVIAbsoluteTime getArmStartTrigTimestampVal();
int32 getTriggerSyncType();
void setTriggerSyncType(int32 data);
void resetTriggerSyncType();
float64 getWatchdogTimeout();
void setWatchdogTimeout(float64 data);
void resetWatchdogTimeout();
int32 getWatchdogExpirTrigType();
void setWatchdogExpirTrigType(int32 data);
void resetWatchdogExpirTrigType();
bool32 getWatchdogExpirTrigTrigOnNetworkConnLoss();
void setWatchdogExpirTrigTrigOnNetworkConnLoss(bool32 data);
void resetWatchdogExpirTrigTrigOnNetworkConnLoss();
QString getDigEdgeWatchdogExpirTrigSrc();
void setDigEdgeWatchdogExpirTrigSrc(const char *data);
void resetDigEdgeWatchdogExpirTrigSrc();
int32 getDigEdgeWatchdogExpirTrigEdge();
void setDigEdgeWatchdogExpirTrigEdge(int32 data);
void resetDigEdgeWatchdogExpirTrigEdge();
void getWatchdogDOExpirState(const char lines[], int32 *data);
void setWatchdogDOExpirState(const char lines[], int32 data);
void resetWatchdogDOExpirState(const char lines[]);
void getWatchdogAOOutputType(const char lines[], int32 *data);
void setWatchdogAOOutputType(const char lines[], int32 data);
void resetWatchdogAOOutputType(const char lines[]);
void getWatchdogAOExpirState(const char lines[], float64 *data);
void setWatchdogAOExpirState(const char lines[], float64 data);
void resetWatchdogAOExpirState(const char lines[]);
void getWatchdogCOExpirState(const char lines[], int32 *data);
void setWatchdogCOExpirState(const char lines[], int32 data);
void resetWatchdogCOExpirState(const char lines[]);
bool32 getWatchdogHasExpired();
int32 getWriteRelativeTo();
void setWriteRelativeTo(int32 data);
void resetWriteRelativeTo();
int32 getWriteOffset();
void setWriteOffset(int32 data);
void resetWriteOffset();
int32 getWriteRegenMode();
void setWriteRegenMode(int32 data);
void resetWriteRegenMode();
uInt64 getWriteCurrWritePos();
bool32 getWriteOvercurrentChansExist();
QString getWriteOvercurrentChans();
bool32 getWriteOvertemperatureChansExist();
QString getWriteOvertemperatureChans();
bool32 getWriteExternalOvervoltageChansExist();
QString getWriteExternalOvervoltageChans();
bool32 getWriteOverloadedChansExist();
QString getWriteOverloadedChans();
bool32 getWriteOpenCurrentLoopChansExist();
QString getWriteOpenCurrentLoopChans();
bool32 getWritePowerSupplyFaultChansExist();
QString getWritePowerSupplyFaultChans();
bool32 getWriteSyncUnlockedChansExist();
QString getWriteSyncUnlockedChans();
uInt32 getWriteSpaceAvail();
uInt64 getWriteTotalSampPerChanGenerated();
bool32 getWriteAccessoryInsertionOrRemovalDetected();
QString getWriteDevsWithInsertedOrRemovedAccessories();
uInt32 getWriteRawDataWidth();
uInt32 getWriteNumChans();
int32 getWriteWaitMode();
void setWriteWaitMode(int32 data);
void resetWriteWaitMode();
float64 getWriteSleepTime();
void setWriteSleepTime(float64 data);
void resetWriteSleepTime();
uInt32 getWriteDigitalLinesBytesPerChan();
int32 getSampClkTimingResponseMode();
void setSampClkTimingResponseMode(int32 data);
void resetSampClkTimingResponseMode();
