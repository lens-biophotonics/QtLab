//THIS FILE IS AUTOGENERATED -- DO NOT EDIT
void NITask::addGlobalChansToTask(const char channelNames[]) {
	DAQmxErrChk(DAQmxAddGlobalChansToTask(task, channelNames));}
void NITask::startTask() {emit started();
	DAQmxErrChk(DAQmxStartTask(task));}
void NITask::stopTask() {emit stopped();
	DAQmxErrChk(DAQmxStopTask(task));}
void NITask::clearTask() {DAQmxErrChk(DAQmxClearTask(task));
	task = nullptr;}
void NITask::waitUntilTaskDone(float64 timeToWait) {
	DAQmxErrChk(DAQmxWaitUntilTaskDone(task, timeToWait));}
void NITask::waitForValidTimestamp(int32 timestampEvent, float64 timeout,
				CVIAbsoluteTime *timestamp) {
	DAQmxErrChk(DAQmxWaitForValidTimestamp(task, timestampEvent, timeout, timestamp));}
bool32 NITask::isTaskDone() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxIsTaskDone(task, &__temp__));
	return __temp__;

}
void NITask::taskControl(int32 action) {
	DAQmxErrChk(DAQmxTaskControl(task, action));}
void NITask::getNthTaskChannel(uInt32 index, char buffer[], int32 bufferSize) {
	DAQmxErrChk(DAQmxGetNthTaskChannel(task, index, buffer, bufferSize));}
void NITask::getNthTaskDevice(uInt32 index, char buffer[], int32 bufferSize) {
	DAQmxErrChk(DAQmxGetNthTaskDevice(task, index, buffer, bufferSize));}
void NITask::createAIVoltageChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      NITask::TerminalConfig terminalConfig, float64 minVal,
			      float64 maxVal, int32 units,
			      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName));}
void NITask::createAICurrentChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      NITask::TerminalConfig terminalConfig, float64 minVal,
			      float64 maxVal, int32 units,
			      int32 shuntResistorLoc,
			      float64 extShuntResistorVal,
			      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName));}
void NITask::createAIVoltageRMSChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 NITask::TerminalConfig terminalConfig, float64 minVal,
				 float64 maxVal, int32 units,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIVoltageRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName));}
void NITask::createAICurrentRMSChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 NITask::TerminalConfig terminalConfig, float64 minVal,
				 float64 maxVal, int32 units,
				 int32 shuntResistorLoc,
				 float64 extShuntResistorVal,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAICurrentRMSChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName));}
void NITask::createAIThrmcplChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      int32 thermocoupleType, int32 cjcSource,
			      float64 cjcVal, const char cjcChannel[]) {
	DAQmxErrChk(DAQmxCreateAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thermocoupleType, cjcSource, cjcVal, cjcChannel));}
void NITask::createAIRTDChan(const char physicalChannel[],
			  const char nameToAssignToChannel[], float64 minVal,
			  float64 maxVal, int32 units, int32 rtdType,
			  int32 resistanceConfig, int32 currentExcitSource,
			  float64 currentExcitVal, float64 r0) {
	DAQmxErrChk(DAQmxCreateAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, rtdType, resistanceConfig, currentExcitSource, currentExcitVal, r0));}
void NITask::createAIThrmstrChanIex(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 resistanceConfig,
				 int32 currentExcitSource,
				 float64 currentExcitVal, float64 a,
				 float64 b, float64 c) {
	DAQmxErrChk(DAQmxCreateAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, a, b, c));}
void NITask::createAIThrmstrChanVex(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 resistanceConfig,
				 int32 voltageExcitSource,
				 float64 voltageExcitVal, float64 a,
				 float64 b, float64 c, float64 r1) {
	DAQmxErrChk(DAQmxCreateAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, a, b, c, r1));}
void NITask::createAIFreqVoltageChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  float64 thresholdLevel, float64 hysteresis,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIFreqVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, thresholdLevel, hysteresis, customScaleName));}
void NITask::createAIResistanceChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 resistanceConfig,
				 int32 currentExcitSource,
				 float64 currentExcitVal,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createAIStrainGageChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 strainConfig, int32 voltageExcitSource,
				 float64 voltageExcitVal, float64 gageFactor,
				 float64 initialBridgeVoltage,
				 float64 nominalGageResistance,
				 float64 poissonRatio,
				 float64 leadWireResistance,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, initialBridgeVoltage, nominalGageResistance, poissonRatio, leadWireResistance, customScaleName));}
void NITask::createAIRosetteStrainGageChan(const char physicalChannel[],
					const char nameToAssignToChannel[],
					float64 minVal, float64 maxVal,
					int32 rosetteType,
					float64 gageOrientation,
					const int32 rosetteMeasTypes[],
					uInt32 numRosetteMeasTypes,
					int32 strainConfig,
					int32 voltageExcitSource,
					float64 voltageExcitVal,
					float64 gageFactor,
					float64 nominalGageResistance,
					float64 poissonRatio,
					float64 leadWireResistance) {
	DAQmxErrChk(DAQmxCreateAIRosetteStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, rosetteType, gageOrientation, rosetteMeasTypes, numRosetteMeasTypes, strainConfig, voltageExcitSource, voltageExcitVal, gageFactor, nominalGageResistance, poissonRatio, leadWireResistance));}
void NITask::createAIForceBridgeTwoPointLinChan(const char physicalChannel[],
					     const char nameToAssignToChannel[],
					     float64 minVal, float64 maxVal,
					     int32 units, int32 bridgeConfig,
					     int32 voltageExcitSource,
					     float64 voltageExcitVal,
					     float64 nominalBridgeResistance,
					     float64 firstElectricalVal,
					     float64 secondElectricalVal,
					     int32 electricalUnits,
					     float64 firstPhysicalVal,
					     float64 secondPhysicalVal,
					     int32 physicalUnits,
					     const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIForceBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName));}
void NITask::createAIForceBridgeTableChan(const char physicalChannel[],
				       const char nameToAssignToChannel[],
				       float64 minVal, float64 maxVal,
				       int32 units, int32 bridgeConfig,
				       int32 voltageExcitSource,
				       float64 voltageExcitVal,
				       float64 nominalBridgeResistance,
				       const float64 electricalVals[],
				       uInt32 numElectricalVals,
				       int32 electricalUnits,
				       const float64 physicalVals[],
				       uInt32 numPhysicalVals,
				       int32 physicalUnits,
				       const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIForceBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName));}
void NITask::createAIForceBridgePolynomialChan(const char physicalChannel[],
					    const char nameToAssignToChannel[],
					    float64 minVal, float64 maxVal,
					    int32 units, int32 bridgeConfig,
					    int32 voltageExcitSource,
					    float64 voltageExcitVal,
					    float64 nominalBridgeResistance,
					    const float64 forwardCoeffs[],
					    uInt32 numForwardCoeffs,
					    const float64 reverseCoeffs[],
					    uInt32 numReverseCoeffs,
					    int32 electricalUnits,
					    int32 physicalUnits,
					    const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIForceBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName));}
void NITask::createAIPressureBridgeTwoPointLinChan(const char physicalChannel[],
						const char nameToAssignToChannel[],
						float64 minVal,
						float64 maxVal, int32 units,
						int32 bridgeConfig,
						int32 voltageExcitSource,
						float64 voltageExcitVal,
						float64 nominalBridgeResistance,
						float64 firstElectricalVal,
						float64 secondElectricalVal,
						int32 electricalUnits,
						float64 firstPhysicalVal,
						float64 secondPhysicalVal,
						int32 physicalUnits,
						const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIPressureBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName));}
void NITask::createAIPressureBridgeTableChan(const char physicalChannel[],
					  const char nameToAssignToChannel[],
					  float64 minVal, float64 maxVal,
					  int32 units, int32 bridgeConfig,
					  int32 voltageExcitSource,
					  float64 voltageExcitVal,
					  float64 nominalBridgeResistance,
					  const float64 electricalVals[],
					  uInt32 numElectricalVals,
					  int32 electricalUnits,
					  const float64 physicalVals[],
					  uInt32 numPhysicalVals,
					  int32 physicalUnits,
					  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIPressureBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName));}
void NITask::createAIPressureBridgePolynomialChan(const char physicalChannel[],
					       const char nameToAssignToChannel[],
					       float64 minVal, float64 maxVal,
					       int32 units,
					       int32 bridgeConfig,
					       int32 voltageExcitSource,
					       float64 voltageExcitVal,
					       float64 nominalBridgeResistance,
					       const float64 forwardCoeffs[],
					       uInt32 numForwardCoeffs,
					       const float64 reverseCoeffs[],
					       uInt32 numReverseCoeffs,
					       int32 electricalUnits,
					       int32 physicalUnits,
					       const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIPressureBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName));}
void NITask::createAITorqueBridgeTwoPointLinChan(const char physicalChannel[],
					      const char nameToAssignToChannel[],
					      float64 minVal, float64 maxVal,
					      int32 units, int32 bridgeConfig,
					      int32 voltageExcitSource,
					      float64 voltageExcitVal,
					      float64 nominalBridgeResistance,
					      float64 firstElectricalVal,
					      float64 secondElectricalVal,
					      int32 electricalUnits,
					      float64 firstPhysicalVal,
					      float64 secondPhysicalVal,
					      int32 physicalUnits,
					      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAITorqueBridgeTwoPointLinChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, firstElectricalVal, secondElectricalVal, electricalUnits, firstPhysicalVal, secondPhysicalVal, physicalUnits, customScaleName));}
void NITask::createAITorqueBridgeTableChan(const char physicalChannel[],
					const char nameToAssignToChannel[],
					float64 minVal, float64 maxVal,
					int32 units, int32 bridgeConfig,
					int32 voltageExcitSource,
					float64 voltageExcitVal,
					float64 nominalBridgeResistance,
					const float64 electricalVals[],
					uInt32 numElectricalVals,
					int32 electricalUnits,
					const float64 physicalVals[],
					uInt32 numPhysicalVals,
					int32 physicalUnits,
					const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAITorqueBridgeTableChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, electricalVals, numElectricalVals, electricalUnits, physicalVals, numPhysicalVals, physicalUnits, customScaleName));}
void NITask::createAITorqueBridgePolynomialChan(const char physicalChannel[],
					     const char nameToAssignToChannel[],
					     float64 minVal, float64 maxVal,
					     int32 units, int32 bridgeConfig,
					     int32 voltageExcitSource,
					     float64 voltageExcitVal,
					     float64 nominalBridgeResistance,
					     const float64 forwardCoeffs[],
					     uInt32 numForwardCoeffs,
					     const float64 reverseCoeffs[],
					     uInt32 numReverseCoeffs,
					     int32 electricalUnits,
					     int32 physicalUnits,
					     const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAITorqueBridgePolynomialChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, forwardCoeffs, numForwardCoeffs, reverseCoeffs, numReverseCoeffs, electricalUnits, physicalUnits, customScaleName));}
void NITask::createAIBridgeChan(const char physicalChannel[],
			     const char nameToAssignToChannel[],
			     float64 minVal, float64 maxVal, int32 units,
			     int32 bridgeConfig, int32 voltageExcitSource,
			     float64 voltageExcitVal,
			     float64 nominalBridgeResistance,
			     const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, nominalBridgeResistance, customScaleName));}
void NITask::createAIVoltageChanWithExcit(const char physicalChannel[],
				       const char nameToAssignToChannel[],
				       NITask::TerminalConfig terminalConfig, float64 minVal,
				       float64 maxVal, int32 units,
				       int32 bridgeConfig,
				       int32 voltageExcitSource,
				       float64 voltageExcitVal,
				       bool32 useExcitForScaling,
				       const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, bridgeConfig, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName));}
void NITask::createAITempBuiltInSensorChan(const char physicalChannel[],
					const char nameToAssignToChannel[],
					int32 units) {
	DAQmxErrChk(DAQmxCreateAITempBuiltInSensorChan(task, physicalChannel, nameToAssignToChannel, units));}
void NITask::createAIAccelChan(const char physicalChannel[],
			    const char nameToAssignToChannel[],
			    NITask::TerminalConfig terminalConfig, float64 minVal,
			    float64 maxVal, int32 units, float64 sensitivity,
			    int32 sensitivityUnits, int32 currentExcitSource,
			    float64 currentExcitVal,
			    const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createAIVelocityIEPEChan(const char physicalChannel[],
				   const char nameToAssignToChannel[],
				   NITask::TerminalConfig terminalConfig, float64 minVal,
				   float64 maxVal, int32 units,
				   float64 sensitivity,
				   int32 sensitivityUnits,
				   int32 currentExcitSource,
				   float64 currentExcitVal,
				   const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIVelocityIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createAIForceIEPEChan(const char physicalChannel[],
				const char nameToAssignToChannel[],
				NITask::TerminalConfig terminalConfig, float64 minVal,
				float64 maxVal, int32 units,
				float64 sensitivity, int32 sensitivityUnits,
				int32 currentExcitSource,
				float64 currentExcitVal,
				const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createAIMicrophoneChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 NITask::TerminalConfig terminalConfig, int32 units,
				 float64 micSensitivity,
				 float64 maxSndPressLevel,
				 int32 currentExcitSource,
				 float64 currentExcitVal,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, micSensitivity, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createAIChargeChan(const char physicalChannel[],
			     const char nameToAssignToChannel[],
			     NITask::TerminalConfig terminalConfig, float64 minVal,
			     float64 maxVal, int32 units,
			     const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName));}
void NITask::createAIAccelChargeChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  NITask::TerminalConfig terminalConfig, float64 minVal,
				  float64 maxVal, int32 units,
				  float64 sensitivity, int32 sensitivityUnits,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIAccelChargeChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName));}
void NITask::createAIAccel4WireDCVoltageChan(const char physicalChannel[],
					  const char nameToAssignToChannel[],
					  NITask::TerminalConfig terminalConfig,
					  float64 minVal, float64 maxVal,
					  int32 units, float64 sensitivity,
					  int32 sensitivityUnits,
					  int32 voltageExcitSource,
					  float64 voltageExcitVal,
					  bool32 useExcitForScaling,
					  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIAccel4WireDCVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, useExcitForScaling, customScaleName));}
void NITask::createAIPosLVDTChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      float64 sensitivity, int32 sensitivityUnits,
			      int32 voltageExcitSource,
			      float64 voltageExcitVal,
			      float64 voltageExcitFreq, int32 ACExcitWireMode,
			      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName));}
void NITask::createAIPosRVDTChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      float64 sensitivity, int32 sensitivityUnits,
			      int32 voltageExcitSource,
			      float64 voltageExcitVal,
			      float64 voltageExcitFreq, int32 ACExcitWireMode,
			      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName));}
void NITask::createAIPosEddyCurrProxProbeChan(const char physicalChannel[],
					   const char nameToAssignToChannel[],
					   float64 minVal, float64 maxVal,
					   int32 units, float64 sensitivity,
					   int32 sensitivityUnits,
					   const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAIPosEddyCurrProxProbeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, sensitivity, sensitivityUnits, customScaleName));}
void NITask::createAIDeviceTempChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 int32 units) {
	DAQmxErrChk(DAQmxCreateAIDeviceTempChan(task, physicalChannel, nameToAssignToChannel, units));}
void NITask::createTEDSAIVoltageChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  NITask::TerminalConfig terminalConfig, float64 minVal,
				  float64 maxVal, int32 units,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIVoltageChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, customScaleName));}
void NITask::createTEDSAICurrentChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  NITask::TerminalConfig terminalConfig, float64 minVal,
				  float64 maxVal, int32 units,
				  int32 shuntResistorLoc,
				  float64 extShuntResistorVal,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAICurrentChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, shuntResistorLoc, extShuntResistorVal, customScaleName));}
void NITask::createTEDSAIThrmcplChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  int32 cjcSource, float64 cjcVal,
				  const char cjcChannel[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIThrmcplChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, cjcSource, cjcVal, cjcChannel));}
void NITask::createTEDSAIRTDChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      int32 resistanceConfig,
			      int32 currentExcitSource,
			      float64 currentExcitVal) {
	DAQmxErrChk(DAQmxCreateTEDSAIRTDChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal));}
void NITask::createTEDSAIThrmstrChanIex(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 resistanceConfig,
				     int32 currentExcitSource,
				     float64 currentExcitVal) {
	DAQmxErrChk(DAQmxCreateTEDSAIThrmstrChanIex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal));}
void NITask::createTEDSAIThrmstrChanVex(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 resistanceConfig,
				     int32 voltageExcitSource,
				     float64 voltageExcitVal, float64 r1) {
	DAQmxErrChk(DAQmxCreateTEDSAIThrmstrChanVex(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, voltageExcitSource, voltageExcitVal, r1));}
void NITask::createTEDSAIResistanceChan(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 resistanceConfig,
				     int32 currentExcitSource,
				     float64 currentExcitVal,
				     const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIResistanceChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, resistanceConfig, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createTEDSAIStrainGageChan(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     float64 minVal, float64 maxVal,
				     int32 units, int32 voltageExcitSource,
				     float64 voltageExcitVal,
				     float64 initialBridgeVoltage,
				     float64 leadWireResistance,
				     const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIStrainGageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, initialBridgeVoltage, leadWireResistance, customScaleName));}
void NITask::createTEDSAIForceBridgeChan(const char physicalChannel[],
				      const char nameToAssignToChannel[],
				      float64 minVal, float64 maxVal,
				      int32 units, int32 voltageExcitSource,
				      float64 voltageExcitVal,
				      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIForceBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName));}
void NITask::createTEDSAIPressureBridgeChan(const char physicalChannel[],
					 const char nameToAssignToChannel[],
					 float64 minVal, float64 maxVal,
					 int32 units,
					 int32 voltageExcitSource,
					 float64 voltageExcitVal,
					 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIPressureBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName));}
void NITask::createTEDSAITorqueBridgeChan(const char physicalChannel[],
				       const char nameToAssignToChannel[],
				       float64 minVal, float64 maxVal,
				       int32 units, int32 voltageExcitSource,
				       float64 voltageExcitVal,
				       const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAITorqueBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName));}
void NITask::createTEDSAIBridgeChan(const char physicalChannel[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 voltageExcitSource,
				 float64 voltageExcitVal,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIBridgeChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName));}
void NITask::createTEDSAIVoltageChanWithExcit(const char physicalChannel[],
					   const char nameToAssignToChannel[],
					   NITask::TerminalConfig terminalConfig,
					   float64 minVal, float64 maxVal,
					   int32 units,
					   int32 voltageExcitSource,
					   float64 voltageExcitVal,
					   const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIVoltageChanWithExcit(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, customScaleName));}
void NITask::createTEDSAIAccelChan(const char physicalChannel[],
				const char nameToAssignToChannel[],
				NITask::TerminalConfig terminalConfig, float64 minVal,
				float64 maxVal, int32 units,
				int32 currentExcitSource,
				float64 currentExcitVal,
				const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIAccelChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createTEDSAIForceIEPEChan(const char physicalChannel[],
				    const char nameToAssignToChannel[],
				    NITask::TerminalConfig terminalConfig, float64 minVal,
				    float64 maxVal, int32 units,
				    int32 currentExcitSource,
				    float64 currentExcitVal,
				    const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIForceIEPEChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, minVal, maxVal, units, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createTEDSAIMicrophoneChan(const char physicalChannel[],
				     const char nameToAssignToChannel[],
				     NITask::TerminalConfig terminalConfig, int32 units,
				     float64 maxSndPressLevel,
				     int32 currentExcitSource,
				     float64 currentExcitVal,
				     const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIMicrophoneChan(task, physicalChannel, nameToAssignToChannel, terminalConfig, units, maxSndPressLevel, currentExcitSource, currentExcitVal, customScaleName));}
void NITask::createTEDSAIPosLVDTChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  int32 voltageExcitSource,
				  float64 voltageExcitVal,
				  float64 voltageExcitFreq,
				  int32 ACExcitWireMode,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIPosLVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName));}
void NITask::createTEDSAIPosRVDTChan(const char physicalChannel[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal, int32 units,
				  int32 voltageExcitSource,
				  float64 voltageExcitVal,
				  float64 voltageExcitFreq,
				  int32 ACExcitWireMode,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateTEDSAIPosRVDTChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, voltageExcitSource, voltageExcitVal, voltageExcitFreq, ACExcitWireMode, customScaleName));}
void NITask::createAOVoltageChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAOVoltageChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName));}
void NITask::createAOCurrentChan(const char physicalChannel[],
			      const char nameToAssignToChannel[],
			      float64 minVal, float64 maxVal, int32 units,
			      const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateAOCurrentChan(task, physicalChannel, nameToAssignToChannel, minVal, maxVal, units, customScaleName));}
void NITask::createAOFuncGenChan(const char physicalChannel[],
			      const char nameToAssignToChannel[], int32 type,
			      float64 freq, float64 amplitude, float64 offset) {
	DAQmxErrChk(DAQmxCreateAOFuncGenChan(task, physicalChannel, nameToAssignToChannel, type, freq, amplitude, offset));}
void NITask::createDIChan(const char lines[], const char nameToAssignToLines[],
		       NITask::LineGrouping lineGrouping) {
	DAQmxErrChk(DAQmxCreateDIChan(task, lines, nameToAssignToLines, lineGrouping));}
void NITask::createDOChan(const char lines[], const char nameToAssignToLines[],
		       NITask::LineGrouping lineGrouping) {
	DAQmxErrChk(DAQmxCreateDOChan(task, lines, nameToAssignToLines, lineGrouping));}
void NITask::createCIFreqChan(const char counter[],
			   const char nameToAssignToChannel[], float64 minVal,
			   float64 maxVal, int32 units, NITask::Edge edge,
			   int32 measMethod, float64 measTime, uInt32 divisor,
			   const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCIFreqChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName));}
void NITask::createCIPeriodChan(const char counter[],
			     const char nameToAssignToChannel[],
			     float64 minVal, float64 maxVal, int32 units,
			     NITask::Edge edge, int32 measMethod, float64 measTime,
			     uInt32 divisor, const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCIPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, edge, measMethod, measTime, divisor, customScaleName));}
void NITask::createCICountEdgesChan(const char counter[],
				 const char nameToAssignToChannel[],
				 NITask::Edge edge, uInt32 initialCount,
				 int32 countDirection) {
	DAQmxErrChk(DAQmxCreateCICountEdgesChan(task, counter, nameToAssignToChannel, edge, initialCount, countDirection));}
void NITask::createCIDutyCycleChan(const char counter[],
				const char nameToAssignToChannel[],
				float64 minFreq, float64 maxFreq, NITask::Edge edge,
				const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCIDutyCycleChan(task, counter, nameToAssignToChannel, minFreq, maxFreq, edge, customScaleName));}
void NITask::createCIPulseWidthChan(const char counter[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 startingEdge,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCIPulseWidthChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, startingEdge, customScaleName));}
void NITask::createCISemiPeriodChan(const char counter[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCISemiPeriodChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, customScaleName));}
void NITask::createCITwoEdgeSepChan(const char counter[],
				 const char nameToAssignToChannel[],
				 float64 minVal, float64 maxVal, int32 units,
				 int32 firstEdge, int32 secondEdge,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCITwoEdgeSepChan(task, counter, nameToAssignToChannel, minVal, maxVal, units, firstEdge, secondEdge, customScaleName));}
void NITask::createCIPulseChanFreq(const char counter[],
				const char nameToAssignToChannel[],
				float64 minVal, float64 maxVal, int32 units) {
	DAQmxErrChk(DAQmxCreateCIPulseChanFreq(task, counter, nameToAssignToChannel, minVal, maxVal, units));}
void NITask::createCIPulseChanTime(const char counter[],
				const char nameToAssignToChannel[],
				float64 minVal, float64 maxVal, int32 units) {
	DAQmxErrChk(DAQmxCreateCIPulseChanTime(task, counter, nameToAssignToChannel, minVal, maxVal, units));}
void NITask::createCIPulseChanTicks(const char counter[],
				 const char nameToAssignToChannel[],
				 const char sourceTerminal[], float64 minVal,
				 float64 maxVal) {
	DAQmxErrChk(DAQmxCreateCIPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, minVal, maxVal));}
void NITask::createCILinEncoderChan(const char counter[],
				 const char nameToAssignToChannel[],
				 int32 decodingType, bool32 ZidxEnable,
				 float64 ZidxVal, int32 ZidxPhase,
				 int32 units, float64 distPerPulse,
				 float64 initialPos,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCILinEncoderChan(task, counter, nameToAssignToChannel, decodingType, ZidxEnable, ZidxVal, ZidxPhase, units, distPerPulse, initialPos, customScaleName));}
void NITask::createCIAngEncoderChan(const char counter[],
				 const char nameToAssignToChannel[],
				 int32 decodingType, bool32 ZidxEnable,
				 float64 ZidxVal, int32 ZidxPhase,
				 int32 units, uInt32 pulsesPerRev,
				 float64 initialAngle,
				 const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCIAngEncoderChan(task, counter, nameToAssignToChannel, decodingType, ZidxEnable, ZidxVal, ZidxPhase, units, pulsesPerRev, initialAngle, customScaleName));}
void NITask::createCILinVelocityChan(const char counter[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal,
				  int32 decodingType, int32 units,
				  float64 distPerPulse,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCILinVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, distPerPulse, customScaleName));}
void NITask::createCIAngVelocityChan(const char counter[],
				  const char nameToAssignToChannel[],
				  float64 minVal, float64 maxVal,
				  int32 decodingType, int32 units,
				  uInt32 pulsesPerRev,
				  const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCIAngVelocityChan(task, counter, nameToAssignToChannel, minVal, maxVal, decodingType, units, pulsesPerRev, customScaleName));}
void NITask::createCIGPSTimestampChan(const char counter[],
				   const char nameToAssignToChannel[],
				   int32 units, int32 syncMethod,
				   const char customScaleName[]) {
	DAQmxErrChk(DAQmxCreateCIGPSTimestampChan(task, counter, nameToAssignToChannel, units, syncMethod, customScaleName));}
void NITask::createCOPulseChanFreq(const char counter[],
				const char nameToAssignToChannel[],
				int32 units, NITask::IdleState idleState,
				float64 initialDelay, float64 freq,
				float64 dutyCycle) {
	DAQmxErrChk(DAQmxCreateCOPulseChanFreq(task, counter, nameToAssignToChannel, units, idleState, initialDelay, freq, dutyCycle));}
void NITask::createCOPulseChanTime(const char counter[],
				const char nameToAssignToChannel[],
				int32 units, NITask::IdleState idleState,
				float64 initialDelay, float64 lowTime,
				float64 highTime) {
	DAQmxErrChk(DAQmxCreateCOPulseChanTime(task, counter, nameToAssignToChannel, units, idleState, initialDelay, lowTime, highTime));}
void NITask::createCOPulseChanTicks(const char counter[],
				 const char nameToAssignToChannel[],
				 const char sourceTerminal[], NITask::IdleState idleState,
				 int32 initialDelay, int32 lowTicks,
				 int32 highTicks) {
	DAQmxErrChk(DAQmxCreateCOPulseChanTicks(task, counter, nameToAssignToChannel, sourceTerminal, idleState, initialDelay, lowTicks, highTicks));}
void NITask::getAIChanCalCalDate(const char channelName[], uInt32 *year,
			      uInt32 *month, uInt32 *day, uInt32 *hour,
			      uInt32 *minute) {
	DAQmxErrChk(DAQmxGetAIChanCalCalDate(task, channelName, year, month, day, hour, minute));}
void NITask::setAIChanCalCalDate(const char channelName[], uInt32 year,
			      uInt32 month, uInt32 day, uInt32 hour,
			      uInt32 minute) {
	DAQmxErrChk(DAQmxSetAIChanCalCalDate(task, channelName, year, month, day, hour, minute));}
void NITask::getAIChanCalExpDate(const char channelName[], uInt32 *year,
			      uInt32 *month, uInt32 *day, uInt32 *hour,
			      uInt32 *minute) {
	DAQmxErrChk(DAQmxGetAIChanCalExpDate(task, channelName, year, month, day, hour, minute));}
void NITask::setAIChanCalExpDate(const char channelName[], uInt32 year,
			      uInt32 month, uInt32 day, uInt32 hour,
			      uInt32 minute) {
	DAQmxErrChk(DAQmxSetAIChanCalExpDate(task, channelName, year, month, day, hour, minute));}
void NITask::resetChanAttribute(const char channel[], int32 attribute) {
	DAQmxErrChk(DAQmxResetChanAttribute(task, channel, attribute));}
void NITask::cfgSampClkTiming(const char source[], float64 rate,
			   NITask::Edge activeEdge, NITask::SampleMode sampleMode,
			   uInt64 sampsPerChan) {
	DAQmxErrChk(DAQmxCfgSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan));}
void NITask::cfgHandshakingTiming(NITask::SampleMode sampleMode, uInt64 sampsPerChan) {
	DAQmxErrChk(DAQmxCfgHandshakingTiming(task, sampleMode, sampsPerChan));}
void NITask::cfgBurstHandshakingTimingImportClock(NITask::SampleMode sampleMode,
					       uInt64 sampsPerChan,
					       float64 sampleClkRate,
					       const char sampleClkSrc[],
					       int32 sampleClkActiveEdge,
					       int32 pauseWhen,
					       int32 readyEventActiveLevel) {
	DAQmxErrChk(DAQmxCfgBurstHandshakingTimingImportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkSrc, sampleClkActiveEdge, pauseWhen, readyEventActiveLevel));}
void NITask::cfgBurstHandshakingTimingExportClock(NITask::SampleMode sampleMode,
					       uInt64 sampsPerChan,
					       float64 sampleClkRate,
					       const char sampleClkOutpTerm[],
					       int32 sampleClkPulsePolarity,
					       int32 pauseWhen,
					       int32 readyEventActiveLevel) {
	DAQmxErrChk(DAQmxCfgBurstHandshakingTimingExportClock(task, sampleMode, sampsPerChan, sampleClkRate, sampleClkOutpTerm, sampleClkPulsePolarity, pauseWhen, readyEventActiveLevel));}
void NITask::cfgChangeDetectionTiming(const char risingEdgeChan[],
				   const char fallingEdgeChan[],
				   NITask::SampleMode sampleMode, uInt64 sampsPerChan) {
	DAQmxErrChk(DAQmxCfgChangeDetectionTiming(task, risingEdgeChan, fallingEdgeChan, sampleMode, sampsPerChan));}
void NITask::cfgImplicitTiming(NITask::SampleMode sampleMode, uInt64 sampsPerChan) {
	DAQmxErrChk(DAQmxCfgImplicitTiming(task, sampleMode, sampsPerChan));}
void NITask::cfgPipelinedSampClkTiming(const char source[], float64 rate,
				    NITask::Edge activeEdge, NITask::SampleMode sampleMode,
				    uInt64 sampsPerChan) {
	DAQmxErrChk(DAQmxCfgPipelinedSampClkTiming(task, source, rate, activeEdge, sampleMode, sampsPerChan));}
void NITask::resetTimingAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetTimingAttribute(task, attribute));}
void NITask::resetTimingAttributeEx(const char deviceNames[], int32 attribute) {
	DAQmxErrChk(DAQmxResetTimingAttributeEx(task, deviceNames, attribute));}
void NITask::disableStartTrig() {
	DAQmxErrChk(DAQmxDisableStartTrig(task));}
void NITask::cfgDigEdgeStartTrig(const char triggerSource[], NITask::Edge triggerEdge) {
	DAQmxErrChk(DAQmxCfgDigEdgeStartTrig(task, triggerSource, triggerEdge));}
void NITask::cfgAnlgEdgeStartTrig(const char triggerSource[], int32 triggerSlope,
			       float64 triggerLevel) {
	DAQmxErrChk(DAQmxCfgAnlgEdgeStartTrig(task, triggerSource, triggerSlope, triggerLevel));}
void NITask::cfgAnlgMultiEdgeStartTrig(const char triggerSources[],
				    int32 triggerSlopeArray[],
				    float64 triggerLevelArray[],
				    uInt32 arraySize) {
	DAQmxErrChk(DAQmxCfgAnlgMultiEdgeStartTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, arraySize));}
void NITask::cfgAnlgWindowStartTrig(const char triggerSource[],
				 int32 triggerWhen, float64 windowTop,
				 float64 windowBottom) {
	DAQmxErrChk(DAQmxCfgAnlgWindowStartTrig(task, triggerSource, triggerWhen, windowTop, windowBottom));}
void NITask::cfgTimeStartTrig(CVIAbsoluteTime when, int32 timescale) {
	DAQmxErrChk(DAQmxCfgTimeStartTrig(task, when, timescale));}
void NITask::cfgDigPatternStartTrig(const char triggerSource[],
				 const char triggerPattern[],
				 int32 triggerWhen) {
	DAQmxErrChk(DAQmxCfgDigPatternStartTrig(task, triggerSource, triggerPattern, triggerWhen));}
void NITask::disableRefTrig() {
	DAQmxErrChk(DAQmxDisableRefTrig(task));}
void NITask::cfgDigEdgeRefTrig(const char triggerSource[], NITask::Edge triggerEdge,
			    uInt32 pretriggerSamples) {
	DAQmxErrChk(DAQmxCfgDigEdgeRefTrig(task, triggerSource, triggerEdge, pretriggerSamples));}
void NITask::cfgAnlgEdgeRefTrig(const char triggerSource[], int32 triggerSlope,
			     float64 triggerLevel, uInt32 pretriggerSamples) {
	DAQmxErrChk(DAQmxCfgAnlgEdgeRefTrig(task, triggerSource, triggerSlope, triggerLevel, pretriggerSamples));}
void NITask::cfgAnlgMultiEdgeRefTrig(const char triggerSources[],
				  int32 triggerSlopeArray[],
				  float64 triggerLevelArray[],
				  uInt32 pretriggerSamples, uInt32 arraySize) {
	DAQmxErrChk(DAQmxCfgAnlgMultiEdgeRefTrig(task, triggerSources, triggerSlopeArray, triggerLevelArray, pretriggerSamples, arraySize));}
void NITask::cfgAnlgWindowRefTrig(const char triggerSource[], int32 triggerWhen,
			       float64 windowTop, float64 windowBottom,
			       uInt32 pretriggerSamples) {
	DAQmxErrChk(DAQmxCfgAnlgWindowRefTrig(task, triggerSource, triggerWhen, windowTop, windowBottom, pretriggerSamples));}
void NITask::cfgDigPatternRefTrig(const char triggerSource[],
			       const char triggerPattern[], int32 triggerWhen,
			       uInt32 pretriggerSamples) {
	DAQmxErrChk(DAQmxCfgDigPatternRefTrig(task, triggerSource, triggerPattern, triggerWhen, pretriggerSamples));}
void NITask::resetTrigAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetTrigAttribute(task, attribute));}
void NITask::readAnalogF64(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, float64 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadAnalogF64(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readAnalogScalarF64(float64 timeout, float64 *value) {
	DAQmxErrChk(DAQmxReadAnalogScalarF64(task, timeout, value, nullptr));}
void NITask::readBinaryI16(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, int16 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadBinaryI16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readBinaryU16(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, uInt16 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadBinaryU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readBinaryI32(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, int32 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadBinaryI32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readBinaryU32(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, uInt32 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadBinaryU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readDigitalU8(int32 numSampsPerChan, float64 timeout,
			bool32 fillMode, uInt8 readArray[],
			uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadDigitalU8(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readDigitalU16(int32 numSampsPerChan, float64 timeout,
			 bool32 fillMode, uInt16 readArray[],
			 uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadDigitalU16(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readDigitalU32(int32 numSampsPerChan, float64 timeout,
			 bool32 fillMode, uInt32 readArray[],
			 uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadDigitalU32(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readDigitalScalarU32(float64 timeout, uInt32 *value) {
	DAQmxErrChk(DAQmxReadDigitalScalarU32(task, timeout, value, nullptr));}
void NITask::readDigitalLines(int32 numSampsPerChan, float64 timeout,
			   bool32 fillMode, uInt8 readArray[],
			   uInt32 arraySizeInBytes, int32 *sampsPerChanRead,
			   int32 *numBytesPerSamp) {
	DAQmxErrChk(DAQmxReadDigitalLines(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInBytes, sampsPerChanRead, numBytesPerSamp, nullptr));}
void NITask::readCounterF64(int32 numSampsPerChan, float64 timeout,
			 float64 readArray[], uInt32 arraySizeInSamps,
			 int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadCounterF64(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readCounterU32(int32 numSampsPerChan, float64 timeout,
			 uInt32 readArray[], uInt32 arraySizeInSamps,
			 int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadCounterU32(task, numSampsPerChan, timeout, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readCounterF64Ex(int32 numSampsPerChan, float64 timeout,
			   bool32 fillMode, float64 readArray[],
			   uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadCounterF64Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readCounterU32Ex(int32 numSampsPerChan, float64 timeout,
			   bool32 fillMode, uInt32 readArray[],
			   uInt32 arraySizeInSamps, int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadCounterU32Ex(task, numSampsPerChan, timeout, fillMode, readArray, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readCounterScalarF64(float64 timeout, float64 *value) {
	DAQmxErrChk(DAQmxReadCounterScalarF64(task, timeout, value, nullptr));}
void NITask::readCounterScalarU32(float64 timeout, uInt32 *value) {
	DAQmxErrChk(DAQmxReadCounterScalarU32(task, timeout, value, nullptr));}
void NITask::readCtrFreq(int32 numSampsPerChan, float64 timeout,
		      bool32 interleaved, float64 readArrayFrequency[],
		      float64 readArrayDutyCycle[], uInt32 arraySizeInSamps,
		      int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadCtrFreq(task, numSampsPerChan, timeout, interleaved, readArrayFrequency, readArrayDutyCycle, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readCtrTime(int32 numSampsPerChan, float64 timeout,
		      bool32 interleaved, float64 readArrayHighTime[],
		      float64 readArrayLowTime[], uInt32 arraySizeInSamps,
		      int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadCtrTime(task, numSampsPerChan, timeout, interleaved, readArrayHighTime, readArrayLowTime, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readCtrTicks(int32 numSampsPerChan, float64 timeout,
		       bool32 interleaved, uInt32 readArrayHighTicks[],
		       uInt32 readArrayLowTicks[], uInt32 arraySizeInSamps,
		       int32 *sampsPerChanRead) {
	DAQmxErrChk(DAQmxReadCtrTicks(task, numSampsPerChan, timeout, interleaved, readArrayHighTicks, readArrayLowTicks, arraySizeInSamps, sampsPerChanRead, nullptr));}
void NITask::readCtrFreqScalar(float64 timeout, float64 *frequency,
			    float64 *dutyCycle) {
	DAQmxErrChk(DAQmxReadCtrFreqScalar(task, timeout, frequency, dutyCycle, nullptr));}
void NITask::readCtrTimeScalar(float64 timeout, float64 *highTime,
			    float64 *lowTime) {
	DAQmxErrChk(DAQmxReadCtrTimeScalar(task, timeout, highTime, lowTime, nullptr));}
void NITask::readCtrTicksScalar(float64 timeout, uInt32 *highTicks,
			     uInt32 *lowTicks) {
	DAQmxErrChk(DAQmxReadCtrTicksScalar(task, timeout, highTicks, lowTicks, nullptr));}
void NITask::readRaw(int32 numSampsPerChan, float64 timeout, void *readArray,
		  uInt32 arraySizeInBytes, int32 *sampsRead,
		  int32 *numBytesPerSamp) {
	DAQmxErrChk(DAQmxReadRaw(task, numSampsPerChan, timeout, readArray, arraySizeInBytes, sampsRead, numBytesPerSamp, nullptr));}
void NITask::getNthTaskReadChannel(uInt32 index, char buffer[], int32 bufferSize) {
	DAQmxErrChk(DAQmxGetNthTaskReadChannel(task, index, buffer, bufferSize));}
void NITask::resetReadAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetReadAttribute(task, attribute));}
void NITask::configureLogging(const char filePath[], int32 loggingMode,
			   const char groupName[], int32 operation) {
	DAQmxErrChk(DAQmxConfigureLogging(task, filePath, loggingMode, groupName, operation));}
void NITask::startNewFile(const char filePath[]) {
	DAQmxErrChk(DAQmxStartNewFile(task, filePath));}
void NITask::writeAnalogF64(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const float64 writeArray[],
			 int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteAnalogF64(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeAnalogScalarF64(bool32 autoStart, float64 timeout,
			       float64 value) {
	DAQmxErrChk(DAQmxWriteAnalogScalarF64(task, autoStart, timeout, value, nullptr));}
void NITask::writeBinaryI16(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const int16 writeArray[], int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteBinaryI16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeBinaryU16(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const uInt16 writeArray[],
			 int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteBinaryU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeBinaryI32(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const int32 writeArray[], int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteBinaryI32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeBinaryU32(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const uInt32 writeArray[],
			 int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteBinaryU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeDigitalU8(int32 numSampsPerChan, bool32 autoStart,
			 float64 timeout, NITask::DataLayout dataLayout,
			 const uInt8 writeArray[], int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteDigitalU8(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeDigitalU16(int32 numSampsPerChan, bool32 autoStart,
			  float64 timeout, NITask::DataLayout dataLayout,
			  const uInt16 writeArray[],
			  int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteDigitalU16(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeDigitalU32(int32 numSampsPerChan, bool32 autoStart,
			  float64 timeout, NITask::DataLayout dataLayout,
			  const uInt32 writeArray[],
			  int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteDigitalU32(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeDigitalScalarU32(bool32 autoStart, float64 timeout,
				uInt32 value) {
	DAQmxErrChk(DAQmxWriteDigitalScalarU32(task, autoStart, timeout, value, nullptr));}
void NITask::writeDigitalLines(int32 numSampsPerChan, bool32 autoStart,
			    float64 timeout, NITask::DataLayout dataLayout,
			    const uInt8 writeArray[],
			    int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteDigitalLines(task, numSampsPerChan, autoStart, timeout, dataLayout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::writeCtrFreq(int32 numSampsPerChan, bool32 autoStart,
		       float64 timeout, NITask::DataLayout dataLayout,
		       const float64 frequency[], const float64 dutyCycle[],
		       int32 *numSampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteCtrFreq(task, numSampsPerChan, autoStart, timeout, dataLayout, frequency, dutyCycle, numSampsPerChanWritten, nullptr));}
void NITask::writeCtrFreqScalar(bool32 autoStart, float64 timeout,
			     float64 frequency, float64 dutyCycle) {
	DAQmxErrChk(DAQmxWriteCtrFreqScalar(task, autoStart, timeout, frequency, dutyCycle, nullptr));}
void NITask::writeCtrTime(int32 numSampsPerChan, bool32 autoStart,
		       float64 timeout, NITask::DataLayout dataLayout,
		       const float64 highTime[], const float64 lowTime[],
		       int32 *numSampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteCtrTime(task, numSampsPerChan, autoStart, timeout, dataLayout, highTime, lowTime, numSampsPerChanWritten, nullptr));}
void NITask::writeCtrTimeScalar(bool32 autoStart, float64 timeout,
			     float64 highTime, float64 lowTime) {
	DAQmxErrChk(DAQmxWriteCtrTimeScalar(task, autoStart, timeout, highTime, lowTime, nullptr));}
void NITask::writeCtrTicks(int32 numSampsPerChan, bool32 autoStart,
			float64 timeout, NITask::DataLayout dataLayout,
			const uInt32 highTicks[], const uInt32 lowTicks[],
			int32 *numSampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteCtrTicks(task, numSampsPerChan, autoStart, timeout, dataLayout, highTicks, lowTicks, numSampsPerChanWritten, nullptr));}
void NITask::writeCtrTicksScalar(bool32 autoStart, float64 timeout,
			      uInt32 highTicks, uInt32 lowTicks) {
	DAQmxErrChk(DAQmxWriteCtrTicksScalar(task, autoStart, timeout, highTicks, lowTicks, nullptr));}
void NITask::writeRaw(int32 numSamps, bool32 autoStart, float64 timeout,
		   const void *writeArray, int32 *sampsPerChanWritten) {
	DAQmxErrChk(DAQmxWriteRaw(task, numSamps, autoStart, timeout, writeArray, sampsPerChanWritten, nullptr));}
void NITask::resetWriteAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetWriteAttribute(task, attribute));}
void NITask::exportSignal(int32 signalID, const char outputTerminal[]) {
	DAQmxErrChk(DAQmxExportSignal(task, signalID, outputTerminal));}
void NITask::resetExportedSignalAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetExportedSignalAttribute(task, attribute));}
void NITask::cfgInputBuffer(uInt32 numSampsPerChan) {
	DAQmxErrChk(DAQmxCfgInputBuffer(task, numSampsPerChan));}
void NITask::cfgOutputBuffer(uInt32 numSampsPerChan) {
	DAQmxErrChk(DAQmxCfgOutputBuffer(task, numSampsPerChan));}
void NITask::resetBufferAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetBufferAttribute(task, attribute));}
void NITask::resetSwitchScanAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetSwitchScanAttribute(task, attribute));}
void NITask::disableAdvTrig() {
	DAQmxErrChk(DAQmxDisableAdvTrig(task));}
void NITask::cfgDigEdgeAdvTrig(const char triggerSource[], NITask::Edge triggerEdge) {
	DAQmxErrChk(DAQmxCfgDigEdgeAdvTrig(task, triggerSource, triggerEdge));}
void NITask::sendSoftwareTrigger(int32 triggerID) {
	DAQmxErrChk(DAQmxSendSoftwareTrigger(task, triggerID));}
void NITask::controlWatchdogTask(int32 action) {
	DAQmxErrChk(DAQmxControlWatchdogTask(task, action));}
void NITask::cfgWatchdogAOExpirStates(const char channelNames[],
				   const float64 expirStateArray[],
				   const int32 outputTypeArray[],
				   uInt32 arraySize) {
	DAQmxErrChk(DAQmxCfgWatchdogAOExpirStates(task, channelNames, expirStateArray, outputTypeArray, arraySize));}
void NITask::cfgWatchdogCOExpirStates(const char channelNames[],
				   const int32 expirStateArray[],
				   uInt32 arraySize) {
	DAQmxErrChk(DAQmxCfgWatchdogCOExpirStates(task, channelNames, expirStateArray, arraySize));}
void NITask::cfgWatchdogDOExpirStates(const char channelNames[],
				   const int32 expirStateArray[],
				   uInt32 arraySize) {
	DAQmxErrChk(DAQmxCfgWatchdogDOExpirStates(task, channelNames, expirStateArray, arraySize));}
void NITask::resetWatchdogAttribute(const char lines[], int32 attribute) {
	DAQmxErrChk(DAQmxResetWatchdogAttribute(task, lines, attribute));}
void NITask::performBridgeOffsetNullingCal(const char channel[]) {
	DAQmxErrChk(DAQmxPerformBridgeOffsetNullingCal(task, channel));}
void NITask::performBridgeOffsetNullingCalEx(const char channel[],
					  bool32 skipUnsupportedChannels) {
	DAQmxErrChk(DAQmxPerformBridgeOffsetNullingCalEx(task, channel, skipUnsupportedChannels));}
void NITask::performThrmcplLeadOffsetNullingCal(const char channel[],
					     bool32 skipUnsupportedChannels) {
	DAQmxErrChk(DAQmxPerformThrmcplLeadOffsetNullingCal(task, channel, skipUnsupportedChannels));}
void NITask::performStrainShuntCal(const char channel[],
				float64 shuntResistorValue,
				int32 shuntResistorLocation,
				bool32 skipUnsupportedChannels) {
	DAQmxErrChk(DAQmxPerformStrainShuntCal(task, channel, shuntResistorValue, shuntResistorLocation, skipUnsupportedChannels));}
void NITask::performStrainShuntCalEx(const char channel[],
				  float64 shuntResistorValue,
				  int32 shuntResistorLocation,
				  int32 shuntResistorSelect,
				  int32 shuntResistorSource,
				  bool32 skipUnsupportedChannels) {
	DAQmxErrChk(DAQmxPerformStrainShuntCalEx(task, channel, shuntResistorValue, shuntResistorLocation, shuntResistorSelect, shuntResistorSource, skipUnsupportedChannels));}
void NITask::performBridgeShuntCal(const char channel[],
				float64 shuntResistorValue,
				int32 shuntResistorLocation,
				float64 bridgeResistance,
				bool32 skipUnsupportedChannels) {
	DAQmxErrChk(DAQmxPerformBridgeShuntCal(task, channel, shuntResistorValue, shuntResistorLocation, bridgeResistance, skipUnsupportedChannels));}
void NITask::performBridgeShuntCalEx(const char channel[],
				  float64 shuntResistorValue,
				  int32 shuntResistorLocation,
				  int32 shuntResistorSelect,
				  int32 shuntResistorSource,
				  float64 bridgeResistance,
				  bool32 skipUnsupportedChannels) {
	DAQmxErrChk(DAQmxPerformBridgeShuntCalEx(task, channel, shuntResistorValue, shuntResistorLocation, shuntResistorSelect, shuntResistorSource, bridgeResistance, skipUnsupportedChannels));}
void NITask::waitForNextSampleClock(float64 timeout, bool32 *isLate) {
	DAQmxErrChk(DAQmxWaitForNextSampleClock(task, timeout, isLate));}
void NITask::resetRealTimeAttribute(int32 attribute) {
	DAQmxErrChk(DAQmxResetRealTimeAttribute(task, attribute));}
void NITask::saveTask(const char saveAs[], const char author[], uInt32 options) {
	DAQmxErrChk(DAQmxSaveTask(task, saveAs, author, options));}
void NITask::saveGlobalChan(const char channelName[], const char saveAs[],
			 const char author[], uInt32 options) {
	DAQmxErrChk(DAQmxSaveGlobalChan(task, channelName, saveAs, author, options));}
uInt32 NITask::getBufInputBufSize() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetBufInputBufSize(task, &__temp__));
	return __temp__;

}
void NITask::setBufInputBufSize(uInt32 data) {
	DAQmxErrChk(DAQmxSetBufInputBufSize(task, data));}
void NITask::resetBufInputBufSize() {
	DAQmxErrChk(DAQmxResetBufInputBufSize(task));}
uInt32 NITask::getBufInputOnbrdBufSize() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetBufInputOnbrdBufSize(task, &__temp__));
	return __temp__;

}
uInt32 NITask::getBufOutputBufSize() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetBufOutputBufSize(task, &__temp__));
	return __temp__;

}
void NITask::setBufOutputBufSize(uInt32 data) {
	DAQmxErrChk(DAQmxSetBufOutputBufSize(task, data));}
void NITask::resetBufOutputBufSize() {
	DAQmxErrChk(DAQmxResetBufOutputBufSize(task));}
uInt32 NITask::getBufOutputOnbrdBufSize() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetBufOutputOnbrdBufSize(task, &__temp__));
	return __temp__;

}
void NITask::setBufOutputOnbrdBufSize(uInt32 data) {
	DAQmxErrChk(DAQmxSetBufOutputOnbrdBufSize(task, data));}
void NITask::resetBufOutputOnbrdBufSize() {
	DAQmxErrChk(DAQmxResetBufOutputOnbrdBufSize(task));}
void NITask::getAIMax(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIMax(task, channel, data));}
void NITask::setAIMax(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIMax(task, channel, data));}
void NITask::resetAIMax(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIMax(task, channel));}
void NITask::getAIMin(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIMin(task, channel, data));}
void NITask::setAIMin(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIMin(task, channel, data));}
void NITask::resetAIMin(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIMin(task, channel));}
QString NITask::getAICustomScaleName(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAICustomScaleName(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAICustomScaleName(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetAICustomScaleName(task, channel, data));}
void NITask::resetAICustomScaleName(const char channel[]) {
	DAQmxErrChk(DAQmxResetAICustomScaleName(task, channel));}
void NITask::getAIMeasType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIMeasType(task, channel, data));}
void NITask::getAIVoltageUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIVoltageUnits(task, channel, data));}
void NITask::setAIVoltageUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIVoltageUnits(task, channel, data));}
void NITask::resetAIVoltageUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIVoltageUnits(task, channel));}
void NITask::getAIVoltagedBRef(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIVoltagedBRef(task, channel, data));}
void NITask::setAIVoltagedBRef(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIVoltagedBRef(task, channel, data));}
void NITask::resetAIVoltagedBRef(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIVoltagedBRef(task, channel));}
void NITask::getAIVoltageACRMSUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIVoltageACRMSUnits(task, channel, data));}
void NITask::setAIVoltageACRMSUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIVoltageACRMSUnits(task, channel, data));}
void NITask::resetAIVoltageACRMSUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIVoltageACRMSUnits(task, channel));}
void NITask::getAITempUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAITempUnits(task, channel, data));}
void NITask::setAITempUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAITempUnits(task, channel, data));}
void NITask::resetAITempUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAITempUnits(task, channel));}
void NITask::getAIThrmcplType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIThrmcplType(task, channel, data));}
void NITask::setAIThrmcplType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIThrmcplType(task, channel, data));}
void NITask::resetAIThrmcplType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmcplType(task, channel));}
void NITask::getAIThrmcplScaleType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIThrmcplScaleType(task, channel, data));}
void NITask::setAIThrmcplScaleType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIThrmcplScaleType(task, channel, data));}
void NITask::resetAIThrmcplScaleType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmcplScaleType(task, channel));}
void NITask::getAIThrmcplCJCSrc(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIThrmcplCJCSrc(task, channel, data));}
void NITask::getAIThrmcplCJCVal(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIThrmcplCJCVal(task, channel, data));}
void NITask::setAIThrmcplCJCVal(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIThrmcplCJCVal(task, channel, data));}
void NITask::resetAIThrmcplCJCVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmcplCJCVal(task, channel));}
QString NITask::getAIThrmcplCJCChan(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIThrmcplCJCChan(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::getAIRTDType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIRTDType(task, channel, data));}
void NITask::setAIRTDType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIRTDType(task, channel, data));}
void NITask::resetAIRTDType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRTDType(task, channel));}
void NITask::getAIRTDR0(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIRTDR0(task, channel, data));}
void NITask::setAIRTDR0(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIRTDR0(task, channel, data));}
void NITask::resetAIRTDR0(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRTDR0(task, channel));}
void NITask::getAIRTDA(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIRTDA(task, channel, data));}
void NITask::setAIRTDA(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIRTDA(task, channel, data));}
void NITask::resetAIRTDA(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRTDA(task, channel));}
void NITask::getAIRTDB(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIRTDB(task, channel, data));}
void NITask::setAIRTDB(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIRTDB(task, channel, data));}
void NITask::resetAIRTDB(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRTDB(task, channel));}
void NITask::getAIRTDC(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIRTDC(task, channel, data));}
void NITask::setAIRTDC(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIRTDC(task, channel, data));}
void NITask::resetAIRTDC(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRTDC(task, channel));}
void NITask::getAIThrmstrA(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIThrmstrA(task, channel, data));}
void NITask::setAIThrmstrA(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIThrmstrA(task, channel, data));}
void NITask::resetAIThrmstrA(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmstrA(task, channel));}
void NITask::getAIThrmstrB(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIThrmstrB(task, channel, data));}
void NITask::setAIThrmstrB(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIThrmstrB(task, channel, data));}
void NITask::resetAIThrmstrB(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmstrB(task, channel));}
void NITask::getAIThrmstrC(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIThrmstrC(task, channel, data));}
void NITask::setAIThrmstrC(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIThrmstrC(task, channel, data));}
void NITask::resetAIThrmstrC(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmstrC(task, channel));}
void NITask::getAIThrmstrR1(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIThrmstrR1(task, channel, data));}
void NITask::setAIThrmstrR1(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIThrmstrR1(task, channel, data));}
void NITask::resetAIThrmstrR1(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmstrR1(task, channel));}
void NITask::getAIForceReadFromChan(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIForceReadFromChan(task, channel, data));}
void NITask::setAIForceReadFromChan(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIForceReadFromChan(task, channel, data));}
void NITask::resetAIForceReadFromChan(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIForceReadFromChan(task, channel));}
void NITask::getAICurrentUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAICurrentUnits(task, channel, data));}
void NITask::setAICurrentUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAICurrentUnits(task, channel, data));}
void NITask::resetAICurrentUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAICurrentUnits(task, channel));}
void NITask::getAICurrentACRMSUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAICurrentACRMSUnits(task, channel, data));}
void NITask::setAICurrentACRMSUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAICurrentACRMSUnits(task, channel, data));}
void NITask::resetAICurrentACRMSUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAICurrentACRMSUnits(task, channel));}
void NITask::getAIStrainUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIStrainUnits(task, channel, data));}
void NITask::setAIStrainUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIStrainUnits(task, channel, data));}
void NITask::resetAIStrainUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIStrainUnits(task, channel));}
void NITask::getAIStrainGageForceReadFromChan(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIStrainGageForceReadFromChan(task, channel, data));}
void NITask::setAIStrainGageForceReadFromChan(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIStrainGageForceReadFromChan(task, channel, data));}
void NITask::resetAIStrainGageForceReadFromChan(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIStrainGageForceReadFromChan(task, channel));}
void NITask::getAIStrainGageGageFactor(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIStrainGageGageFactor(task, channel, data));}
void NITask::setAIStrainGageGageFactor(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIStrainGageGageFactor(task, channel, data));}
void NITask::resetAIStrainGageGageFactor(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIStrainGageGageFactor(task, channel));}
void NITask::getAIStrainGagePoissonRatio(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIStrainGagePoissonRatio(task, channel, data));}
void NITask::setAIStrainGagePoissonRatio(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIStrainGagePoissonRatio(task, channel, data));}
void NITask::resetAIStrainGagePoissonRatio(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIStrainGagePoissonRatio(task, channel));}
void NITask::getAIStrainGageCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIStrainGageCfg(task, channel, data));}
void NITask::setAIStrainGageCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIStrainGageCfg(task, channel, data));}
void NITask::resetAIStrainGageCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIStrainGageCfg(task, channel));}
void NITask::getAIRosetteStrainGageRosetteType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIRosetteStrainGageRosetteType(task, channel, data));}
void NITask::getAIRosetteStrainGageOrientation(const char channel[],
					    float64 *data) {
	DAQmxErrChk(DAQmxGetAIRosetteStrainGageOrientation(task, channel, data));}
void NITask::setAIRosetteStrainGageOrientation(const char channel[],
					    float64 data) {
	DAQmxErrChk(DAQmxSetAIRosetteStrainGageOrientation(task, channel, data));}
void NITask::resetAIRosetteStrainGageOrientation(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRosetteStrainGageOrientation(task, channel));}
QString NITask::getAIRosetteStrainGageStrainChans(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIRosetteStrainGageStrainChans(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::getAIRosetteStrainGageRosetteMeasType(const char channel[],
						int32 *data) {
	DAQmxErrChk(DAQmxGetAIRosetteStrainGageRosetteMeasType(task, channel, data));}
void NITask::setAIRosetteStrainGageRosetteMeasType(const char channel[],
						int32 data) {
	DAQmxErrChk(DAQmxSetAIRosetteStrainGageRosetteMeasType(task, channel, data));}
void NITask::resetAIRosetteStrainGageRosetteMeasType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRosetteStrainGageRosetteMeasType(task, channel));}
void NITask::getAIResistanceUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIResistanceUnits(task, channel, data));}
void NITask::setAIResistanceUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIResistanceUnits(task, channel, data));}
void NITask::resetAIResistanceUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIResistanceUnits(task, channel));}
void NITask::getAIFreqUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIFreqUnits(task, channel, data));}
void NITask::setAIFreqUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIFreqUnits(task, channel, data));}
void NITask::resetAIFreqUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFreqUnits(task, channel));}
void NITask::getAIFreqThreshVoltage(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIFreqThreshVoltage(task, channel, data));}
void NITask::setAIFreqThreshVoltage(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIFreqThreshVoltage(task, channel, data));}
void NITask::resetAIFreqThreshVoltage(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFreqThreshVoltage(task, channel));}
void NITask::getAIFreqHyst(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIFreqHyst(task, channel, data));}
void NITask::setAIFreqHyst(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIFreqHyst(task, channel, data));}
void NITask::resetAIFreqHyst(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFreqHyst(task, channel));}
void NITask::getAILVDTUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAILVDTUnits(task, channel, data));}
void NITask::setAILVDTUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAILVDTUnits(task, channel, data));}
void NITask::resetAILVDTUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILVDTUnits(task, channel));}
void NITask::getAILVDTSensitivity(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAILVDTSensitivity(task, channel, data));}
void NITask::setAILVDTSensitivity(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAILVDTSensitivity(task, channel, data));}
void NITask::resetAILVDTSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILVDTSensitivity(task, channel));}
void NITask::getAILVDTSensitivityUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAILVDTSensitivityUnits(task, channel, data));}
void NITask::setAILVDTSensitivityUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAILVDTSensitivityUnits(task, channel, data));}
void NITask::resetAILVDTSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILVDTSensitivityUnits(task, channel));}
void NITask::getAIRVDTUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIRVDTUnits(task, channel, data));}
void NITask::setAIRVDTUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIRVDTUnits(task, channel, data));}
void NITask::resetAIRVDTUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRVDTUnits(task, channel));}
void NITask::getAIRVDTSensitivity(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIRVDTSensitivity(task, channel, data));}
void NITask::setAIRVDTSensitivity(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIRVDTSensitivity(task, channel, data));}
void NITask::resetAIRVDTSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRVDTSensitivity(task, channel));}
void NITask::getAIRVDTSensitivityUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIRVDTSensitivityUnits(task, channel, data));}
void NITask::setAIRVDTSensitivityUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIRVDTSensitivityUnits(task, channel, data));}
void NITask::resetAIRVDTSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRVDTSensitivityUnits(task, channel));}
void NITask::getAIEddyCurrentProxProbeUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIEddyCurrentProxProbeUnits(task, channel, data));}
void NITask::setAIEddyCurrentProxProbeUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIEddyCurrentProxProbeUnits(task, channel, data));}
void NITask::resetAIEddyCurrentProxProbeUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIEddyCurrentProxProbeUnits(task, channel));}
void NITask::getAIEddyCurrentProxProbeSensitivity(const char channel[],
					       float64 *data) {
	DAQmxErrChk(DAQmxGetAIEddyCurrentProxProbeSensitivity(task, channel, data));}
void NITask::setAIEddyCurrentProxProbeSensitivity(const char channel[],
					       float64 data) {
	DAQmxErrChk(DAQmxSetAIEddyCurrentProxProbeSensitivity(task, channel, data));}
void NITask::resetAIEddyCurrentProxProbeSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIEddyCurrentProxProbeSensitivity(task, channel));}
void NITask::getAIEddyCurrentProxProbeSensitivityUnits(const char channel[],
						    int32 *data) {
	DAQmxErrChk(DAQmxGetAIEddyCurrentProxProbeSensitivityUnits(task, channel, data));}
void NITask::setAIEddyCurrentProxProbeSensitivityUnits(const char channel[],
						    int32 data) {
	DAQmxErrChk(DAQmxSetAIEddyCurrentProxProbeSensitivityUnits(task, channel, data));}
void NITask::resetAIEddyCurrentProxProbeSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIEddyCurrentProxProbeSensitivityUnits(task, channel));}
void NITask::getAISoundPressureMaxSoundPressureLvl(const char channel[],
						float64 *data) {
	DAQmxErrChk(DAQmxGetAISoundPressureMaxSoundPressureLvl(task, channel, data));}
void NITask::setAISoundPressureMaxSoundPressureLvl(const char channel[],
						float64 data) {
	DAQmxErrChk(DAQmxSetAISoundPressureMaxSoundPressureLvl(task, channel, data));}
void NITask::resetAISoundPressureMaxSoundPressureLvl(const char channel[]) {
	DAQmxErrChk(DAQmxResetAISoundPressureMaxSoundPressureLvl(task, channel));}
void NITask::getAISoundPressureUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAISoundPressureUnits(task, channel, data));}
void NITask::setAISoundPressureUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAISoundPressureUnits(task, channel, data));}
void NITask::resetAISoundPressureUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAISoundPressureUnits(task, channel));}
void NITask::getAISoundPressuredBRef(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAISoundPressuredBRef(task, channel, data));}
void NITask::setAISoundPressuredBRef(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAISoundPressuredBRef(task, channel, data));}
void NITask::resetAISoundPressuredBRef(const char channel[]) {
	DAQmxErrChk(DAQmxResetAISoundPressuredBRef(task, channel));}
void NITask::getAIMicrophoneSensitivity(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIMicrophoneSensitivity(task, channel, data));}
void NITask::setAIMicrophoneSensitivity(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIMicrophoneSensitivity(task, channel, data));}
void NITask::resetAIMicrophoneSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIMicrophoneSensitivity(task, channel));}
void NITask::getAIAccelUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIAccelUnits(task, channel, data));}
void NITask::setAIAccelUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIAccelUnits(task, channel, data));}
void NITask::resetAIAccelUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAccelUnits(task, channel));}
void NITask::getAIAcceldBRef(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIAcceldBRef(task, channel, data));}
void NITask::setAIAcceldBRef(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIAcceldBRef(task, channel, data));}
void NITask::resetAIAcceldBRef(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAcceldBRef(task, channel));}
void NITask::getAIAccel4WireDCVoltageSensitivity(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetAIAccel4WireDCVoltageSensitivity(task, channel, data));}
void NITask::setAIAccel4WireDCVoltageSensitivity(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetAIAccel4WireDCVoltageSensitivity(task, channel, data));}
void NITask::resetAIAccel4WireDCVoltageSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAccel4WireDCVoltageSensitivity(task, channel));}
void NITask::getAIAccel4WireDCVoltageSensitivityUnits(const char channel[],
						   int32 *data) {
	DAQmxErrChk(DAQmxGetAIAccel4WireDCVoltageSensitivityUnits(task, channel, data));}
void NITask::setAIAccel4WireDCVoltageSensitivityUnits(const char channel[],
						   int32 data) {
	DAQmxErrChk(DAQmxSetAIAccel4WireDCVoltageSensitivityUnits(task, channel, data));}
void NITask::resetAIAccel4WireDCVoltageSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAccel4WireDCVoltageSensitivityUnits(task, channel));}
void NITask::getAIAccelSensitivity(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIAccelSensitivity(task, channel, data));}
void NITask::setAIAccelSensitivity(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIAccelSensitivity(task, channel, data));}
void NITask::resetAIAccelSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAccelSensitivity(task, channel));}
void NITask::getAIAccelSensitivityUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIAccelSensitivityUnits(task, channel, data));}
void NITask::setAIAccelSensitivityUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIAccelSensitivityUnits(task, channel, data));}
void NITask::resetAIAccelSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAccelSensitivityUnits(task, channel));}
void NITask::getAIAccelChargeSensitivity(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIAccelChargeSensitivity(task, channel, data));}
void NITask::setAIAccelChargeSensitivity(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIAccelChargeSensitivity(task, channel, data));}
void NITask::resetAIAccelChargeSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAccelChargeSensitivity(task, channel));}
void NITask::getAIAccelChargeSensitivityUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIAccelChargeSensitivityUnits(task, channel, data));}
void NITask::setAIAccelChargeSensitivityUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIAccelChargeSensitivityUnits(task, channel, data));}
void NITask::resetAIAccelChargeSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAccelChargeSensitivityUnits(task, channel));}
void NITask::getAIVelocityUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIVelocityUnits(task, channel, data));}
void NITask::setAIVelocityUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIVelocityUnits(task, channel, data));}
void NITask::resetAIVelocityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIVelocityUnits(task, channel));}
void NITask::getAIVelocityIEPESensordBRef(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIVelocityIEPESensordBRef(task, channel, data));}
void NITask::setAIVelocityIEPESensordBRef(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIVelocityIEPESensordBRef(task, channel, data));}
void NITask::resetAIVelocityIEPESensordBRef(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIVelocityIEPESensordBRef(task, channel));}
void NITask::getAIVelocityIEPESensorSensitivity(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetAIVelocityIEPESensorSensitivity(task, channel, data));}
void NITask::setAIVelocityIEPESensorSensitivity(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetAIVelocityIEPESensorSensitivity(task, channel, data));}
void NITask::resetAIVelocityIEPESensorSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIVelocityIEPESensorSensitivity(task, channel));}
void NITask::getAIVelocityIEPESensorSensitivityUnits(const char channel[],
						  int32 *data) {
	DAQmxErrChk(DAQmxGetAIVelocityIEPESensorSensitivityUnits(task, channel, data));}
void NITask::setAIVelocityIEPESensorSensitivityUnits(const char channel[],
						  int32 data) {
	DAQmxErrChk(DAQmxSetAIVelocityIEPESensorSensitivityUnits(task, channel, data));}
void NITask::resetAIVelocityIEPESensorSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIVelocityIEPESensorSensitivityUnits(task, channel));}
void NITask::getAIForceUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIForceUnits(task, channel, data));}
void NITask::setAIForceUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIForceUnits(task, channel, data));}
void NITask::resetAIForceUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIForceUnits(task, channel));}
void NITask::getAIForceIEPESensorSensitivity(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIForceIEPESensorSensitivity(task, channel, data));}
void NITask::setAIForceIEPESensorSensitivity(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIForceIEPESensorSensitivity(task, channel, data));}
void NITask::resetAIForceIEPESensorSensitivity(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIForceIEPESensorSensitivity(task, channel));}
void NITask::getAIForceIEPESensorSensitivityUnits(const char channel[],
					       int32 *data) {
	DAQmxErrChk(DAQmxGetAIForceIEPESensorSensitivityUnits(task, channel, data));}
void NITask::setAIForceIEPESensorSensitivityUnits(const char channel[],
					       int32 data) {
	DAQmxErrChk(DAQmxSetAIForceIEPESensorSensitivityUnits(task, channel, data));}
void NITask::resetAIForceIEPESensorSensitivityUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIForceIEPESensorSensitivityUnits(task, channel));}
void NITask::getAIPressureUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIPressureUnits(task, channel, data));}
void NITask::setAIPressureUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIPressureUnits(task, channel, data));}
void NITask::resetAIPressureUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIPressureUnits(task, channel));}
void NITask::getAITorqueUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAITorqueUnits(task, channel, data));}
void NITask::setAITorqueUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAITorqueUnits(task, channel, data));}
void NITask::resetAITorqueUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAITorqueUnits(task, channel));}
void NITask::getAIBridgeUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeUnits(task, channel, data));}
void NITask::setAIBridgeUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeUnits(task, channel, data));}
void NITask::resetAIBridgeUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeUnits(task, channel));}
void NITask::getAIBridgeElectricalUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeElectricalUnits(task, channel, data));}
void NITask::setAIBridgeElectricalUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeElectricalUnits(task, channel, data));}
void NITask::resetAIBridgeElectricalUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeElectricalUnits(task, channel));}
void NITask::getAIBridgePhysicalUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgePhysicalUnits(task, channel, data));}
void NITask::setAIBridgePhysicalUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgePhysicalUnits(task, channel, data));}
void NITask::resetAIBridgePhysicalUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgePhysicalUnits(task, channel));}
void NITask::getAIBridgeScaleType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeScaleType(task, channel, data));}
void NITask::setAIBridgeScaleType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeScaleType(task, channel, data));}
void NITask::resetAIBridgeScaleType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeScaleType(task, channel));}
void NITask::getAIBridgeTwoPointLinFirstElectricalVal(const char channel[],
						   float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeTwoPointLinFirstElectricalVal(task, channel, data));}
void NITask::setAIBridgeTwoPointLinFirstElectricalVal(const char channel[],
						   float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeTwoPointLinFirstElectricalVal(task, channel, data));}
void NITask::resetAIBridgeTwoPointLinFirstElectricalVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeTwoPointLinFirstElectricalVal(task, channel));}
void NITask::getAIBridgeTwoPointLinFirstPhysicalVal(const char channel[],
						 float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal(task, channel, data));}
void NITask::setAIBridgeTwoPointLinFirstPhysicalVal(const char channel[],
						 float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal(task, channel, data));}
void NITask::resetAIBridgeTwoPointLinFirstPhysicalVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal(task, channel));}
void NITask::getAIBridgeTwoPointLinSecondElectricalVal(const char channel[],
						    float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeTwoPointLinSecondElectricalVal(task, channel, data));}
void NITask::setAIBridgeTwoPointLinSecondElectricalVal(const char channel[],
						    float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeTwoPointLinSecondElectricalVal(task, channel, data));}
void NITask::resetAIBridgeTwoPointLinSecondElectricalVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeTwoPointLinSecondElectricalVal(task, channel));}
void NITask::getAIBridgeTwoPointLinSecondPhysicalVal(const char channel[],
						  float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal(task, channel, data));}
void NITask::setAIBridgeTwoPointLinSecondPhysicalVal(const char channel[],
						  float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal(task, channel, data));}
void NITask::resetAIBridgeTwoPointLinSecondPhysicalVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal(task, channel));}
void NITask::getAIBridgeTableElectricalVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIBridgeTableElectricalVals(task, channel, data, arraySizeInElements));}
void NITask::setAIBridgeTableElectricalVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIBridgeTableElectricalVals(task, channel, data, arraySizeInElements));}
void NITask::resetAIBridgeTableElectricalVals(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeTableElectricalVals(task, channel));}
void NITask::getAIBridgeTablePhysicalVals(const char channel[], float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIBridgeTablePhysicalVals(task, channel, data, arraySizeInElements));}
void NITask::setAIBridgeTablePhysicalVals(const char channel[], float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIBridgeTablePhysicalVals(task, channel, data, arraySizeInElements));}
void NITask::resetAIBridgeTablePhysicalVals(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeTablePhysicalVals(task, channel));}
void NITask::getAIBridgePolyForwardCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIBridgePolyForwardCoeff(task, channel, data, arraySizeInElements));}
void NITask::setAIBridgePolyForwardCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIBridgePolyForwardCoeff(task, channel, data, arraySizeInElements));}
void NITask::resetAIBridgePolyForwardCoeff(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgePolyForwardCoeff(task, channel));}
void NITask::getAIBridgePolyReverseCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIBridgePolyReverseCoeff(task, channel, data, arraySizeInElements));}
void NITask::setAIBridgePolyReverseCoeff(const char channel[], float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIBridgePolyReverseCoeff(task, channel, data, arraySizeInElements));}
void NITask::resetAIBridgePolyReverseCoeff(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgePolyReverseCoeff(task, channel));}
void NITask::getAIChargeUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIChargeUnits(task, channel, data));}
void NITask::setAIChargeUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIChargeUnits(task, channel, data));}
void NITask::resetAIChargeUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChargeUnits(task, channel));}
void NITask::getAIIsTEDS(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIIsTEDS(task, channel, data));}
QString NITask::getAITEDSUnits(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAITEDSUnits(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::getAICoupling(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAICoupling(task, channel, data));}
void NITask::setAICoupling(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAICoupling(task, channel, data));}
void NITask::resetAICoupling(const char channel[]) {
	DAQmxErrChk(DAQmxResetAICoupling(task, channel));}
void NITask::getAIImpedance(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIImpedance(task, channel, data));}
void NITask::setAIImpedance(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIImpedance(task, channel, data));}
void NITask::resetAIImpedance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIImpedance(task, channel));}
void NITask::getAITermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAITermCfg(task, channel, data));}
void NITask::setAITermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAITermCfg(task, channel, data));}
void NITask::resetAITermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetAITermCfg(task, channel));}
QString NITask::getAIInputSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIInputSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAIInputSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetAIInputSrc(task, channel, data));}
void NITask::resetAIInputSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIInputSrc(task, channel));}
void NITask::getAIResistanceCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIResistanceCfg(task, channel, data));}
void NITask::setAIResistanceCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIResistanceCfg(task, channel, data));}
void NITask::resetAIResistanceCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIResistanceCfg(task, channel));}
void NITask::getAILeadWireResistance(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAILeadWireResistance(task, channel, data));}
void NITask::setAILeadWireResistance(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAILeadWireResistance(task, channel, data));}
void NITask::resetAILeadWireResistance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILeadWireResistance(task, channel));}
void NITask::getAIBridgeCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeCfg(task, channel, data));}
void NITask::setAIBridgeCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeCfg(task, channel, data));}
void NITask::resetAIBridgeCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeCfg(task, channel));}
void NITask::getAIBridgeNomResistance(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeNomResistance(task, channel, data));}
void NITask::setAIBridgeNomResistance(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeNomResistance(task, channel, data));}
void NITask::resetAIBridgeNomResistance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeNomResistance(task, channel));}
void NITask::getAIBridgeInitialVoltage(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeInitialVoltage(task, channel, data));}
void NITask::setAIBridgeInitialVoltage(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeInitialVoltage(task, channel, data));}
void NITask::resetAIBridgeInitialVoltage(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeInitialVoltage(task, channel));}
void NITask::getAIBridgeInitialRatio(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeInitialRatio(task, channel, data));}
void NITask::setAIBridgeInitialRatio(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeInitialRatio(task, channel, data));}
void NITask::resetAIBridgeInitialRatio(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeInitialRatio(task, channel));}
void NITask::getAIBridgeShuntCalEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalEnable(task, channel, data));}
void NITask::setAIBridgeShuntCalEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalEnable(task, channel, data));}
void NITask::resetAIBridgeShuntCalEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalEnable(task, channel));}
void NITask::getAIBridgeShuntCalSelect(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalSelect(task, channel, data));}
void NITask::setAIBridgeShuntCalSelect(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalSelect(task, channel, data));}
void NITask::resetAIBridgeShuntCalSelect(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalSelect(task, channel));}
void NITask::getAIBridgeShuntCalShuntCalASrc(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalShuntCalASrc(task, channel, data));}
void NITask::setAIBridgeShuntCalShuntCalASrc(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalShuntCalASrc(task, channel, data));}
void NITask::resetAIBridgeShuntCalShuntCalASrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalShuntCalASrc(task, channel));}
void NITask::getAIBridgeShuntCalGainAdjust(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalGainAdjust(task, channel, data));}
void NITask::setAIBridgeShuntCalGainAdjust(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalGainAdjust(task, channel, data));}
void NITask::resetAIBridgeShuntCalGainAdjust(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalGainAdjust(task, channel));}
void NITask::getAIBridgeShuntCalShuntCalAResistance(const char channel[],
						 float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalShuntCalAResistance(task, channel, data));}
void NITask::setAIBridgeShuntCalShuntCalAResistance(const char channel[],
						 float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalShuntCalAResistance(task, channel, data));}
void NITask::resetAIBridgeShuntCalShuntCalAResistance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalShuntCalAResistance(task, channel));}
void NITask::getAIBridgeShuntCalShuntCalAActualResistance(const char channel[],
						       float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalShuntCalAActualResistance(task, channel, data));}
void NITask::setAIBridgeShuntCalShuntCalAActualResistance(const char channel[],
						       float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalShuntCalAActualResistance(task, channel, data));}
void NITask::resetAIBridgeShuntCalShuntCalAActualResistance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalShuntCalAActualResistance(task, channel));}
void NITask::getAIBridgeShuntCalShuntCalBResistance(const char channel[],
						 float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalShuntCalBResistance(task, channel, data));}
void NITask::setAIBridgeShuntCalShuntCalBResistance(const char channel[],
						 float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalShuntCalBResistance(task, channel, data));}
void NITask::resetAIBridgeShuntCalShuntCalBResistance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalShuntCalBResistance(task, channel));}
void NITask::getAIBridgeShuntCalShuntCalBActualResistance(const char channel[],
						       float64 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeShuntCalShuntCalBActualResistance(task, channel, data));}
void NITask::setAIBridgeShuntCalShuntCalBActualResistance(const char channel[],
						       float64 data) {
	DAQmxErrChk(DAQmxSetAIBridgeShuntCalShuntCalBActualResistance(task, channel, data));}
void NITask::resetAIBridgeShuntCalShuntCalBActualResistance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeShuntCalShuntCalBActualResistance(task, channel));}
void NITask::getAIBridgeBalanceCoarsePot(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeBalanceCoarsePot(task, channel, data));}
void NITask::setAIBridgeBalanceCoarsePot(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeBalanceCoarsePot(task, channel, data));}
void NITask::resetAIBridgeBalanceCoarsePot(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeBalanceCoarsePot(task, channel));}
void NITask::getAIBridgeBalanceFinePot(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIBridgeBalanceFinePot(task, channel, data));}
void NITask::setAIBridgeBalanceFinePot(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIBridgeBalanceFinePot(task, channel, data));}
void NITask::resetAIBridgeBalanceFinePot(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIBridgeBalanceFinePot(task, channel));}
void NITask::getAICurrentShuntLoc(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAICurrentShuntLoc(task, channel, data));}
void NITask::setAICurrentShuntLoc(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAICurrentShuntLoc(task, channel, data));}
void NITask::resetAICurrentShuntLoc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAICurrentShuntLoc(task, channel));}
void NITask::getAICurrentShuntResistance(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAICurrentShuntResistance(task, channel, data));}
void NITask::setAICurrentShuntResistance(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAICurrentShuntResistance(task, channel, data));}
void NITask::resetAICurrentShuntResistance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAICurrentShuntResistance(task, channel));}
void NITask::getAIExcitSense(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIExcitSense(task, channel, data));}
void NITask::setAIExcitSense(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIExcitSense(task, channel, data));}
void NITask::resetAIExcitSense(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitSense(task, channel));}
void NITask::getAIExcitSrc(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIExcitSrc(task, channel, data));}
void NITask::setAIExcitSrc(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIExcitSrc(task, channel, data));}
void NITask::resetAIExcitSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitSrc(task, channel));}
void NITask::getAIExcitVal(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIExcitVal(task, channel, data));}
void NITask::setAIExcitVal(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIExcitVal(task, channel, data));}
void NITask::resetAIExcitVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitVal(task, channel));}
void NITask::getAIExcitUseForScaling(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIExcitUseForScaling(task, channel, data));}
void NITask::setAIExcitUseForScaling(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIExcitUseForScaling(task, channel, data));}
void NITask::resetAIExcitUseForScaling(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitUseForScaling(task, channel));}
void NITask::getAIExcitUseMultiplexed(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIExcitUseMultiplexed(task, channel, data));}
void NITask::setAIExcitUseMultiplexed(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIExcitUseMultiplexed(task, channel, data));}
void NITask::resetAIExcitUseMultiplexed(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitUseMultiplexed(task, channel));}
void NITask::getAIExcitActualVal(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIExcitActualVal(task, channel, data));}
void NITask::setAIExcitActualVal(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIExcitActualVal(task, channel, data));}
void NITask::resetAIExcitActualVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitActualVal(task, channel));}
void NITask::getAIExcitDCorAC(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIExcitDCorAC(task, channel, data));}
void NITask::setAIExcitDCorAC(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIExcitDCorAC(task, channel, data));}
void NITask::resetAIExcitDCorAC(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitDCorAC(task, channel));}
void NITask::getAIExcitVoltageOrCurrent(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIExcitVoltageOrCurrent(task, channel, data));}
void NITask::setAIExcitVoltageOrCurrent(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIExcitVoltageOrCurrent(task, channel, data));}
void NITask::resetAIExcitVoltageOrCurrent(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitVoltageOrCurrent(task, channel));}
void NITask::getAIExcitIdleOutputBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIExcitIdleOutputBehavior(task, channel, data));}
void NITask::setAIExcitIdleOutputBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIExcitIdleOutputBehavior(task, channel, data));}
void NITask::resetAIExcitIdleOutputBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIExcitIdleOutputBehavior(task, channel));}
void NITask::getAIACExcitFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIACExcitFreq(task, channel, data));}
void NITask::setAIACExcitFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIACExcitFreq(task, channel, data));}
void NITask::resetAIACExcitFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIACExcitFreq(task, channel));}
void NITask::getAIACExcitSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIACExcitSyncEnable(task, channel, data));}
void NITask::setAIACExcitSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIACExcitSyncEnable(task, channel, data));}
void NITask::resetAIACExcitSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIACExcitSyncEnable(task, channel));}
void NITask::getAIACExcitWireMode(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIACExcitWireMode(task, channel, data));}
void NITask::setAIACExcitWireMode(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIACExcitWireMode(task, channel, data));}
void NITask::resetAIACExcitWireMode(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIACExcitWireMode(task, channel));}
void NITask::getAISensorPowerVoltage(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAISensorPowerVoltage(task, channel, data));}
void NITask::setAISensorPowerVoltage(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAISensorPowerVoltage(task, channel, data));}
void NITask::resetAISensorPowerVoltage(const char channel[]) {
	DAQmxErrChk(DAQmxResetAISensorPowerVoltage(task, channel));}
void NITask::getAISensorPowerCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAISensorPowerCfg(task, channel, data));}
void NITask::setAISensorPowerCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAISensorPowerCfg(task, channel, data));}
void NITask::resetAISensorPowerCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetAISensorPowerCfg(task, channel));}
void NITask::getAISensorPowerType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAISensorPowerType(task, channel, data));}
void NITask::setAISensorPowerType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAISensorPowerType(task, channel, data));}
void NITask::resetAISensorPowerType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAISensorPowerType(task, channel));}
void NITask::getAIOpenThrmcplDetectEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIOpenThrmcplDetectEnable(task, channel, data));}
void NITask::setAIOpenThrmcplDetectEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIOpenThrmcplDetectEnable(task, channel, data));}
void NITask::resetAIOpenThrmcplDetectEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIOpenThrmcplDetectEnable(task, channel));}
void NITask::getAIThrmcplLeadOffsetVoltage(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIThrmcplLeadOffsetVoltage(task, channel, data));}
void NITask::setAIThrmcplLeadOffsetVoltage(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIThrmcplLeadOffsetVoltage(task, channel, data));}
void NITask::resetAIThrmcplLeadOffsetVoltage(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIThrmcplLeadOffsetVoltage(task, channel));}
void NITask::getAIAtten(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIAtten(task, channel, data));}
void NITask::setAIAtten(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIAtten(task, channel, data));}
void NITask::resetAIAtten(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAtten(task, channel));}
void NITask::getAIProbeAtten(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIProbeAtten(task, channel, data));}
void NITask::setAIProbeAtten(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIProbeAtten(task, channel, data));}
void NITask::resetAIProbeAtten(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIProbeAtten(task, channel));}
void NITask::getAILowpassEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAILowpassEnable(task, channel, data));}
void NITask::setAILowpassEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAILowpassEnable(task, channel, data));}
void NITask::resetAILowpassEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILowpassEnable(task, channel));}
void NITask::getAILowpassCutoffFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAILowpassCutoffFreq(task, channel, data));}
void NITask::setAILowpassCutoffFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAILowpassCutoffFreq(task, channel, data));}
void NITask::resetAILowpassCutoffFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILowpassCutoffFreq(task, channel));}
void NITask::getAILowpassSwitchCapClkSrc(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAILowpassSwitchCapClkSrc(task, channel, data));}
void NITask::setAILowpassSwitchCapClkSrc(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAILowpassSwitchCapClkSrc(task, channel, data));}
void NITask::resetAILowpassSwitchCapClkSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILowpassSwitchCapClkSrc(task, channel));}
void NITask::getAILowpassSwitchCapExtClkFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAILowpassSwitchCapExtClkFreq(task, channel, data));}
void NITask::setAILowpassSwitchCapExtClkFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAILowpassSwitchCapExtClkFreq(task, channel, data));}
void NITask::resetAILowpassSwitchCapExtClkFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILowpassSwitchCapExtClkFreq(task, channel));}
void NITask::getAILowpassSwitchCapExtClkDiv(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAILowpassSwitchCapExtClkDiv(task, channel, data));}
void NITask::setAILowpassSwitchCapExtClkDiv(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAILowpassSwitchCapExtClkDiv(task, channel, data));}
void NITask::resetAILowpassSwitchCapExtClkDiv(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILowpassSwitchCapExtClkDiv(task, channel));}
void NITask::getAILowpassSwitchCapOutClkDiv(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAILowpassSwitchCapOutClkDiv(task, channel, data));}
void NITask::setAILowpassSwitchCapOutClkDiv(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAILowpassSwitchCapOutClkDiv(task, channel, data));}
void NITask::resetAILowpassSwitchCapOutClkDiv(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILowpassSwitchCapOutClkDiv(task, channel));}
void NITask::getAIDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrEnable(task, channel, data));}
void NITask::setAIDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrEnable(task, channel, data));}
void NITask::resetAIDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrEnable(task, channel));}
void NITask::getAIDigFltrType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrType(task, channel, data));}
void NITask::setAIDigFltrType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrType(task, channel, data));}
void NITask::resetAIDigFltrType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrType(task, channel));}
void NITask::getAIDigFltrResponse(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrResponse(task, channel, data));}
void NITask::setAIDigFltrResponse(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrResponse(task, channel, data));}
void NITask::resetAIDigFltrResponse(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrResponse(task, channel));}
void NITask::getAIDigFltrOrder(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrOrder(task, channel, data));}
void NITask::setAIDigFltrOrder(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrOrder(task, channel, data));}
void NITask::resetAIDigFltrOrder(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrOrder(task, channel));}
void NITask::getAIDigFltrLowpassCutoffFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrLowpassCutoffFreq(task, channel, data));}
void NITask::setAIDigFltrLowpassCutoffFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrLowpassCutoffFreq(task, channel, data));}
void NITask::resetAIDigFltrLowpassCutoffFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrLowpassCutoffFreq(task, channel));}
void NITask::getAIDigFltrHighpassCutoffFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrHighpassCutoffFreq(task, channel, data));}
void NITask::setAIDigFltrHighpassCutoffFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrHighpassCutoffFreq(task, channel, data));}
void NITask::resetAIDigFltrHighpassCutoffFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrHighpassCutoffFreq(task, channel));}
void NITask::getAIDigFltrBandpassCenterFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrBandpassCenterFreq(task, channel, data));}
void NITask::setAIDigFltrBandpassCenterFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrBandpassCenterFreq(task, channel, data));}
void NITask::resetAIDigFltrBandpassCenterFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrBandpassCenterFreq(task, channel));}
void NITask::getAIDigFltrBandpassWidth(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrBandpassWidth(task, channel, data));}
void NITask::setAIDigFltrBandpassWidth(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrBandpassWidth(task, channel, data));}
void NITask::resetAIDigFltrBandpassWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrBandpassWidth(task, channel));}
void NITask::getAIDigFltrNotchCenterFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrNotchCenterFreq(task, channel, data));}
void NITask::setAIDigFltrNotchCenterFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrNotchCenterFreq(task, channel, data));}
void NITask::resetAIDigFltrNotchCenterFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrNotchCenterFreq(task, channel));}
void NITask::getAIDigFltrNotchWidth(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDigFltrNotchWidth(task, channel, data));}
void NITask::setAIDigFltrNotchWidth(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDigFltrNotchWidth(task, channel, data));}
void NITask::resetAIDigFltrNotchWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrNotchWidth(task, channel));}
void NITask::getAIDigFltrCoeff(const char channel[], float64 *data,
			    uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIDigFltrCoeff(task, channel, data, arraySizeInElements));}
void NITask::setAIDigFltrCoeff(const char channel[], float64 *data,
			    uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIDigFltrCoeff(task, channel, data, arraySizeInElements));}
void NITask::resetAIDigFltrCoeff(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDigFltrCoeff(task, channel));}
void NITask::getAIFilterEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIFilterEnable(task, channel, data));}
void NITask::setAIFilterEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIFilterEnable(task, channel, data));}
void NITask::resetAIFilterEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFilterEnable(task, channel));}
void NITask::getAIFilterFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIFilterFreq(task, channel, data));}
void NITask::setAIFilterFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIFilterFreq(task, channel, data));}
void NITask::resetAIFilterFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFilterFreq(task, channel));}
void NITask::getAIFilterResponse(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIFilterResponse(task, channel, data));}
void NITask::setAIFilterResponse(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIFilterResponse(task, channel, data));}
void NITask::resetAIFilterResponse(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFilterResponse(task, channel));}
void NITask::getAIFilterOrder(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIFilterOrder(task, channel, data));}
void NITask::setAIFilterOrder(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIFilterOrder(task, channel, data));}
void NITask::resetAIFilterOrder(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFilterOrder(task, channel));}
void NITask::getAIFilterDelay(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIFilterDelay(task, channel, data));}
void NITask::getAIFilterDelayUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIFilterDelayUnits(task, channel, data));}
void NITask::setAIFilterDelayUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIFilterDelayUnits(task, channel, data));}
void NITask::resetAIFilterDelayUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFilterDelayUnits(task, channel));}
void NITask::getAIRemoveFilterDelay(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIRemoveFilterDelay(task, channel, data));}
void NITask::setAIRemoveFilterDelay(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIRemoveFilterDelay(task, channel, data));}
void NITask::resetAIRemoveFilterDelay(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRemoveFilterDelay(task, channel));}
void NITask::getAIFilterDelayAdjustment(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIFilterDelayAdjustment(task, channel, data));}
void NITask::setAIFilterDelayAdjustment(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIFilterDelayAdjustment(task, channel, data));}
void NITask::resetAIFilterDelayAdjustment(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIFilterDelayAdjustment(task, channel));}
void NITask::getAIAveragingWinSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIAveragingWinSize(task, channel, data));}
void NITask::setAIAveragingWinSize(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIAveragingWinSize(task, channel, data));}
void NITask::resetAIAveragingWinSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAveragingWinSize(task, channel));}
void NITask::getAIResolutionUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIResolutionUnits(task, channel, data));}
void NITask::getAIResolution(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIResolution(task, channel, data));}
void NITask::getAIRawSampSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIRawSampSize(task, channel, data));}
void NITask::getAIRawSampJustification(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIRawSampJustification(task, channel, data));}
void NITask::getAIADCTimingMode(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIADCTimingMode(task, channel, data));}
void NITask::setAIADCTimingMode(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIADCTimingMode(task, channel, data));}
void NITask::resetAIADCTimingMode(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIADCTimingMode(task, channel));}
void NITask::getAIADCCustomTimingMode(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIADCCustomTimingMode(task, channel, data));}
void NITask::setAIADCCustomTimingMode(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIADCCustomTimingMode(task, channel, data));}
void NITask::resetAIADCCustomTimingMode(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIADCCustomTimingMode(task, channel));}
void NITask::getAIDitherEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIDitherEnable(task, channel, data));}
void NITask::setAIDitherEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIDitherEnable(task, channel, data));}
void NITask::resetAIDitherEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDitherEnable(task, channel));}
void NITask::getAIChanCalHasValidCalInfo(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIChanCalHasValidCalInfo(task, channel, data));}
void NITask::getAIChanCalEnableCal(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIChanCalEnableCal(task, channel, data));}
void NITask::setAIChanCalEnableCal(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIChanCalEnableCal(task, channel, data));}
void NITask::resetAIChanCalEnableCal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalEnableCal(task, channel));}
void NITask::getAIChanCalApplyCalIfExp(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIChanCalApplyCalIfExp(task, channel, data));}
void NITask::setAIChanCalApplyCalIfExp(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIChanCalApplyCalIfExp(task, channel, data));}
void NITask::resetAIChanCalApplyCalIfExp(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalApplyCalIfExp(task, channel));}
void NITask::getAIChanCalScaleType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIChanCalScaleType(task, channel, data));}
void NITask::setAIChanCalScaleType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIChanCalScaleType(task, channel, data));}
void NITask::resetAIChanCalScaleType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalScaleType(task, channel));}
void NITask::getAIChanCalTablePreScaledVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIChanCalTablePreScaledVals(task, channel, data, arraySizeInElements));}
void NITask::setAIChanCalTablePreScaledVals(const char channel[], float64 *data,
					 uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIChanCalTablePreScaledVals(task, channel, data, arraySizeInElements));}
void NITask::resetAIChanCalTablePreScaledVals(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalTablePreScaledVals(task, channel));}
void NITask::getAIChanCalTableScaledVals(const char channel[], float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIChanCalTableScaledVals(task, channel, data, arraySizeInElements));}
void NITask::setAIChanCalTableScaledVals(const char channel[], float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIChanCalTableScaledVals(task, channel, data, arraySizeInElements));}
void NITask::resetAIChanCalTableScaledVals(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalTableScaledVals(task, channel));}
void NITask::getAIChanCalPolyForwardCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIChanCalPolyForwardCoeff(task, channel, data, arraySizeInElements));}
void NITask::setAIChanCalPolyForwardCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIChanCalPolyForwardCoeff(task, channel, data, arraySizeInElements));}
void NITask::resetAIChanCalPolyForwardCoeff(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalPolyForwardCoeff(task, channel));}
void NITask::getAIChanCalPolyReverseCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIChanCalPolyReverseCoeff(task, channel, data, arraySizeInElements));}
void NITask::setAIChanCalPolyReverseCoeff(const char channel[], float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIChanCalPolyReverseCoeff(task, channel, data, arraySizeInElements));}
void NITask::resetAIChanCalPolyReverseCoeff(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalPolyReverseCoeff(task, channel));}
QString NITask::getAIChanCalOperatorName(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIChanCalOperatorName(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAIChanCalOperatorName(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetAIChanCalOperatorName(task, channel, data));}
void NITask::resetAIChanCalOperatorName(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalOperatorName(task, channel));}
QString NITask::getAIChanCalDesc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIChanCalDesc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAIChanCalDesc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetAIChanCalDesc(task, channel, data));}
void NITask::resetAIChanCalDesc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalDesc(task, channel));}
void NITask::getAIChanCalVerifRefVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIChanCalVerifRefVals(task, channel, data, arraySizeInElements));}
void NITask::setAIChanCalVerifRefVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIChanCalVerifRefVals(task, channel, data, arraySizeInElements));}
void NITask::resetAIChanCalVerifRefVals(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalVerifRefVals(task, channel));}
void NITask::getAIChanCalVerifAcqVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIChanCalVerifAcqVals(task, channel, data, arraySizeInElements));}
void NITask::setAIChanCalVerifAcqVals(const char channel[], float64 *data,
				   uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAIChanCalVerifAcqVals(task, channel, data, arraySizeInElements));}
void NITask::resetAIChanCalVerifAcqVals(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChanCalVerifAcqVals(task, channel));}
void NITask::getAIRngHigh(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIRngHigh(task, channel, data));}
void NITask::setAIRngHigh(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIRngHigh(task, channel, data));}
void NITask::resetAIRngHigh(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRngHigh(task, channel));}
void NITask::getAIRngLow(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIRngLow(task, channel, data));}
void NITask::setAIRngLow(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIRngLow(task, channel, data));}
void NITask::resetAIRngLow(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRngLow(task, channel));}
void NITask::getAIDCOffset(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDCOffset(task, channel, data));}
void NITask::setAIDCOffset(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDCOffset(task, channel, data));}
void NITask::resetAIDCOffset(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDCOffset(task, channel));}
void NITask::getAIGain(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIGain(task, channel, data));}
void NITask::setAIGain(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIGain(task, channel, data));}
void NITask::resetAIGain(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIGain(task, channel));}
void NITask::getAISampAndHoldEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAISampAndHoldEnable(task, channel, data));}
void NITask::setAISampAndHoldEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAISampAndHoldEnable(task, channel, data));}
void NITask::resetAISampAndHoldEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAISampAndHoldEnable(task, channel));}
void NITask::getAIAutoZeroMode(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIAutoZeroMode(task, channel, data));}
void NITask::setAIAutoZeroMode(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIAutoZeroMode(task, channel, data));}
void NITask::resetAIAutoZeroMode(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIAutoZeroMode(task, channel));}
void NITask::getAIChopEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIChopEnable(task, channel, data));}
void NITask::setAIChopEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIChopEnable(task, channel, data));}
void NITask::resetAIChopEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIChopEnable(task, channel));}
void NITask::getAIDataXferMaxRate(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIDataXferMaxRate(task, channel, data));}
void NITask::setAIDataXferMaxRate(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAIDataXferMaxRate(task, channel, data));}
void NITask::resetAIDataXferMaxRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDataXferMaxRate(task, channel));}
void NITask::getAIDataXferMech(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIDataXferMech(task, channel, data));}
void NITask::setAIDataXferMech(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIDataXferMech(task, channel, data));}
void NITask::resetAIDataXferMech(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDataXferMech(task, channel));}
void NITask::getAIDataXferReqCond(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIDataXferReqCond(task, channel, data));}
void NITask::setAIDataXferReqCond(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIDataXferReqCond(task, channel, data));}
void NITask::resetAIDataXferReqCond(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDataXferReqCond(task, channel));}
void NITask::getAIDataXferCustomThreshold(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIDataXferCustomThreshold(task, channel, data));}
void NITask::setAIDataXferCustomThreshold(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIDataXferCustomThreshold(task, channel, data));}
void NITask::resetAIDataXferCustomThreshold(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIDataXferCustomThreshold(task, channel));}
void NITask::getAIUsbXferReqSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIUsbXferReqSize(task, channel, data));}
void NITask::setAIUsbXferReqSize(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIUsbXferReqSize(task, channel, data));}
void NITask::resetAIUsbXferReqSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIUsbXferReqSize(task, channel));}
void NITask::getAIUsbXferReqCount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIUsbXferReqCount(task, channel, data));}
void NITask::setAIUsbXferReqCount(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIUsbXferReqCount(task, channel, data));}
void NITask::resetAIUsbXferReqCount(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIUsbXferReqCount(task, channel));}
void NITask::getAIMemMapEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIMemMapEnable(task, channel, data));}
void NITask::setAIMemMapEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIMemMapEnable(task, channel, data));}
void NITask::resetAIMemMapEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIMemMapEnable(task, channel));}
void NITask::getAIRawDataCompressionType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIRawDataCompressionType(task, channel, data));}
void NITask::setAIRawDataCompressionType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAIRawDataCompressionType(task, channel, data));}
void NITask::resetAIRawDataCompressionType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIRawDataCompressionType(task, channel));}
void NITask::getAILossyLSBRemovalCompressedSampSize(const char channel[],
						 uInt32 *data) {
	DAQmxErrChk(DAQmxGetAILossyLSBRemovalCompressedSampSize(task, channel, data));}
void NITask::setAILossyLSBRemovalCompressedSampSize(const char channel[],
						 uInt32 data) {
	DAQmxErrChk(DAQmxSetAILossyLSBRemovalCompressedSampSize(task, channel, data));}
void NITask::resetAILossyLSBRemovalCompressedSampSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetAILossyLSBRemovalCompressedSampSize(task, channel));}
void NITask::getAIDevScalingCoeff(const char channel[], float64 *data,
			       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAIDevScalingCoeff(task, channel, data, arraySizeInElements));}
void NITask::getAIEnhancedAliasRejectionEnable(const char channel[],
					    bool32 *data) {
	DAQmxErrChk(DAQmxGetAIEnhancedAliasRejectionEnable(task, channel, data));}
void NITask::setAIEnhancedAliasRejectionEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIEnhancedAliasRejectionEnable(task, channel, data));}
void NITask::resetAIEnhancedAliasRejectionEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIEnhancedAliasRejectionEnable(task, channel));}
void NITask::getAIOpenChanDetectEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIOpenChanDetectEnable(task, channel, data));}
void NITask::setAIOpenChanDetectEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIOpenChanDetectEnable(task, channel, data));}
void NITask::resetAIOpenChanDetectEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIOpenChanDetectEnable(task, channel));}
void NITask::getAIInputLimitsFaultDetectUpperLimit(const char channel[],
						float64 *data) {
	DAQmxErrChk(DAQmxGetAIInputLimitsFaultDetectUpperLimit(task, channel, data));}
void NITask::setAIInputLimitsFaultDetectUpperLimit(const char channel[],
						float64 data) {
	DAQmxErrChk(DAQmxSetAIInputLimitsFaultDetectUpperLimit(task, channel, data));}
void NITask::resetAIInputLimitsFaultDetectUpperLimit(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIInputLimitsFaultDetectUpperLimit(task, channel));}
void NITask::getAIInputLimitsFaultDetectLowerLimit(const char channel[],
						float64 *data) {
	DAQmxErrChk(DAQmxGetAIInputLimitsFaultDetectLowerLimit(task, channel, data));}
void NITask::setAIInputLimitsFaultDetectLowerLimit(const char channel[],
						float64 data) {
	DAQmxErrChk(DAQmxSetAIInputLimitsFaultDetectLowerLimit(task, channel, data));}
void NITask::resetAIInputLimitsFaultDetectLowerLimit(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIInputLimitsFaultDetectLowerLimit(task, channel));}
void NITask::getAIInputLimitsFaultDetectEnable(const char channel[],
					    bool32 *data) {
	DAQmxErrChk(DAQmxGetAIInputLimitsFaultDetectEnable(task, channel, data));}
void NITask::setAIInputLimitsFaultDetectEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIInputLimitsFaultDetectEnable(task, channel, data));}
void NITask::resetAIInputLimitsFaultDetectEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIInputLimitsFaultDetectEnable(task, channel));}
void NITask::getAIPowerSupplyFaultDetectEnable(const char channel[],
					    bool32 *data) {
	DAQmxErrChk(DAQmxGetAIPowerSupplyFaultDetectEnable(task, channel, data));}
void NITask::setAIPowerSupplyFaultDetectEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIPowerSupplyFaultDetectEnable(task, channel, data));}
void NITask::resetAIPowerSupplyFaultDetectEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIPowerSupplyFaultDetectEnable(task, channel));}
void NITask::getAIOvercurrentDetectEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIOvercurrentDetectEnable(task, channel, data));}
void NITask::setAIOvercurrentDetectEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIOvercurrentDetectEnable(task, channel, data));}
void NITask::resetAIOvercurrentDetectEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAIOvercurrentDetectEnable(task, channel));}
void NITask::getAOMax(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOMax(task, channel, data));}
void NITask::setAOMax(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOMax(task, channel, data));}
void NITask::resetAOMax(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOMax(task, channel));}
void NITask::getAOMin(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOMin(task, channel, data));}
void NITask::setAOMin(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOMin(task, channel, data));}
void NITask::resetAOMin(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOMin(task, channel));}
QString NITask::getAOCustomScaleName(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAOCustomScaleName(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAOCustomScaleName(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetAOCustomScaleName(task, channel, data));}
void NITask::resetAOCustomScaleName(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOCustomScaleName(task, channel));}
void NITask::getAOOutputType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOOutputType(task, channel, data));}
void NITask::getAOVoltageUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOVoltageUnits(task, channel, data));}
void NITask::setAOVoltageUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOVoltageUnits(task, channel, data));}
void NITask::resetAOVoltageUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOVoltageUnits(task, channel));}
void NITask::getAOVoltageCurrentLimit(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOVoltageCurrentLimit(task, channel, data));}
void NITask::setAOVoltageCurrentLimit(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOVoltageCurrentLimit(task, channel, data));}
void NITask::resetAOVoltageCurrentLimit(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOVoltageCurrentLimit(task, channel));}
void NITask::getAOCurrentUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOCurrentUnits(task, channel, data));}
void NITask::setAOCurrentUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOCurrentUnits(task, channel, data));}
void NITask::resetAOCurrentUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOCurrentUnits(task, channel));}
void NITask::getAOFuncGenType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOFuncGenType(task, channel, data));}
void NITask::setAOFuncGenType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOFuncGenType(task, channel, data));}
void NITask::resetAOFuncGenType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFuncGenType(task, channel));}
void NITask::getAOFuncGenFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOFuncGenFreq(task, channel, data));}
void NITask::setAOFuncGenFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOFuncGenFreq(task, channel, data));}
void NITask::resetAOFuncGenFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFuncGenFreq(task, channel));}
void NITask::getAOFuncGenAmplitude(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOFuncGenAmplitude(task, channel, data));}
void NITask::setAOFuncGenAmplitude(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOFuncGenAmplitude(task, channel, data));}
void NITask::resetAOFuncGenAmplitude(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFuncGenAmplitude(task, channel));}
void NITask::getAOFuncGenOffset(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOFuncGenOffset(task, channel, data));}
void NITask::setAOFuncGenOffset(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOFuncGenOffset(task, channel, data));}
void NITask::resetAOFuncGenOffset(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFuncGenOffset(task, channel));}
void NITask::getAOFuncGenSquareDutyCycle(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOFuncGenSquareDutyCycle(task, channel, data));}
void NITask::setAOFuncGenSquareDutyCycle(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOFuncGenSquareDutyCycle(task, channel, data));}
void NITask::resetAOFuncGenSquareDutyCycle(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFuncGenSquareDutyCycle(task, channel));}
void NITask::getAOFuncGenModulationType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOFuncGenModulationType(task, channel, data));}
void NITask::setAOFuncGenModulationType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOFuncGenModulationType(task, channel, data));}
void NITask::resetAOFuncGenModulationType(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFuncGenModulationType(task, channel));}
void NITask::getAOFuncGenFMDeviation(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOFuncGenFMDeviation(task, channel, data));}
void NITask::setAOFuncGenFMDeviation(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOFuncGenFMDeviation(task, channel, data));}
void NITask::resetAOFuncGenFMDeviation(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFuncGenFMDeviation(task, channel));}
void NITask::getAOOutputImpedance(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOOutputImpedance(task, channel, data));}
void NITask::setAOOutputImpedance(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOOutputImpedance(task, channel, data));}
void NITask::resetAOOutputImpedance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOOutputImpedance(task, channel));}
void NITask::getAOLoadImpedance(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOLoadImpedance(task, channel, data));}
void NITask::setAOLoadImpedance(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOLoadImpedance(task, channel, data));}
void NITask::resetAOLoadImpedance(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOLoadImpedance(task, channel));}
void NITask::getAOIdleOutputBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOIdleOutputBehavior(task, channel, data));}
void NITask::setAOIdleOutputBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOIdleOutputBehavior(task, channel, data));}
void NITask::resetAOIdleOutputBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOIdleOutputBehavior(task, channel));}
void NITask::getAOTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOTermCfg(task, channel, data));}
void NITask::setAOTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOTermCfg(task, channel, data));}
void NITask::resetAOTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOTermCfg(task, channel));}
void NITask::getAOResolutionUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOResolutionUnits(task, channel, data));}
void NITask::setAOResolutionUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOResolutionUnits(task, channel, data));}
void NITask::resetAOResolutionUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOResolutionUnits(task, channel));}
void NITask::getAOResolution(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOResolution(task, channel, data));}
void NITask::getAODACRngHigh(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAODACRngHigh(task, channel, data));}
void NITask::setAODACRngHigh(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAODACRngHigh(task, channel, data));}
void NITask::resetAODACRngHigh(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACRngHigh(task, channel));}
void NITask::getAODACRngLow(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAODACRngLow(task, channel, data));}
void NITask::setAODACRngLow(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAODACRngLow(task, channel, data));}
void NITask::resetAODACRngLow(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACRngLow(task, channel));}
void NITask::getAODACRefConnToGnd(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAODACRefConnToGnd(task, channel, data));}
void NITask::setAODACRefConnToGnd(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAODACRefConnToGnd(task, channel, data));}
void NITask::resetAODACRefConnToGnd(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACRefConnToGnd(task, channel));}
void NITask::getAODACRefAllowConnToGnd(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAODACRefAllowConnToGnd(task, channel, data));}
void NITask::setAODACRefAllowConnToGnd(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAODACRefAllowConnToGnd(task, channel, data));}
void NITask::resetAODACRefAllowConnToGnd(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACRefAllowConnToGnd(task, channel));}
void NITask::getAODACRefSrc(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAODACRefSrc(task, channel, data));}
void NITask::setAODACRefSrc(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAODACRefSrc(task, channel, data));}
void NITask::resetAODACRefSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACRefSrc(task, channel));}
QString NITask::getAODACRefExtSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAODACRefExtSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAODACRefExtSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetAODACRefExtSrc(task, channel, data));}
void NITask::resetAODACRefExtSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACRefExtSrc(task, channel));}
void NITask::getAODACRefVal(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAODACRefVal(task, channel, data));}
void NITask::setAODACRefVal(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAODACRefVal(task, channel, data));}
void NITask::resetAODACRefVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACRefVal(task, channel));}
void NITask::getAODACOffsetSrc(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAODACOffsetSrc(task, channel, data));}
void NITask::setAODACOffsetSrc(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAODACOffsetSrc(task, channel, data));}
void NITask::resetAODACOffsetSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACOffsetSrc(task, channel));}
QString NITask::getAODACOffsetExtSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAODACOffsetExtSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAODACOffsetExtSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetAODACOffsetExtSrc(task, channel, data));}
void NITask::resetAODACOffsetExtSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACOffsetExtSrc(task, channel));}
void NITask::getAODACOffsetVal(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAODACOffsetVal(task, channel, data));}
void NITask::setAODACOffsetVal(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAODACOffsetVal(task, channel, data));}
void NITask::resetAODACOffsetVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODACOffsetVal(task, channel));}
void NITask::getAOReglitchEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAOReglitchEnable(task, channel, data));}
void NITask::setAOReglitchEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAOReglitchEnable(task, channel, data));}
void NITask::resetAOReglitchEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOReglitchEnable(task, channel));}
void NITask::getAOFilterDelay(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOFilterDelay(task, channel, data));}
void NITask::setAOFilterDelay(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOFilterDelay(task, channel, data));}
void NITask::resetAOFilterDelay(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFilterDelay(task, channel));}
void NITask::getAOFilterDelayUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAOFilterDelayUnits(task, channel, data));}
void NITask::setAOFilterDelayUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAOFilterDelayUnits(task, channel, data));}
void NITask::resetAOFilterDelayUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFilterDelayUnits(task, channel));}
void NITask::getAOFilterDelayAdjustment(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOFilterDelayAdjustment(task, channel, data));}
void NITask::setAOFilterDelayAdjustment(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOFilterDelayAdjustment(task, channel, data));}
void NITask::resetAOFilterDelayAdjustment(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOFilterDelayAdjustment(task, channel));}
void NITask::getAOGain(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetAOGain(task, channel, data));}
void NITask::setAOGain(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetAOGain(task, channel, data));}
void NITask::resetAOGain(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOGain(task, channel));}
void NITask::getAOUseOnlyOnBrdMem(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAOUseOnlyOnBrdMem(task, channel, data));}
void NITask::setAOUseOnlyOnBrdMem(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAOUseOnlyOnBrdMem(task, channel, data));}
void NITask::resetAOUseOnlyOnBrdMem(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOUseOnlyOnBrdMem(task, channel));}
void NITask::getAODataXferMech(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAODataXferMech(task, channel, data));}
void NITask::setAODataXferMech(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAODataXferMech(task, channel, data));}
void NITask::resetAODataXferMech(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODataXferMech(task, channel));}
void NITask::getAODataXferReqCond(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetAODataXferReqCond(task, channel, data));}
void NITask::setAODataXferReqCond(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetAODataXferReqCond(task, channel, data));}
void NITask::resetAODataXferReqCond(const char channel[]) {
	DAQmxErrChk(DAQmxResetAODataXferReqCond(task, channel));}
void NITask::getAOUsbXferReqSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAOUsbXferReqSize(task, channel, data));}
void NITask::setAOUsbXferReqSize(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAOUsbXferReqSize(task, channel, data));}
void NITask::resetAOUsbXferReqSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOUsbXferReqSize(task, channel));}
void NITask::getAOUsbXferReqCount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAOUsbXferReqCount(task, channel, data));}
void NITask::setAOUsbXferReqCount(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAOUsbXferReqCount(task, channel, data));}
void NITask::resetAOUsbXferReqCount(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOUsbXferReqCount(task, channel));}
void NITask::getAOMemMapEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAOMemMapEnable(task, channel, data));}
void NITask::setAOMemMapEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAOMemMapEnable(task, channel, data));}
void NITask::resetAOMemMapEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOMemMapEnable(task, channel));}
void NITask::getAODevScalingCoeff(const char channel[], float64 *data,
			       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAODevScalingCoeff(task, channel, data, arraySizeInElements));}
void NITask::getAOEnhancedImageRejectionEnable(const char channel[],
					    bool32 *data) {
	DAQmxErrChk(DAQmxGetAOEnhancedImageRejectionEnable(task, channel, data));}
void NITask::setAOEnhancedImageRejectionEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetAOEnhancedImageRejectionEnable(task, channel, data));}
void NITask::resetAOEnhancedImageRejectionEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetAOEnhancedImageRejectionEnable(task, channel));}
void NITask::getDIInvertLines(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDIInvertLines(task, channel, data));}
void NITask::setDIInvertLines(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDIInvertLines(task, channel, data));}
void NITask::resetDIInvertLines(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIInvertLines(task, channel));}
void NITask::getDINumLines(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetDINumLines(task, channel, data));}
void NITask::getDIDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDIDigFltrEnable(task, channel, data));}
void NITask::setDIDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDIDigFltrEnable(task, channel, data));}
void NITask::resetDIDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDigFltrEnable(task, channel));}
void NITask::getDIDigFltrMinPulseWidth(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetDIDigFltrMinPulseWidth(task, channel, data));}
void NITask::setDIDigFltrMinPulseWidth(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetDIDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetDIDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDigFltrMinPulseWidth(task, channel));}
void NITask::getDIDigFltrEnableBusMode(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDIDigFltrEnableBusMode(task, channel, data));}
void NITask::setDIDigFltrEnableBusMode(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDIDigFltrEnableBusMode(task, channel, data));}
void NITask::resetDIDigFltrEnableBusMode(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDigFltrEnableBusMode(task, channel));}
QString NITask::getDIDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetDIDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDIDigFltrTimebaseSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetDIDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetDIDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDigFltrTimebaseSrc(task, channel));}
void NITask::getDIDigFltrTimebaseRate(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetDIDigFltrTimebaseRate(task, channel, data));}
void NITask::setDIDigFltrTimebaseRate(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetDIDigFltrTimebaseRate(task, channel, data));}
void NITask::resetDIDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDigFltrTimebaseRate(task, channel));}
void NITask::getDIDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDIDigSyncEnable(task, channel, data));}
void NITask::setDIDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDIDigSyncEnable(task, channel, data));}
void NITask::resetDIDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDigSyncEnable(task, channel));}
void NITask::getDITristate(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDITristate(task, channel, data));}
void NITask::setDITristate(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDITristate(task, channel, data));}
void NITask::resetDITristate(const char channel[]) {
	DAQmxErrChk(DAQmxResetDITristate(task, channel));}
void NITask::getDILogicFamily(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDILogicFamily(task, channel, data));}
void NITask::setDILogicFamily(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDILogicFamily(task, channel, data));}
void NITask::resetDILogicFamily(const char channel[]) {
	DAQmxErrChk(DAQmxResetDILogicFamily(task, channel));}
void NITask::getDIDataXferMech(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDIDataXferMech(task, channel, data));}
void NITask::setDIDataXferMech(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDIDataXferMech(task, channel, data));}
void NITask::resetDIDataXferMech(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDataXferMech(task, channel));}
void NITask::getDIDataXferReqCond(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDIDataXferReqCond(task, channel, data));}
void NITask::setDIDataXferReqCond(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDIDataXferReqCond(task, channel, data));}
void NITask::resetDIDataXferReqCond(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIDataXferReqCond(task, channel));}
void NITask::getDIUsbXferReqSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetDIUsbXferReqSize(task, channel, data));}
void NITask::setDIUsbXferReqSize(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetDIUsbXferReqSize(task, channel, data));}
void NITask::resetDIUsbXferReqSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIUsbXferReqSize(task, channel));}
void NITask::getDIUsbXferReqCount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetDIUsbXferReqCount(task, channel, data));}
void NITask::setDIUsbXferReqCount(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetDIUsbXferReqCount(task, channel, data));}
void NITask::resetDIUsbXferReqCount(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIUsbXferReqCount(task, channel));}
void NITask::getDIMemMapEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDIMemMapEnable(task, channel, data));}
void NITask::setDIMemMapEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDIMemMapEnable(task, channel, data));}
void NITask::resetDIMemMapEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIMemMapEnable(task, channel));}
void NITask::getDIAcquireOn(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDIAcquireOn(task, channel, data));}
void NITask::setDIAcquireOn(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDIAcquireOn(task, channel, data));}
void NITask::resetDIAcquireOn(const char channel[]) {
	DAQmxErrChk(DAQmxResetDIAcquireOn(task, channel));}
void NITask::getDOOutputDriveType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDOOutputDriveType(task, channel, data));}
void NITask::setDOOutputDriveType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDOOutputDriveType(task, channel, data));}
void NITask::resetDOOutputDriveType(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOOutputDriveType(task, channel));}
void NITask::getDOInvertLines(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDOInvertLines(task, channel, data));}
void NITask::setDOInvertLines(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDOInvertLines(task, channel, data));}
void NITask::resetDOInvertLines(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOInvertLines(task, channel));}
void NITask::getDONumLines(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetDONumLines(task, channel, data));}
void NITask::getDOTristate(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDOTristate(task, channel, data));}
void NITask::setDOTristate(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDOTristate(task, channel, data));}
void NITask::resetDOTristate(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOTristate(task, channel));}
void NITask::getDOLineStatesStartState(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDOLineStatesStartState(task, channel, data));}
void NITask::setDOLineStatesStartState(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDOLineStatesStartState(task, channel, data));}
void NITask::resetDOLineStatesStartState(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOLineStatesStartState(task, channel));}
void NITask::getDOLineStatesPausedState(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDOLineStatesPausedState(task, channel, data));}
void NITask::setDOLineStatesPausedState(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDOLineStatesPausedState(task, channel, data));}
void NITask::resetDOLineStatesPausedState(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOLineStatesPausedState(task, channel));}
void NITask::getDOLineStatesDoneState(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDOLineStatesDoneState(task, channel, data));}
void NITask::setDOLineStatesDoneState(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDOLineStatesDoneState(task, channel, data));}
void NITask::resetDOLineStatesDoneState(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOLineStatesDoneState(task, channel));}
void NITask::getDOLogicFamily(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDOLogicFamily(task, channel, data));}
void NITask::setDOLogicFamily(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDOLogicFamily(task, channel, data));}
void NITask::resetDOLogicFamily(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOLogicFamily(task, channel));}
void NITask::getDOOvercurrentLimit(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetDOOvercurrentLimit(task, channel, data));}
void NITask::setDOOvercurrentLimit(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetDOOvercurrentLimit(task, channel, data));}
void NITask::resetDOOvercurrentLimit(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOOvercurrentLimit(task, channel));}
void NITask::getDOOvercurrentAutoReenable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDOOvercurrentAutoReenable(task, channel, data));}
void NITask::setDOOvercurrentAutoReenable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDOOvercurrentAutoReenable(task, channel, data));}
void NITask::resetDOOvercurrentAutoReenable(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOOvercurrentAutoReenable(task, channel));}
void NITask::getDOOvercurrentReenablePeriod(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetDOOvercurrentReenablePeriod(task, channel, data));}
void NITask::setDOOvercurrentReenablePeriod(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetDOOvercurrentReenablePeriod(task, channel, data));}
void NITask::resetDOOvercurrentReenablePeriod(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOOvercurrentReenablePeriod(task, channel));}
void NITask::getDOUseOnlyOnBrdMem(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDOUseOnlyOnBrdMem(task, channel, data));}
void NITask::setDOUseOnlyOnBrdMem(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDOUseOnlyOnBrdMem(task, channel, data));}
void NITask::resetDOUseOnlyOnBrdMem(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOUseOnlyOnBrdMem(task, channel));}
void NITask::getDODataXferMech(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDODataXferMech(task, channel, data));}
void NITask::setDODataXferMech(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDODataXferMech(task, channel, data));}
void NITask::resetDODataXferMech(const char channel[]) {
	DAQmxErrChk(DAQmxResetDODataXferMech(task, channel));}
void NITask::getDODataXferReqCond(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDODataXferReqCond(task, channel, data));}
void NITask::setDODataXferReqCond(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDODataXferReqCond(task, channel, data));}
void NITask::resetDODataXferReqCond(const char channel[]) {
	DAQmxErrChk(DAQmxResetDODataXferReqCond(task, channel));}
void NITask::getDOUsbXferReqSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetDOUsbXferReqSize(task, channel, data));}
void NITask::setDOUsbXferReqSize(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetDOUsbXferReqSize(task, channel, data));}
void NITask::resetDOUsbXferReqSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOUsbXferReqSize(task, channel));}
void NITask::getDOUsbXferReqCount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetDOUsbXferReqCount(task, channel, data));}
void NITask::setDOUsbXferReqCount(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetDOUsbXferReqCount(task, channel, data));}
void NITask::resetDOUsbXferReqCount(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOUsbXferReqCount(task, channel));}
void NITask::getDOMemMapEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetDOMemMapEnable(task, channel, data));}
void NITask::setDOMemMapEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetDOMemMapEnable(task, channel, data));}
void NITask::resetDOMemMapEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOMemMapEnable(task, channel));}
void NITask::getDOGenerateOn(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetDOGenerateOn(task, channel, data));}
void NITask::setDOGenerateOn(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetDOGenerateOn(task, channel, data));}
void NITask::resetDOGenerateOn(const char channel[]) {
	DAQmxErrChk(DAQmxResetDOGenerateOn(task, channel));}
void NITask::getCIMax(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIMax(task, channel, data));}
void NITask::setCIMax(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIMax(task, channel, data));}
void NITask::resetCIMax(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIMax(task, channel));}
void NITask::getCIMin(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIMin(task, channel, data));}
void NITask::setCIMin(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIMin(task, channel, data));}
void NITask::resetCIMin(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIMin(task, channel));}
QString NITask::getCICustomScaleName(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICustomScaleName(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICustomScaleName(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCICustomScaleName(task, channel, data));}
void NITask::resetCICustomScaleName(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICustomScaleName(task, channel));}
void NITask::getCIMeasType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIMeasType(task, channel, data));}
void NITask::getCIFreqUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqUnits(task, channel, data));}
void NITask::setCIFreqUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIFreqUnits(task, channel, data));}
void NITask::resetCIFreqUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqUnits(task, channel));}
QString NITask::getCIFreqTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIFreqTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIFreqTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIFreqTerm(task, channel, data));}
void NITask::resetCIFreqTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqTerm(task, channel));}
void NITask::getCIFreqTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqTermCfg(task, channel, data));}
void NITask::setCIFreqTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIFreqTermCfg(task, channel, data));}
void NITask::resetCIFreqTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqTermCfg(task, channel));}
void NITask::getCIFreqLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqLogicLvlBehavior(task, channel, data));}
void NITask::setCIFreqLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIFreqLogicLvlBehavior(task, channel, data));}
void NITask::resetCIFreqLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqLogicLvlBehavior(task, channel));}
void NITask::getCIFreqDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqDigFltrEnable(task, channel, data));}
void NITask::setCIFreqDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIFreqDigFltrEnable(task, channel, data));}
void NITask::resetCIFreqDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqDigFltrEnable(task, channel));}
void NITask::getCIFreqDigFltrMinPulseWidth(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIFreqDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIFreqDigFltrMinPulseWidth(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIFreqDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIFreqDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIFreqDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIFreqDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIFreqDigFltrTimebaseSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIFreqDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIFreqDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqDigFltrTimebaseSrc(task, channel));}
void NITask::getCIFreqDigFltrTimebaseRate(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIFreqDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIFreqDigFltrTimebaseRate(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIFreqDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIFreqDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqDigFltrTimebaseRate(task, channel));}
void NITask::getCIFreqDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqDigSyncEnable(task, channel, data));}
void NITask::setCIFreqDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIFreqDigSyncEnable(task, channel, data));}
void NITask::resetCIFreqDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqDigSyncEnable(task, channel));}
void NITask::getCIFreqStartingEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqStartingEdge(task, channel, data));}
void NITask::setCIFreqStartingEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIFreqStartingEdge(task, channel, data));}
void NITask::resetCIFreqStartingEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqStartingEdge(task, channel));}
void NITask::getCIFreqMeasMeth(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqMeasMeth(task, channel, data));}
void NITask::setCIFreqMeasMeth(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIFreqMeasMeth(task, channel, data));}
void NITask::resetCIFreqMeasMeth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqMeasMeth(task, channel));}
void NITask::getCIFreqEnableAveraging(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqEnableAveraging(task, channel, data));}
void NITask::setCIFreqEnableAveraging(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIFreqEnableAveraging(task, channel, data));}
void NITask::resetCIFreqEnableAveraging(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqEnableAveraging(task, channel));}
void NITask::getCIFreqMeasTime(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIFreqMeasTime(task, channel, data));}
void NITask::setCIFreqMeasTime(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIFreqMeasTime(task, channel, data));}
void NITask::resetCIFreqMeasTime(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqMeasTime(task, channel));}
void NITask::getCIFreqDiv(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIFreqDiv(task, channel, data));}
void NITask::setCIFreqDiv(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCIFreqDiv(task, channel, data));}
void NITask::resetCIFreqDiv(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIFreqDiv(task, channel));}
void NITask::getCIPeriodUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodUnits(task, channel, data));}
void NITask::setCIPeriodUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodUnits(task, channel, data));}
void NITask::resetCIPeriodUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodUnits(task, channel));}
QString NITask::getCIPeriodTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPeriodTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPeriodTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIPeriodTerm(task, channel, data));}
void NITask::resetCIPeriodTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodTerm(task, channel));}
void NITask::getCIPeriodTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodTermCfg(task, channel, data));}
void NITask::setCIPeriodTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodTermCfg(task, channel, data));}
void NITask::resetCIPeriodTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodTermCfg(task, channel));}
void NITask::getCIPeriodLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodLogicLvlBehavior(task, channel, data));}
void NITask::setCIPeriodLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodLogicLvlBehavior(task, channel, data));}
void NITask::resetCIPeriodLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodLogicLvlBehavior(task, channel));}
void NITask::getCIPeriodDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodDigFltrEnable(task, channel, data));}
void NITask::setCIPeriodDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodDigFltrEnable(task, channel, data));}
void NITask::resetCIPeriodDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodDigFltrEnable(task, channel));}
void NITask::getCIPeriodDigFltrMinPulseWidth(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIPeriodDigFltrMinPulseWidth(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIPeriodDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIPeriodDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIPeriodDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPeriodDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPeriodDigFltrTimebaseSrc(const char channel[],
					const char *data) {
	DAQmxErrChk(DAQmxSetCIPeriodDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIPeriodDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodDigFltrTimebaseSrc(task, channel));}
void NITask::getCIPeriodDigFltrTimebaseRate(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIPeriodDigFltrTimebaseRate(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIPeriodDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIPeriodDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodDigFltrTimebaseRate(task, channel));}
void NITask::getCIPeriodDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodDigSyncEnable(task, channel, data));}
void NITask::setCIPeriodDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodDigSyncEnable(task, channel, data));}
void NITask::resetCIPeriodDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodDigSyncEnable(task, channel));}
void NITask::getCIPeriodStartingEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodStartingEdge(task, channel, data));}
void NITask::setCIPeriodStartingEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodStartingEdge(task, channel, data));}
void NITask::resetCIPeriodStartingEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodStartingEdge(task, channel));}
void NITask::getCIPeriodMeasMeth(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodMeasMeth(task, channel, data));}
void NITask::setCIPeriodMeasMeth(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodMeasMeth(task, channel, data));}
void NITask::resetCIPeriodMeasMeth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodMeasMeth(task, channel));}
void NITask::getCIPeriodEnableAveraging(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodEnableAveraging(task, channel, data));}
void NITask::setCIPeriodEnableAveraging(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodEnableAveraging(task, channel, data));}
void NITask::resetCIPeriodEnableAveraging(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodEnableAveraging(task, channel));}
void NITask::getCIPeriodMeasTime(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodMeasTime(task, channel, data));}
void NITask::setCIPeriodMeasTime(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIPeriodMeasTime(task, channel, data));}
void NITask::resetCIPeriodMeasTime(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodMeasTime(task, channel));}
void NITask::getCIPeriodDiv(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIPeriodDiv(task, channel, data));}
void NITask::setCIPeriodDiv(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCIPeriodDiv(task, channel, data));}
void NITask::resetCIPeriodDiv(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPeriodDiv(task, channel));}
QString NITask::getCICountEdgesTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesTerm(task, channel, data));}
void NITask::resetCICountEdgesTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesTerm(task, channel));}
void NITask::getCICountEdgesTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesTermCfg(task, channel, data));}
void NITask::setCICountEdgesTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesTermCfg(task, channel, data));}
void NITask::resetCICountEdgesTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesTermCfg(task, channel));}
void NITask::getCICountEdgesLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesLogicLvlBehavior(task, channel, data));}
void NITask::setCICountEdgesLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesLogicLvlBehavior(task, channel, data));}
void NITask::resetCICountEdgesLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesLogicLvlBehavior(task, channel));}
void NITask::getCICountEdgesDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesDigFltrEnable(task, channel, data));}
void NITask::setCICountEdgesDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesDigFltrEnable(task, channel, data));}
void NITask::resetCICountEdgesDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesDigFltrEnable(task, channel));}
void NITask::getCICountEdgesDigFltrMinPulseWidth(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCICountEdgesDigFltrMinPulseWidth(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCICountEdgesDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesDigFltrMinPulseWidth(task, channel));}
QString NITask::getCICountEdgesDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesDigFltrTimebaseSrc(const char channel[],
					    const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCICountEdgesDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesDigFltrTimebaseSrc(task, channel));}
void NITask::getCICountEdgesDigFltrTimebaseRate(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesDigFltrTimebaseRate(task, channel, data));}
void NITask::setCICountEdgesDigFltrTimebaseRate(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCICountEdgesDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesDigFltrTimebaseRate(task, channel));}
void NITask::getCICountEdgesDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesDigSyncEnable(task, channel, data));}
void NITask::setCICountEdgesDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesDigSyncEnable(task, channel, data));}
void NITask::resetCICountEdgesDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesDigSyncEnable(task, channel));}
void NITask::getCICountEdgesDir(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesDir(task, channel, data));}
void NITask::setCICountEdgesDir(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesDir(task, channel, data));}
void NITask::resetCICountEdgesDir(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesDir(task, channel));}
QString NITask::getCICountEdgesDirTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesDirTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesDirTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesDirTerm(task, channel, data));}
void NITask::resetCICountEdgesDirTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesDirTerm(task, channel));}
void NITask::getCICountEdgesCountDirTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountDirTermCfg(task, channel, data));}
void NITask::setCICountEdgesCountDirTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountDirTermCfg(task, channel, data));}
void NITask::resetCICountEdgesCountDirTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountDirTermCfg(task, channel));}
void NITask::getCICountEdgesCountDirLogicLvlBehavior(const char channel[],
						  int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountDirLogicLvlBehavior(task, channel, data));}
void NITask::setCICountEdgesCountDirLogicLvlBehavior(const char channel[],
						  int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountDirLogicLvlBehavior(task, channel, data));}
void NITask::resetCICountEdgesCountDirLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountDirLogicLvlBehavior(task, channel));}
void NITask::getCICountEdgesCountDirDigFltrEnable(const char channel[],
					       bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountDirDigFltrEnable(task, channel, data));}
void NITask::setCICountEdgesCountDirDigFltrEnable(const char channel[],
					       bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountDirDigFltrEnable(task, channel, data));}
void NITask::resetCICountEdgesCountDirDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountDirDigFltrEnable(task, channel));}
void NITask::getCICountEdgesCountDirDigFltrMinPulseWidth(const char channel[],
						      float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCICountEdgesCountDirDigFltrMinPulseWidth(const char channel[],
						      float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCICountEdgesCountDirDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth(task, channel));}
QString NITask::getCICountEdgesCountDirDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesCountDirDigFltrTimebaseSrc(const char channel[],
						    const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCICountEdgesCountDirDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc(task, channel));}
void NITask::getCICountEdgesCountDirDigFltrTimebaseRate(const char channel[],
						     float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate(task, channel, data));}
void NITask::setCICountEdgesCountDirDigFltrTimebaseRate(const char channel[],
						     float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCICountEdgesCountDirDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate(task, channel));}
void NITask::getCICountEdgesCountDirDigSyncEnable(const char channel[],
					       bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountDirDigSyncEnable(task, channel, data));}
void NITask::setCICountEdgesCountDirDigSyncEnable(const char channel[],
					       bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountDirDigSyncEnable(task, channel, data));}
void NITask::resetCICountEdgesCountDirDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountDirDigSyncEnable(task, channel));}
void NITask::getCICountEdgesInitialCnt(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesInitialCnt(task, channel, data));}
void NITask::setCICountEdgesInitialCnt(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesInitialCnt(task, channel, data));}
void NITask::resetCICountEdgesInitialCnt(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesInitialCnt(task, channel));}
void NITask::getCICountEdgesActiveEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesActiveEdge(task, channel, data));}
void NITask::setCICountEdgesActiveEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesActiveEdge(task, channel, data));}
void NITask::resetCICountEdgesActiveEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesActiveEdge(task, channel));}
void NITask::getCICountEdgesCountResetEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetEnable(task, channel, data));}
void NITask::setCICountEdgesCountResetEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetEnable(task, channel, data));}
void NITask::resetCICountEdgesCountResetEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetEnable(task, channel));}
void NITask::getCICountEdgesCountResetResetCount(const char channel[],
					      uInt32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetResetCount(task, channel, data));}
void NITask::setCICountEdgesCountResetResetCount(const char channel[],
					      uInt32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetResetCount(task, channel, data));}
void NITask::resetCICountEdgesCountResetResetCount(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetResetCount(task, channel));}
QString NITask::getCICountEdgesCountResetTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesCountResetTerm(const char channel[],
					const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetTerm(task, channel, data));}
void NITask::resetCICountEdgesCountResetTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetTerm(task, channel));}
void NITask::getCICountEdgesCountResetTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetTermCfg(task, channel, data));}
void NITask::setCICountEdgesCountResetTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetTermCfg(task, channel, data));}
void NITask::resetCICountEdgesCountResetTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetTermCfg(task, channel));}
void NITask::getCICountEdgesCountResetLogicLvlBehavior(const char channel[],
						    int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetLogicLvlBehavior(task, channel, data));}
void NITask::setCICountEdgesCountResetLogicLvlBehavior(const char channel[],
						    int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetLogicLvlBehavior(task, channel, data));}
void NITask::resetCICountEdgesCountResetLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetLogicLvlBehavior(task, channel));}
void NITask::getCICountEdgesCountResetDigFltrEnable(const char channel[],
						 bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetDigFltrEnable(task, channel, data));}
void NITask::setCICountEdgesCountResetDigFltrEnable(const char channel[],
						 bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetDigFltrEnable(task, channel, data));}
void NITask::resetCICountEdgesCountResetDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetDigFltrEnable(task, channel));}
void NITask::getCICountEdgesCountResetDigFltrMinPulseWidth(const char channel[],
							float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCICountEdgesCountResetDigFltrMinPulseWidth(const char channel[],
							float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCICountEdgesCountResetDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth(task, channel));}
QString NITask::getCICountEdgesCountResetDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesCountResetDigFltrTimebaseSrc(const char channel[],
						      const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCICountEdgesCountResetDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc(task, channel));}
void NITask::getCICountEdgesCountResetDigFltrTimebaseRate(const char channel[],
						       float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate(task, channel, data));}
void NITask::setCICountEdgesCountResetDigFltrTimebaseRate(const char channel[],
						       float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCICountEdgesCountResetDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate(task, channel));}
void NITask::getCICountEdgesCountResetDigSyncEnable(const char channel[],
						 bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetDigSyncEnable(task, channel, data));}
void NITask::setCICountEdgesCountResetDigSyncEnable(const char channel[],
						 bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetDigSyncEnable(task, channel, data));}
void NITask::resetCICountEdgesCountResetDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetDigSyncEnable(task, channel));}
void NITask::getCICountEdgesCountResetActiveEdge(const char channel[],
					      int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesCountResetActiveEdge(task, channel, data));}
void NITask::setCICountEdgesCountResetActiveEdge(const char channel[],
					      int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesCountResetActiveEdge(task, channel, data));}
void NITask::resetCICountEdgesCountResetActiveEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesCountResetActiveEdge(task, channel));}
void NITask::getCICountEdgesGateEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesGateEnable(task, channel, data));}
void NITask::setCICountEdgesGateEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateEnable(task, channel, data));}
void NITask::resetCICountEdgesGateEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateEnable(task, channel));}
QString NITask::getCICountEdgesGateTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesGateTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesGateTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateTerm(task, channel, data));}
void NITask::resetCICountEdgesGateTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateTerm(task, channel));}
void NITask::getCICountEdgesGateTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesGateTermCfg(task, channel, data));}
void NITask::setCICountEdgesGateTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateTermCfg(task, channel, data));}
void NITask::resetCICountEdgesGateTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateTermCfg(task, channel));}
void NITask::getCICountEdgesGateLogicLvlBehavior(const char channel[],
					      int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesGateLogicLvlBehavior(task, channel, data));}
void NITask::setCICountEdgesGateLogicLvlBehavior(const char channel[],
					      int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateLogicLvlBehavior(task, channel, data));}
void NITask::resetCICountEdgesGateLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateLogicLvlBehavior(task, channel));}
void NITask::getCICountEdgesGateDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesGateDigFltrEnable(task, channel, data));}
void NITask::setCICountEdgesGateDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateDigFltrEnable(task, channel, data));}
void NITask::resetCICountEdgesGateDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateDigFltrEnable(task, channel));}
void NITask::getCICountEdgesGateDigFltrMinPulseWidth(const char channel[],
						  float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesGateDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCICountEdgesGateDigFltrMinPulseWidth(const char channel[],
						  float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCICountEdgesGateDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateDigFltrMinPulseWidth(task, channel));}
QString NITask::getCICountEdgesGateDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICountEdgesGateDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICountEdgesGateDigFltrTimebaseSrc(const char channel[],
						const char *data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCICountEdgesGateDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateDigFltrTimebaseSrc(task, channel));}
void NITask::getCICountEdgesGateDigFltrTimebaseRate(const char channel[],
						 float64 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesGateDigFltrTimebaseRate(task, channel, data));}
void NITask::setCICountEdgesGateDigFltrTimebaseRate(const char channel[],
						 float64 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCICountEdgesGateDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateDigFltrTimebaseRate(task, channel));}
void NITask::getCICountEdgesGateWhen(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICountEdgesGateWhen(task, channel, data));}
void NITask::setCICountEdgesGateWhen(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICountEdgesGateWhen(task, channel, data));}
void NITask::resetCICountEdgesGateWhen(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICountEdgesGateWhen(task, channel));}
QString NITask::getCIDutyCycleTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIDutyCycleTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIDutyCycleTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleTerm(task, channel, data));}
void NITask::resetCIDutyCycleTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleTerm(task, channel));}
void NITask::getCIDutyCycleTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIDutyCycleTermCfg(task, channel, data));}
void NITask::setCIDutyCycleTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleTermCfg(task, channel, data));}
void NITask::resetCIDutyCycleTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleTermCfg(task, channel));}
void NITask::getCIDutyCycleLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIDutyCycleLogicLvlBehavior(task, channel, data));}
void NITask::setCIDutyCycleLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleLogicLvlBehavior(task, channel, data));}
void NITask::resetCIDutyCycleLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleLogicLvlBehavior(task, channel));}
void NITask::getCIDutyCycleDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIDutyCycleDigFltrEnable(task, channel, data));}
void NITask::setCIDutyCycleDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleDigFltrEnable(task, channel, data));}
void NITask::resetCIDutyCycleDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleDigFltrEnable(task, channel));}
void NITask::getCIDutyCycleDigFltrMinPulseWidth(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetCIDutyCycleDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIDutyCycleDigFltrMinPulseWidth(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIDutyCycleDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIDutyCycleDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIDutyCycleDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIDutyCycleDigFltrTimebaseSrc(const char channel[],
					   const char *data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIDutyCycleDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleDigFltrTimebaseSrc(task, channel));}
void NITask::getCIDutyCycleDigFltrTimebaseRate(const char channel[],
					    float64 *data) {
	DAQmxErrChk(DAQmxGetCIDutyCycleDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIDutyCycleDigFltrTimebaseRate(const char channel[],
					    float64 data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIDutyCycleDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleDigFltrTimebaseRate(task, channel));}
void NITask::getCIDutyCycleStartingEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIDutyCycleStartingEdge(task, channel, data));}
void NITask::setCIDutyCycleStartingEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIDutyCycleStartingEdge(task, channel, data));}
void NITask::resetCIDutyCycleStartingEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDutyCycleStartingEdge(task, channel));}
void NITask::getCIAngEncoderUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIAngEncoderUnits(task, channel, data));}
void NITask::setCIAngEncoderUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIAngEncoderUnits(task, channel, data));}
void NITask::resetCIAngEncoderUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIAngEncoderUnits(task, channel));}
void NITask::getCIAngEncoderPulsesPerRev(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIAngEncoderPulsesPerRev(task, channel, data));}
void NITask::setCIAngEncoderPulsesPerRev(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCIAngEncoderPulsesPerRev(task, channel, data));}
void NITask::resetCIAngEncoderPulsesPerRev(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIAngEncoderPulsesPerRev(task, channel));}
void NITask::getCIAngEncoderInitialAngle(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIAngEncoderInitialAngle(task, channel, data));}
void NITask::setCIAngEncoderInitialAngle(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIAngEncoderInitialAngle(task, channel, data));}
void NITask::resetCIAngEncoderInitialAngle(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIAngEncoderInitialAngle(task, channel));}
void NITask::getCILinEncoderUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCILinEncoderUnits(task, channel, data));}
void NITask::setCILinEncoderUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCILinEncoderUnits(task, channel, data));}
void NITask::resetCILinEncoderUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCILinEncoderUnits(task, channel));}
void NITask::getCILinEncoderDistPerPulse(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCILinEncoderDistPerPulse(task, channel, data));}
void NITask::setCILinEncoderDistPerPulse(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCILinEncoderDistPerPulse(task, channel, data));}
void NITask::resetCILinEncoderDistPerPulse(const char channel[]) {
	DAQmxErrChk(DAQmxResetCILinEncoderDistPerPulse(task, channel));}
void NITask::getCILinEncoderInitialPos(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCILinEncoderInitialPos(task, channel, data));}
void NITask::setCILinEncoderInitialPos(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCILinEncoderInitialPos(task, channel, data));}
void NITask::resetCILinEncoderInitialPos(const char channel[]) {
	DAQmxErrChk(DAQmxResetCILinEncoderInitialPos(task, channel));}
void NITask::getCIEncoderDecodingType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderDecodingType(task, channel, data));}
void NITask::setCIEncoderDecodingType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderDecodingType(task, channel, data));}
void NITask::resetCIEncoderDecodingType(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderDecodingType(task, channel));}
QString NITask::getCIEncoderAInputTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIEncoderAInputTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIEncoderAInputTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputTerm(task, channel, data));}
void NITask::resetCIEncoderAInputTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputTerm(task, channel));}
void NITask::getCIEncoderAInputTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderAInputTermCfg(task, channel, data));}
void NITask::setCIEncoderAInputTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputTermCfg(task, channel, data));}
void NITask::resetCIEncoderAInputTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputTermCfg(task, channel));}
void NITask::getCIEncoderAInputLogicLvlBehavior(const char channel[],
					     int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderAInputLogicLvlBehavior(task, channel, data));}
void NITask::setCIEncoderAInputLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputLogicLvlBehavior(task, channel, data));}
void NITask::resetCIEncoderAInputLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputLogicLvlBehavior(task, channel));}
void NITask::getCIEncoderAInputDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderAInputDigFltrEnable(task, channel, data));}
void NITask::setCIEncoderAInputDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputDigFltrEnable(task, channel, data));}
void NITask::resetCIEncoderAInputDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputDigFltrEnable(task, channel));}
void NITask::getCIEncoderAInputDigFltrMinPulseWidth(const char channel[],
						 float64 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderAInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIEncoderAInputDigFltrMinPulseWidth(const char channel[],
						 float64 data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIEncoderAInputDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIEncoderAInputDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIEncoderAInputDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIEncoderAInputDigFltrTimebaseSrc(const char channel[],
					       const char *data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIEncoderAInputDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputDigFltrTimebaseSrc(task, channel));}
void NITask::getCIEncoderAInputDigFltrTimebaseRate(const char channel[],
						float64 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderAInputDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIEncoderAInputDigFltrTimebaseRate(const char channel[],
						float64 data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIEncoderAInputDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputDigFltrTimebaseRate(task, channel));}
void NITask::getCIEncoderAInputDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderAInputDigSyncEnable(task, channel, data));}
void NITask::setCIEncoderAInputDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderAInputDigSyncEnable(task, channel, data));}
void NITask::resetCIEncoderAInputDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderAInputDigSyncEnable(task, channel));}
QString NITask::getCIEncoderBInputTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIEncoderBInputTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIEncoderBInputTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputTerm(task, channel, data));}
void NITask::resetCIEncoderBInputTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputTerm(task, channel));}
void NITask::getCIEncoderBInputTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderBInputTermCfg(task, channel, data));}
void NITask::setCIEncoderBInputTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputTermCfg(task, channel, data));}
void NITask::resetCIEncoderBInputTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputTermCfg(task, channel));}
void NITask::getCIEncoderBInputLogicLvlBehavior(const char channel[],
					     int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderBInputLogicLvlBehavior(task, channel, data));}
void NITask::setCIEncoderBInputLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputLogicLvlBehavior(task, channel, data));}
void NITask::resetCIEncoderBInputLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputLogicLvlBehavior(task, channel));}
void NITask::getCIEncoderBInputDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderBInputDigFltrEnable(task, channel, data));}
void NITask::setCIEncoderBInputDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputDigFltrEnable(task, channel, data));}
void NITask::resetCIEncoderBInputDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputDigFltrEnable(task, channel));}
void NITask::getCIEncoderBInputDigFltrMinPulseWidth(const char channel[],
						 float64 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderBInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIEncoderBInputDigFltrMinPulseWidth(const char channel[],
						 float64 data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIEncoderBInputDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIEncoderBInputDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIEncoderBInputDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIEncoderBInputDigFltrTimebaseSrc(const char channel[],
					       const char *data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIEncoderBInputDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputDigFltrTimebaseSrc(task, channel));}
void NITask::getCIEncoderBInputDigFltrTimebaseRate(const char channel[],
						float64 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderBInputDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIEncoderBInputDigFltrTimebaseRate(const char channel[],
						float64 data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIEncoderBInputDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputDigFltrTimebaseRate(task, channel));}
void NITask::getCIEncoderBInputDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderBInputDigSyncEnable(task, channel, data));}
void NITask::setCIEncoderBInputDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderBInputDigSyncEnable(task, channel, data));}
void NITask::resetCIEncoderBInputDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderBInputDigSyncEnable(task, channel));}
QString NITask::getCIEncoderZInputTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIEncoderZInputTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIEncoderZInputTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputTerm(task, channel, data));}
void NITask::resetCIEncoderZInputTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputTerm(task, channel));}
void NITask::getCIEncoderZInputTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZInputTermCfg(task, channel, data));}
void NITask::setCIEncoderZInputTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputTermCfg(task, channel, data));}
void NITask::resetCIEncoderZInputTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputTermCfg(task, channel));}
void NITask::getCIEncoderZInputLogicLvlBehavior(const char channel[],
					     int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZInputLogicLvlBehavior(task, channel, data));}
void NITask::setCIEncoderZInputLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputLogicLvlBehavior(task, channel, data));}
void NITask::resetCIEncoderZInputLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputLogicLvlBehavior(task, channel));}
void NITask::getCIEncoderZInputDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZInputDigFltrEnable(task, channel, data));}
void NITask::setCIEncoderZInputDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputDigFltrEnable(task, channel, data));}
void NITask::resetCIEncoderZInputDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputDigFltrEnable(task, channel));}
void NITask::getCIEncoderZInputDigFltrMinPulseWidth(const char channel[],
						 float64 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIEncoderZInputDigFltrMinPulseWidth(const char channel[],
						 float64 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIEncoderZInputDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIEncoderZInputDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIEncoderZInputDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIEncoderZInputDigFltrTimebaseSrc(const char channel[],
					       const char *data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIEncoderZInputDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputDigFltrTimebaseSrc(task, channel));}
void NITask::getCIEncoderZInputDigFltrTimebaseRate(const char channel[],
						float64 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZInputDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIEncoderZInputDigFltrTimebaseRate(const char channel[],
						float64 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIEncoderZInputDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputDigFltrTimebaseRate(task, channel));}
void NITask::getCIEncoderZInputDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZInputDigSyncEnable(task, channel, data));}
void NITask::setCIEncoderZInputDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZInputDigSyncEnable(task, channel, data));}
void NITask::resetCIEncoderZInputDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZInputDigSyncEnable(task, channel));}
void NITask::getCIEncoderZIndexEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZIndexEnable(task, channel, data));}
void NITask::setCIEncoderZIndexEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZIndexEnable(task, channel, data));}
void NITask::resetCIEncoderZIndexEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZIndexEnable(task, channel));}
void NITask::getCIEncoderZIndexVal(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZIndexVal(task, channel, data));}
void NITask::setCIEncoderZIndexVal(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZIndexVal(task, channel, data));}
void NITask::resetCIEncoderZIndexVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZIndexVal(task, channel));}
void NITask::getCIEncoderZIndexPhase(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIEncoderZIndexPhase(task, channel, data));}
void NITask::setCIEncoderZIndexPhase(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIEncoderZIndexPhase(task, channel, data));}
void NITask::resetCIEncoderZIndexPhase(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIEncoderZIndexPhase(task, channel));}
void NITask::getCIPulseWidthUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthUnits(task, channel, data));}
void NITask::setCIPulseWidthUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthUnits(task, channel, data));}
void NITask::resetCIPulseWidthUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthUnits(task, channel));}
QString NITask::getCIPulseWidthTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseWidthTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseWidthTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthTerm(task, channel, data));}
void NITask::resetCIPulseWidthTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthTerm(task, channel));}
void NITask::getCIPulseWidthTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthTermCfg(task, channel, data));}
void NITask::setCIPulseWidthTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthTermCfg(task, channel, data));}
void NITask::resetCIPulseWidthTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthTermCfg(task, channel));}
void NITask::getCIPulseWidthLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthLogicLvlBehavior(task, channel, data));}
void NITask::setCIPulseWidthLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthLogicLvlBehavior(task, channel, data));}
void NITask::resetCIPulseWidthLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthLogicLvlBehavior(task, channel));}
void NITask::getCIPulseWidthDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthDigFltrEnable(task, channel, data));}
void NITask::setCIPulseWidthDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthDigFltrEnable(task, channel, data));}
void NITask::resetCIPulseWidthDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthDigFltrEnable(task, channel));}
void NITask::getCIPulseWidthDigFltrMinPulseWidth(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIPulseWidthDigFltrMinPulseWidth(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIPulseWidthDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIPulseWidthDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseWidthDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseWidthDigFltrTimebaseSrc(const char channel[],
					    const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIPulseWidthDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthDigFltrTimebaseSrc(task, channel));}
void NITask::getCIPulseWidthDigFltrTimebaseRate(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIPulseWidthDigFltrTimebaseRate(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIPulseWidthDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthDigFltrTimebaseRate(task, channel));}
void NITask::getCIPulseWidthDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthDigSyncEnable(task, channel, data));}
void NITask::setCIPulseWidthDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthDigSyncEnable(task, channel, data));}
void NITask::resetCIPulseWidthDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthDigSyncEnable(task, channel));}
void NITask::getCIPulseWidthStartingEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseWidthStartingEdge(task, channel, data));}
void NITask::setCIPulseWidthStartingEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseWidthStartingEdge(task, channel, data));}
void NITask::resetCIPulseWidthStartingEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseWidthStartingEdge(task, channel));}
void NITask::getCITimestampUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCITimestampUnits(task, channel, data));}
void NITask::setCITimestampUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCITimestampUnits(task, channel, data));}
void NITask::resetCITimestampUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITimestampUnits(task, channel));}
void NITask::getCITimestampInitialSeconds(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCITimestampInitialSeconds(task, channel, data));}
void NITask::setCITimestampInitialSeconds(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCITimestampInitialSeconds(task, channel, data));}
void NITask::resetCITimestampInitialSeconds(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITimestampInitialSeconds(task, channel));}
void NITask::getCIGPSSyncMethod(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIGPSSyncMethod(task, channel, data));}
void NITask::setCIGPSSyncMethod(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIGPSSyncMethod(task, channel, data));}
void NITask::resetCIGPSSyncMethod(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIGPSSyncMethod(task, channel));}
QString NITask::getCIGPSSyncSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIGPSSyncSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIGPSSyncSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIGPSSyncSrc(task, channel, data));}
void NITask::resetCIGPSSyncSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIGPSSyncSrc(task, channel));}
void NITask::getCIVelocityAngEncoderUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityAngEncoderUnits(task, channel, data));}
void NITask::setCIVelocityAngEncoderUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityAngEncoderUnits(task, channel, data));}
void NITask::resetCIVelocityAngEncoderUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityAngEncoderUnits(task, channel));}
void NITask::getCIVelocityAngEncoderPulsesPerRev(const char channel[],
					      uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityAngEncoderPulsesPerRev(task, channel, data));}
void NITask::setCIVelocityAngEncoderPulsesPerRev(const char channel[],
					      uInt32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityAngEncoderPulsesPerRev(task, channel, data));}
void NITask::resetCIVelocityAngEncoderPulsesPerRev(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityAngEncoderPulsesPerRev(task, channel));}
void NITask::getCIVelocityLinEncoderUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityLinEncoderUnits(task, channel, data));}
void NITask::setCIVelocityLinEncoderUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityLinEncoderUnits(task, channel, data));}
void NITask::resetCIVelocityLinEncoderUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityLinEncoderUnits(task, channel));}
void NITask::getCIVelocityLinEncoderDistPerPulse(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityLinEncoderDistPerPulse(task, channel, data));}
void NITask::setCIVelocityLinEncoderDistPerPulse(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetCIVelocityLinEncoderDistPerPulse(task, channel, data));}
void NITask::resetCIVelocityLinEncoderDistPerPulse(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityLinEncoderDistPerPulse(task, channel));}
void NITask::getCIVelocityEncoderDecodingType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderDecodingType(task, channel, data));}
void NITask::setCIVelocityEncoderDecodingType(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderDecodingType(task, channel, data));}
void NITask::resetCIVelocityEncoderDecodingType(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderDecodingType(task, channel));}
QString NITask::getCIVelocityEncoderAInputTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIVelocityEncoderAInputTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIVelocityEncoderAInputTerm(const char channel[],
					 const char *data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderAInputTerm(task, channel, data));}
void NITask::resetCIVelocityEncoderAInputTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderAInputTerm(task, channel));}
void NITask::getCIVelocityEncoderAInputTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderAInputTermCfg(task, channel, data));}
void NITask::setCIVelocityEncoderAInputTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderAInputTermCfg(task, channel, data));}
void NITask::resetCIVelocityEncoderAInputTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderAInputTermCfg(task, channel));}
void NITask::getCIVelocityEncoderAInputLogicLvlBehavior(const char channel[],
						     int32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderAInputLogicLvlBehavior(task, channel, data));}
void NITask::setCIVelocityEncoderAInputLogicLvlBehavior(const char channel[],
						     int32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderAInputLogicLvlBehavior(task, channel, data));}
void NITask::resetCIVelocityEncoderAInputLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderAInputLogicLvlBehavior(task, channel));}
void NITask::getCIVelocityEncoderAInputDigFltrEnable(const char channel[],
						  bool32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderAInputDigFltrEnable(task, channel, data));}
void NITask::setCIVelocityEncoderAInputDigFltrEnable(const char channel[],
						  bool32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderAInputDigFltrEnable(task, channel, data));}
void NITask::resetCIVelocityEncoderAInputDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderAInputDigFltrEnable(task, channel));}
void NITask::getCIVelocityEncoderAInputDigFltrMinPulseWidth(const char channel[],
							 float64 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIVelocityEncoderAInputDigFltrMinPulseWidth(const char channel[],
							 float64 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIVelocityEncoderAInputDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderAInputDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIVelocityEncoderAInputDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIVelocityEncoderAInputDigFltrTimebaseSrc(const char channel[],
						       const char *data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIVelocityEncoderAInputDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseSrc(task, channel));}
void NITask::getCIVelocityEncoderAInputDigFltrTimebaseRate(const char channel[],
							float64 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIVelocityEncoderAInputDigFltrTimebaseRate(const char channel[],
							float64 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIVelocityEncoderAInputDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderAInputDigFltrTimebaseRate(task, channel));}
QString NITask::getCIVelocityEncoderBInputTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIVelocityEncoderBInputTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIVelocityEncoderBInputTerm(const char channel[],
					 const char *data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderBInputTerm(task, channel, data));}
void NITask::resetCIVelocityEncoderBInputTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderBInputTerm(task, channel));}
void NITask::getCIVelocityEncoderBInputTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderBInputTermCfg(task, channel, data));}
void NITask::setCIVelocityEncoderBInputTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderBInputTermCfg(task, channel, data));}
void NITask::resetCIVelocityEncoderBInputTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderBInputTermCfg(task, channel));}
void NITask::getCIVelocityEncoderBInputLogicLvlBehavior(const char channel[],
						     int32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderBInputLogicLvlBehavior(task, channel, data));}
void NITask::setCIVelocityEncoderBInputLogicLvlBehavior(const char channel[],
						     int32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderBInputLogicLvlBehavior(task, channel, data));}
void NITask::resetCIVelocityEncoderBInputLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderBInputLogicLvlBehavior(task, channel));}
void NITask::getCIVelocityEncoderBInputDigFltrEnable(const char channel[],
						  bool32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderBInputDigFltrEnable(task, channel, data));}
void NITask::setCIVelocityEncoderBInputDigFltrEnable(const char channel[],
						  bool32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderBInputDigFltrEnable(task, channel, data));}
void NITask::resetCIVelocityEncoderBInputDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderBInputDigFltrEnable(task, channel));}
void NITask::getCIVelocityEncoderBInputDigFltrMinPulseWidth(const char channel[],
							 float64 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIVelocityEncoderBInputDigFltrMinPulseWidth(const char channel[],
							 float64 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIVelocityEncoderBInputDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderBInputDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIVelocityEncoderBInputDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIVelocityEncoderBInputDigFltrTimebaseSrc(const char channel[],
						       const char *data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIVelocityEncoderBInputDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseSrc(task, channel));}
void NITask::getCIVelocityEncoderBInputDigFltrTimebaseRate(const char channel[],
							float64 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIVelocityEncoderBInputDigFltrTimebaseRate(const char channel[],
							float64 data) {
	DAQmxErrChk(DAQmxSetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIVelocityEncoderBInputDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityEncoderBInputDigFltrTimebaseRate(task, channel));}
void NITask::getCIVelocityMeasTime(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityMeasTime(task, channel, data));}
void NITask::setCIVelocityMeasTime(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIVelocityMeasTime(task, channel, data));}
void NITask::resetCIVelocityMeasTime(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityMeasTime(task, channel));}
void NITask::getCIVelocityDiv(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIVelocityDiv(task, channel, data));}
void NITask::setCIVelocityDiv(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCIVelocityDiv(task, channel, data));}
void NITask::resetCIVelocityDiv(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIVelocityDiv(task, channel));}
void NITask::getCITwoEdgeSepUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepUnits(task, channel, data));}
void NITask::setCITwoEdgeSepUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepUnits(task, channel, data));}
void NITask::resetCITwoEdgeSepUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepUnits(task, channel));}
QString NITask::getCITwoEdgeSepFirstTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCITwoEdgeSepFirstTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstTerm(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstTerm(task, channel));}
void NITask::getCITwoEdgeSepFirstTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstTermCfg(task, channel, data));}
void NITask::setCITwoEdgeSepFirstTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstTermCfg(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstTermCfg(task, channel));}
void NITask::getCITwoEdgeSepFirstLogicLvlBehavior(const char channel[],
					       int32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstLogicLvlBehavior(task, channel, data));}
void NITask::setCITwoEdgeSepFirstLogicLvlBehavior(const char channel[],
					       int32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstLogicLvlBehavior(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstLogicLvlBehavior(task, channel));}
void NITask::getCITwoEdgeSepFirstDigFltrEnable(const char channel[],
					    bool32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstDigFltrEnable(task, channel, data));}
void NITask::setCITwoEdgeSepFirstDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstDigFltrEnable(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstDigFltrEnable(task, channel));}
void NITask::getCITwoEdgeSepFirstDigFltrMinPulseWidth(const char channel[],
						   float64 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCITwoEdgeSepFirstDigFltrMinPulseWidth(const char channel[],
						   float64 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth(task, channel));}
QString NITask::getCITwoEdgeSepFirstDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCITwoEdgeSepFirstDigFltrTimebaseSrc(const char channel[],
						 const char *data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc(task, channel));}
void NITask::getCITwoEdgeSepFirstDigFltrTimebaseRate(const char channel[],
						  float64 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel, data));}
void NITask::setCITwoEdgeSepFirstDigFltrTimebaseRate(const char channel[],
						  float64 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate(task, channel));}
void NITask::getCITwoEdgeSepFirstDigSyncEnable(const char channel[],
					    bool32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstDigSyncEnable(task, channel, data));}
void NITask::setCITwoEdgeSepFirstDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstDigSyncEnable(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstDigSyncEnable(task, channel));}
void NITask::getCITwoEdgeSepFirstEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepFirstEdge(task, channel, data));}
void NITask::setCITwoEdgeSepFirstEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepFirstEdge(task, channel, data));}
void NITask::resetCITwoEdgeSepFirstEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepFirstEdge(task, channel));}
QString NITask::getCITwoEdgeSepSecondTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCITwoEdgeSepSecondTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondTerm(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondTerm(task, channel));}
void NITask::getCITwoEdgeSepSecondTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondTermCfg(task, channel, data));}
void NITask::setCITwoEdgeSepSecondTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondTermCfg(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondTermCfg(task, channel));}
void NITask::getCITwoEdgeSepSecondLogicLvlBehavior(const char channel[],
						int32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondLogicLvlBehavior(task, channel, data));}
void NITask::setCITwoEdgeSepSecondLogicLvlBehavior(const char channel[],
						int32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondLogicLvlBehavior(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondLogicLvlBehavior(task, channel));}
void NITask::getCITwoEdgeSepSecondDigFltrEnable(const char channel[],
					     bool32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondDigFltrEnable(task, channel, data));}
void NITask::setCITwoEdgeSepSecondDigFltrEnable(const char channel[],
					     bool32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondDigFltrEnable(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondDigFltrEnable(task, channel));}
void NITask::getCITwoEdgeSepSecondDigFltrMinPulseWidth(const char channel[],
						    float64 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCITwoEdgeSepSecondDigFltrMinPulseWidth(const char channel[],
						    float64 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth(task, channel));}
QString NITask::getCITwoEdgeSepSecondDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCITwoEdgeSepSecondDigFltrTimebaseSrc(const char channel[],
						  const char *data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc(task, channel));}
void NITask::getCITwoEdgeSepSecondDigFltrTimebaseRate(const char channel[],
						   float64 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel, data));}
void NITask::setCITwoEdgeSepSecondDigFltrTimebaseRate(const char channel[],
						   float64 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate(task, channel));}
void NITask::getCITwoEdgeSepSecondDigSyncEnable(const char channel[],
					     bool32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondDigSyncEnable(task, channel, data));}
void NITask::setCITwoEdgeSepSecondDigSyncEnable(const char channel[],
					     bool32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondDigSyncEnable(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondDigSyncEnable(task, channel));}
void NITask::getCITwoEdgeSepSecondEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCITwoEdgeSepSecondEdge(task, channel, data));}
void NITask::setCITwoEdgeSepSecondEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCITwoEdgeSepSecondEdge(task, channel, data));}
void NITask::resetCITwoEdgeSepSecondEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCITwoEdgeSepSecondEdge(task, channel));}
void NITask::getCISemiPeriodUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodUnits(task, channel, data));}
void NITask::setCISemiPeriodUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodUnits(task, channel, data));}
void NITask::resetCISemiPeriodUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodUnits(task, channel));}
QString NITask::getCISemiPeriodTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCISemiPeriodTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCISemiPeriodTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodTerm(task, channel, data));}
void NITask::resetCISemiPeriodTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodTerm(task, channel));}
void NITask::getCISemiPeriodTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodTermCfg(task, channel, data));}
void NITask::setCISemiPeriodTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodTermCfg(task, channel, data));}
void NITask::resetCISemiPeriodTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodTermCfg(task, channel));}
void NITask::getCISemiPeriodLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodLogicLvlBehavior(task, channel, data));}
void NITask::setCISemiPeriodLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodLogicLvlBehavior(task, channel, data));}
void NITask::resetCISemiPeriodLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodLogicLvlBehavior(task, channel));}
void NITask::getCISemiPeriodDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodDigFltrEnable(task, channel, data));}
void NITask::setCISemiPeriodDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodDigFltrEnable(task, channel, data));}
void NITask::resetCISemiPeriodDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodDigFltrEnable(task, channel));}
void NITask::getCISemiPeriodDigFltrMinPulseWidth(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCISemiPeriodDigFltrMinPulseWidth(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCISemiPeriodDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodDigFltrMinPulseWidth(task, channel));}
QString NITask::getCISemiPeriodDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCISemiPeriodDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCISemiPeriodDigFltrTimebaseSrc(const char channel[],
					    const char *data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCISemiPeriodDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodDigFltrTimebaseSrc(task, channel));}
void NITask::getCISemiPeriodDigFltrTimebaseRate(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodDigFltrTimebaseRate(task, channel, data));}
void NITask::setCISemiPeriodDigFltrTimebaseRate(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCISemiPeriodDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodDigFltrTimebaseRate(task, channel));}
void NITask::getCISemiPeriodDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodDigSyncEnable(task, channel, data));}
void NITask::setCISemiPeriodDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodDigSyncEnable(task, channel, data));}
void NITask::resetCISemiPeriodDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodDigSyncEnable(task, channel));}
void NITask::getCISemiPeriodStartingEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCISemiPeriodStartingEdge(task, channel, data));}
void NITask::setCISemiPeriodStartingEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCISemiPeriodStartingEdge(task, channel, data));}
void NITask::resetCISemiPeriodStartingEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISemiPeriodStartingEdge(task, channel));}
void NITask::getCIPulseFreqUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqUnits(task, channel, data));}
void NITask::setCIPulseFreqUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqUnits(task, channel, data));}
void NITask::resetCIPulseFreqUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqUnits(task, channel));}
QString NITask::getCIPulseFreqTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseFreqTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseFreqTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqTerm(task, channel, data));}
void NITask::resetCIPulseFreqTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqTerm(task, channel));}
void NITask::getCIPulseFreqTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqTermCfg(task, channel, data));}
void NITask::setCIPulseFreqTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqTermCfg(task, channel, data));}
void NITask::resetCIPulseFreqTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqTermCfg(task, channel));}
void NITask::getCIPulseFreqLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqLogicLvlBehavior(task, channel, data));}
void NITask::setCIPulseFreqLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqLogicLvlBehavior(task, channel, data));}
void NITask::resetCIPulseFreqLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqLogicLvlBehavior(task, channel));}
void NITask::getCIPulseFreqDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqDigFltrEnable(task, channel, data));}
void NITask::setCIPulseFreqDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqDigFltrEnable(task, channel, data));}
void NITask::resetCIPulseFreqDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqDigFltrEnable(task, channel));}
void NITask::getCIPulseFreqDigFltrMinPulseWidth(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIPulseFreqDigFltrMinPulseWidth(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIPulseFreqDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIPulseFreqDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseFreqDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseFreqDigFltrTimebaseSrc(const char channel[],
					   const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIPulseFreqDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqDigFltrTimebaseSrc(task, channel));}
void NITask::getCIPulseFreqDigFltrTimebaseRate(const char channel[],
					    float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIPulseFreqDigFltrTimebaseRate(const char channel[],
					    float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIPulseFreqDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqDigFltrTimebaseRate(task, channel));}
void NITask::getCIPulseFreqDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqDigSyncEnable(task, channel, data));}
void NITask::setCIPulseFreqDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqDigSyncEnable(task, channel, data));}
void NITask::resetCIPulseFreqDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqDigSyncEnable(task, channel));}
void NITask::getCIPulseFreqStartEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseFreqStartEdge(task, channel, data));}
void NITask::setCIPulseFreqStartEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseFreqStartEdge(task, channel, data));}
void NITask::resetCIPulseFreqStartEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseFreqStartEdge(task, channel));}
void NITask::getCIPulseTimeUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeUnits(task, channel, data));}
void NITask::setCIPulseTimeUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeUnits(task, channel, data));}
void NITask::resetCIPulseTimeUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeUnits(task, channel));}
QString NITask::getCIPulseTimeTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseTimeTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseTimeTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeTerm(task, channel, data));}
void NITask::resetCIPulseTimeTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeTerm(task, channel));}
void NITask::getCIPulseTimeTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeTermCfg(task, channel, data));}
void NITask::setCIPulseTimeTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeTermCfg(task, channel, data));}
void NITask::resetCIPulseTimeTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeTermCfg(task, channel));}
void NITask::getCIPulseTimeLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeLogicLvlBehavior(task, channel, data));}
void NITask::setCIPulseTimeLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeLogicLvlBehavior(task, channel, data));}
void NITask::resetCIPulseTimeLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeLogicLvlBehavior(task, channel));}
void NITask::getCIPulseTimeDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeDigFltrEnable(task, channel, data));}
void NITask::setCIPulseTimeDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeDigFltrEnable(task, channel, data));}
void NITask::resetCIPulseTimeDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeDigFltrEnable(task, channel));}
void NITask::getCIPulseTimeDigFltrMinPulseWidth(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIPulseTimeDigFltrMinPulseWidth(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIPulseTimeDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIPulseTimeDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseTimeDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseTimeDigFltrTimebaseSrc(const char channel[],
					   const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIPulseTimeDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeDigFltrTimebaseSrc(task, channel));}
void NITask::getCIPulseTimeDigFltrTimebaseRate(const char channel[],
					    float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIPulseTimeDigFltrTimebaseRate(const char channel[],
					    float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIPulseTimeDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeDigFltrTimebaseRate(task, channel));}
void NITask::getCIPulseTimeDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeDigSyncEnable(task, channel, data));}
void NITask::setCIPulseTimeDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeDigSyncEnable(task, channel, data));}
void NITask::resetCIPulseTimeDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeDigSyncEnable(task, channel));}
void NITask::getCIPulseTimeStartEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTimeStartEdge(task, channel, data));}
void NITask::setCIPulseTimeStartEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTimeStartEdge(task, channel, data));}
void NITask::resetCIPulseTimeStartEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTimeStartEdge(task, channel));}
QString NITask::getCIPulseTicksTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseTicksTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseTicksTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksTerm(task, channel, data));}
void NITask::resetCIPulseTicksTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksTerm(task, channel));}
void NITask::getCIPulseTicksTermCfg(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTicksTermCfg(task, channel, data));}
void NITask::setCIPulseTicksTermCfg(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksTermCfg(task, channel, data));}
void NITask::resetCIPulseTicksTermCfg(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksTermCfg(task, channel));}
void NITask::getCIPulseTicksLogicLvlBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTicksLogicLvlBehavior(task, channel, data));}
void NITask::setCIPulseTicksLogicLvlBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksLogicLvlBehavior(task, channel, data));}
void NITask::resetCIPulseTicksLogicLvlBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksLogicLvlBehavior(task, channel));}
void NITask::getCIPulseTicksDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTicksDigFltrEnable(task, channel, data));}
void NITask::setCIPulseTicksDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksDigFltrEnable(task, channel, data));}
void NITask::resetCIPulseTicksDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksDigFltrEnable(task, channel));}
void NITask::getCIPulseTicksDigFltrMinPulseWidth(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTicksDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCIPulseTicksDigFltrMinPulseWidth(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCIPulseTicksDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksDigFltrMinPulseWidth(task, channel));}
QString NITask::getCIPulseTicksDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCIPulseTicksDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCIPulseTicksDigFltrTimebaseSrc(const char channel[],
					    const char *data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCIPulseTicksDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksDigFltrTimebaseSrc(task, channel));}
void NITask::getCIPulseTicksDigFltrTimebaseRate(const char channel[],
					     float64 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTicksDigFltrTimebaseRate(task, channel, data));}
void NITask::setCIPulseTicksDigFltrTimebaseRate(const char channel[],
					     float64 data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCIPulseTicksDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksDigFltrTimebaseRate(task, channel));}
void NITask::getCIPulseTicksDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTicksDigSyncEnable(task, channel, data));}
void NITask::setCIPulseTicksDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksDigSyncEnable(task, channel, data));}
void NITask::resetCIPulseTicksDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksDigSyncEnable(task, channel));}
void NITask::getCIPulseTicksStartEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIPulseTicksStartEdge(task, channel, data));}
void NITask::setCIPulseTicksStartEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIPulseTicksStartEdge(task, channel, data));}
void NITask::resetCIPulseTicksStartEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPulseTicksStartEdge(task, channel));}
QString NITask::getCICtrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICtrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICtrTimebaseSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseSrc(task, channel, data));}
void NITask::resetCICtrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseSrc(task, channel));}
void NITask::getCICtrTimebaseRate(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCICtrTimebaseRate(task, channel, data));}
void NITask::setCICtrTimebaseRate(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseRate(task, channel, data));}
void NITask::resetCICtrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseRate(task, channel));}
void NITask::getCICtrTimebaseActiveEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCICtrTimebaseActiveEdge(task, channel, data));}
void NITask::setCICtrTimebaseActiveEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseActiveEdge(task, channel, data));}
void NITask::resetCICtrTimebaseActiveEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseActiveEdge(task, channel));}
void NITask::getCICtrTimebaseDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCICtrTimebaseDigFltrEnable(task, channel, data));}
void NITask::setCICtrTimebaseDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseDigFltrEnable(task, channel, data));}
void NITask::resetCICtrTimebaseDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseDigFltrEnable(task, channel));}
void NITask::getCICtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 *data) {
	DAQmxErrChk(DAQmxGetCICtrTimebaseDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCICtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCICtrTimebaseDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseDigFltrMinPulseWidth(task, channel));}
QString NITask::getCICtrTimebaseDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCICtrTimebaseDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCICtrTimebaseDigFltrTimebaseSrc(const char channel[],
					     const char *data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCICtrTimebaseDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseDigFltrTimebaseSrc(task, channel));}
void NITask::getCICtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetCICtrTimebaseDigFltrTimebaseRate(task, channel, data));}
void NITask::setCICtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCICtrTimebaseDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseDigFltrTimebaseRate(task, channel));}
void NITask::getCICtrTimebaseDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCICtrTimebaseDigSyncEnable(task, channel, data));}
void NITask::setCICtrTimebaseDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseDigSyncEnable(task, channel, data));}
void NITask::resetCICtrTimebaseDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseDigSyncEnable(task, channel));}
void NITask::getCIThreshVoltage(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIThreshVoltage(task, channel, data));}
void NITask::setCIThreshVoltage(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIThreshVoltage(task, channel, data));}
void NITask::resetCIThreshVoltage(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIThreshVoltage(task, channel));}
void NITask::getCICount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCICount(task, channel, data));}
void NITask::getCIOutputState(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIOutputState(task, channel, data));}
void NITask::getCITCReached(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCITCReached(task, channel, data));}
void NITask::getCICtrTimebaseMasterTimebaseDiv(const char channel[],
					    uInt32 *data) {
	DAQmxErrChk(DAQmxGetCICtrTimebaseMasterTimebaseDiv(task, channel, data));}
void NITask::setCICtrTimebaseMasterTimebaseDiv(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCICtrTimebaseMasterTimebaseDiv(task, channel, data));}
void NITask::resetCICtrTimebaseMasterTimebaseDiv(const char channel[]) {
	DAQmxErrChk(DAQmxResetCICtrTimebaseMasterTimebaseDiv(task, channel));}
void NITask::getCISampClkOverrunBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCISampClkOverrunBehavior(task, channel, data));}
void NITask::setCISampClkOverrunBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCISampClkOverrunBehavior(task, channel, data));}
void NITask::resetCISampClkOverrunBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISampClkOverrunBehavior(task, channel));}
void NITask::getCISampClkOverrunSentinelVal(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCISampClkOverrunSentinelVal(task, channel, data));}
void NITask::setCISampClkOverrunSentinelVal(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCISampClkOverrunSentinelVal(task, channel, data));}
void NITask::resetCISampClkOverrunSentinelVal(const char channel[]) {
	DAQmxErrChk(DAQmxResetCISampClkOverrunSentinelVal(task, channel));}
void NITask::getCIDataXferMech(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIDataXferMech(task, channel, data));}
void NITask::setCIDataXferMech(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIDataXferMech(task, channel, data));}
void NITask::resetCIDataXferMech(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDataXferMech(task, channel));}
void NITask::getCIDataXferReqCond(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCIDataXferReqCond(task, channel, data));}
void NITask::setCIDataXferReqCond(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCIDataXferReqCond(task, channel, data));}
void NITask::resetCIDataXferReqCond(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDataXferReqCond(task, channel));}
void NITask::getCIUsbXferReqSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIUsbXferReqSize(task, channel, data));}
void NITask::setCIUsbXferReqSize(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCIUsbXferReqSize(task, channel, data));}
void NITask::resetCIUsbXferReqSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIUsbXferReqSize(task, channel));}
void NITask::getCIUsbXferReqCount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIUsbXferReqCount(task, channel, data));}
void NITask::setCIUsbXferReqCount(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCIUsbXferReqCount(task, channel, data));}
void NITask::resetCIUsbXferReqCount(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIUsbXferReqCount(task, channel));}
void NITask::getCIMemMapEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIMemMapEnable(task, channel, data));}
void NITask::setCIMemMapEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIMemMapEnable(task, channel, data));}
void NITask::resetCIMemMapEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIMemMapEnable(task, channel));}
void NITask::getCINumPossiblyInvalidSamps(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCINumPossiblyInvalidSamps(task, channel, data));}
void NITask::getCIDupCountPrevent(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCIDupCountPrevent(task, channel, data));}
void NITask::setCIDupCountPrevent(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCIDupCountPrevent(task, channel, data));}
void NITask::resetCIDupCountPrevent(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIDupCountPrevent(task, channel));}
void NITask::getCIPrescaler(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCIPrescaler(task, channel, data));}
void NITask::setCIPrescaler(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCIPrescaler(task, channel, data));}
void NITask::resetCIPrescaler(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIPrescaler(task, channel));}
void NITask::getCIMaxMeasPeriod(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCIMaxMeasPeriod(task, channel, data));}
void NITask::setCIMaxMeasPeriod(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCIMaxMeasPeriod(task, channel, data));}
void NITask::resetCIMaxMeasPeriod(const char channel[]) {
	DAQmxErrChk(DAQmxResetCIMaxMeasPeriod(task, channel));}
void NITask::getCOOutputType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCOOutputType(task, channel, data));}
void NITask::getCOPulseIdleState(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCOPulseIdleState(task, channel, data));}
void NITask::setCOPulseIdleState(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCOPulseIdleState(task, channel, data));}
void NITask::resetCOPulseIdleState(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseIdleState(task, channel));}
QString NITask::getCOPulseTerm(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCOPulseTerm(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCOPulseTerm(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCOPulseTerm(task, channel, data));}
void NITask::resetCOPulseTerm(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseTerm(task, channel));}
void NITask::getCOPulseTimeUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCOPulseTimeUnits(task, channel, data));}
void NITask::setCOPulseTimeUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCOPulseTimeUnits(task, channel, data));}
void NITask::resetCOPulseTimeUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseTimeUnits(task, channel));}
void NITask::getCOPulseHighTime(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCOPulseHighTime(task, channel, data));}
void NITask::setCOPulseHighTime(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCOPulseHighTime(task, channel, data));}
void NITask::resetCOPulseHighTime(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseHighTime(task, channel));}
void NITask::getCOPulseLowTime(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCOPulseLowTime(task, channel, data));}
void NITask::setCOPulseLowTime(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCOPulseLowTime(task, channel, data));}
void NITask::resetCOPulseLowTime(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseLowTime(task, channel));}
void NITask::getCOPulseTimeInitialDelay(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCOPulseTimeInitialDelay(task, channel, data));}
void NITask::setCOPulseTimeInitialDelay(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCOPulseTimeInitialDelay(task, channel, data));}
void NITask::resetCOPulseTimeInitialDelay(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseTimeInitialDelay(task, channel));}
void NITask::getCOPulseDutyCyc(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCOPulseDutyCyc(task, channel, data));}
void NITask::setCOPulseDutyCyc(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCOPulseDutyCyc(task, channel, data));}
void NITask::resetCOPulseDutyCyc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseDutyCyc(task, channel));}
void NITask::getCOPulseFreqUnits(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCOPulseFreqUnits(task, channel, data));}
void NITask::setCOPulseFreqUnits(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCOPulseFreqUnits(task, channel, data));}
void NITask::resetCOPulseFreqUnits(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseFreqUnits(task, channel));}
void NITask::getCOPulseFreq(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCOPulseFreq(task, channel, data));}
void NITask::setCOPulseFreq(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCOPulseFreq(task, channel, data));}
void NITask::resetCOPulseFreq(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseFreq(task, channel));}
void NITask::getCOPulseFreqInitialDelay(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCOPulseFreqInitialDelay(task, channel, data));}
void NITask::setCOPulseFreqInitialDelay(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCOPulseFreqInitialDelay(task, channel, data));}
void NITask::resetCOPulseFreqInitialDelay(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseFreqInitialDelay(task, channel));}
void NITask::getCOPulseHighTicks(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOPulseHighTicks(task, channel, data));}
void NITask::setCOPulseHighTicks(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOPulseHighTicks(task, channel, data));}
void NITask::resetCOPulseHighTicks(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseHighTicks(task, channel));}
void NITask::getCOPulseLowTicks(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOPulseLowTicks(task, channel, data));}
void NITask::setCOPulseLowTicks(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOPulseLowTicks(task, channel, data));}
void NITask::resetCOPulseLowTicks(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseLowTicks(task, channel));}
void NITask::getCOPulseTicksInitialDelay(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOPulseTicksInitialDelay(task, channel, data));}
void NITask::setCOPulseTicksInitialDelay(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOPulseTicksInitialDelay(task, channel, data));}
void NITask::resetCOPulseTicksInitialDelay(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPulseTicksInitialDelay(task, channel));}
QString NITask::getCOCtrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCOCtrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCOCtrTimebaseSrc(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseSrc(task, channel, data));}
void NITask::resetCOCtrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseSrc(task, channel));}
void NITask::getCOCtrTimebaseRate(const char channel[], float64 *data) {
	DAQmxErrChk(DAQmxGetCOCtrTimebaseRate(task, channel, data));}
void NITask::setCOCtrTimebaseRate(const char channel[], float64 data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseRate(task, channel, data));}
void NITask::resetCOCtrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseRate(task, channel));}
void NITask::getCOCtrTimebaseActiveEdge(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCOCtrTimebaseActiveEdge(task, channel, data));}
void NITask::setCOCtrTimebaseActiveEdge(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseActiveEdge(task, channel, data));}
void NITask::resetCOCtrTimebaseActiveEdge(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseActiveEdge(task, channel));}
void NITask::getCOCtrTimebaseDigFltrEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCOCtrTimebaseDigFltrEnable(task, channel, data));}
void NITask::setCOCtrTimebaseDigFltrEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseDigFltrEnable(task, channel, data));}
void NITask::resetCOCtrTimebaseDigFltrEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseDigFltrEnable(task, channel));}
void NITask::getCOCtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 *data) {
	DAQmxErrChk(DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth(task, channel, data));}
void NITask::setCOCtrTimebaseDigFltrMinPulseWidth(const char channel[],
					       float64 data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth(task, channel, data));}
void NITask::resetCOCtrTimebaseDigFltrMinPulseWidth(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth(task, channel));}
QString NITask::getCOCtrTimebaseDigFltrTimebaseSrc(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setCOCtrTimebaseDigFltrTimebaseSrc(const char channel[],
					     const char *data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc(task, channel, data));}
void NITask::resetCOCtrTimebaseDigFltrTimebaseSrc(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc(task, channel));}
void NITask::getCOCtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 *data) {
	DAQmxErrChk(DAQmxGetCOCtrTimebaseDigFltrTimebaseRate(task, channel, data));}
void NITask::setCOCtrTimebaseDigFltrTimebaseRate(const char channel[],
					      float64 data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseDigFltrTimebaseRate(task, channel, data));}
void NITask::resetCOCtrTimebaseDigFltrTimebaseRate(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseDigFltrTimebaseRate(task, channel));}
void NITask::getCOCtrTimebaseDigSyncEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCOCtrTimebaseDigSyncEnable(task, channel, data));}
void NITask::setCOCtrTimebaseDigSyncEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseDigSyncEnable(task, channel, data));}
void NITask::resetCOCtrTimebaseDigSyncEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseDigSyncEnable(task, channel));}
void NITask::getCOCount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOCount(task, channel, data));}
void NITask::getCOOutputState(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCOOutputState(task, channel, data));}
void NITask::getCOAutoIncrCnt(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOAutoIncrCnt(task, channel, data));}
void NITask::setCOAutoIncrCnt(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOAutoIncrCnt(task, channel, data));}
void NITask::resetCOAutoIncrCnt(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOAutoIncrCnt(task, channel));}
void NITask::getCOCtrTimebaseMasterTimebaseDiv(const char channel[],
					    uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOCtrTimebaseMasterTimebaseDiv(task, channel, data));}
void NITask::setCOCtrTimebaseMasterTimebaseDiv(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOCtrTimebaseMasterTimebaseDiv(task, channel, data));}
void NITask::resetCOCtrTimebaseMasterTimebaseDiv(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOCtrTimebaseMasterTimebaseDiv(task, channel));}
void NITask::getCOPulseDone(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCOPulseDone(task, channel, data));}
void NITask::getCOEnableInitialDelayOnRetrigger(const char channel[],
					     bool32 *data) {
	DAQmxErrChk(DAQmxGetCOEnableInitialDelayOnRetrigger(task, channel, data));}
void NITask::setCOEnableInitialDelayOnRetrigger(const char channel[],
					     bool32 data) {
	DAQmxErrChk(DAQmxSetCOEnableInitialDelayOnRetrigger(task, channel, data));}
void NITask::resetCOEnableInitialDelayOnRetrigger(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOEnableInitialDelayOnRetrigger(task, channel));}
void NITask::getCOConstrainedGenMode(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCOConstrainedGenMode(task, channel, data));}
void NITask::setCOConstrainedGenMode(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCOConstrainedGenMode(task, channel, data));}
void NITask::resetCOConstrainedGenMode(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOConstrainedGenMode(task, channel));}
void NITask::getCOUseOnlyOnBrdMem(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCOUseOnlyOnBrdMem(task, channel, data));}
void NITask::setCOUseOnlyOnBrdMem(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCOUseOnlyOnBrdMem(task, channel, data));}
void NITask::resetCOUseOnlyOnBrdMem(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOUseOnlyOnBrdMem(task, channel));}
void NITask::getCODataXferMech(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCODataXferMech(task, channel, data));}
void NITask::setCODataXferMech(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCODataXferMech(task, channel, data));}
void NITask::resetCODataXferMech(const char channel[]) {
	DAQmxErrChk(DAQmxResetCODataXferMech(task, channel));}
void NITask::getCODataXferReqCond(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetCODataXferReqCond(task, channel, data));}
void NITask::setCODataXferReqCond(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetCODataXferReqCond(task, channel, data));}
void NITask::resetCODataXferReqCond(const char channel[]) {
	DAQmxErrChk(DAQmxResetCODataXferReqCond(task, channel));}
void NITask::getCOUsbXferReqSize(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOUsbXferReqSize(task, channel, data));}
void NITask::setCOUsbXferReqSize(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOUsbXferReqSize(task, channel, data));}
void NITask::resetCOUsbXferReqSize(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOUsbXferReqSize(task, channel));}
void NITask::getCOUsbXferReqCount(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOUsbXferReqCount(task, channel, data));}
void NITask::setCOUsbXferReqCount(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOUsbXferReqCount(task, channel, data));}
void NITask::resetCOUsbXferReqCount(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOUsbXferReqCount(task, channel));}
void NITask::getCOMemMapEnable(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCOMemMapEnable(task, channel, data));}
void NITask::setCOMemMapEnable(const char channel[], bool32 data) {
	DAQmxErrChk(DAQmxSetCOMemMapEnable(task, channel, data));}
void NITask::resetCOMemMapEnable(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOMemMapEnable(task, channel));}
void NITask::getCOPrescaler(const char channel[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetCOPrescaler(task, channel, data));}
void NITask::setCOPrescaler(const char channel[], uInt32 data) {
	DAQmxErrChk(DAQmxSetCOPrescaler(task, channel, data));}
void NITask::resetCOPrescaler(const char channel[]) {
	DAQmxErrChk(DAQmxResetCOPrescaler(task, channel));}
void NITask::getCORdyForNewVal(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetCORdyForNewVal(task, channel, data));}
void NITask::getChanType(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetChanType(task, channel, data));}
QString NITask::getPhysicalChanName(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetPhysicalChanName(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setPhysicalChanName(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetPhysicalChanName(task, channel, data));}
QString NITask::getChanDescr(const char channel[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetChanDescr(task, channel, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setChanDescr(const char channel[], const char *data) {
	DAQmxErrChk(DAQmxSetChanDescr(task, channel, data));}
void NITask::resetChanDescr(const char channel[]) {
	DAQmxErrChk(DAQmxResetChanDescr(task, channel));}
void NITask::getChanIsGlobal(const char channel[], bool32 *data) {
	DAQmxErrChk(DAQmxGetChanIsGlobal(task, channel, data));}
void NITask::getChanSyncUnlockBehavior(const char channel[], int32 *data) {
	DAQmxErrChk(DAQmxGetChanSyncUnlockBehavior(task, channel, data));}
void NITask::setChanSyncUnlockBehavior(const char channel[], int32 data) {
	DAQmxErrChk(DAQmxSetChanSyncUnlockBehavior(task, channel, data));}
void NITask::resetChanSyncUnlockBehavior(const char channel[]) {
	DAQmxErrChk(DAQmxResetChanSyncUnlockBehavior(task, channel));}
QString NITask::getExportedAIConvClkOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedAIConvClkOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedAIConvClkOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedAIConvClkOutputTerm(task, data));}
void NITask::resetExportedAIConvClkOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedAIConvClkOutputTerm(task));}
int32 NITask::getExportedAIConvClkPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedAIConvClkPulsePolarity(task, &__temp__));
	return __temp__;

}
QString NITask::getExported10MHzRefClkOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExported10MHzRefClkOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExported10MHzRefClkOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExported10MHzRefClkOutputTerm(task, data));}
void NITask::resetExported10MHzRefClkOutputTerm() {
	DAQmxErrChk(DAQmxResetExported10MHzRefClkOutputTerm(task));}
QString NITask::getExported20MHzTimebaseOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExported20MHzTimebaseOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExported20MHzTimebaseOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExported20MHzTimebaseOutputTerm(task, data));}
void NITask::resetExported20MHzTimebaseOutputTerm() {
	DAQmxErrChk(DAQmxResetExported20MHzTimebaseOutputTerm(task));}
int32 NITask::getExportedSampClkOutputBehavior() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedSampClkOutputBehavior(task, &__temp__));
	return __temp__;

}
void NITask::setExportedSampClkOutputBehavior(int32 data) {
	DAQmxErrChk(DAQmxSetExportedSampClkOutputBehavior(task, data));}
void NITask::resetExportedSampClkOutputBehavior() {
	DAQmxErrChk(DAQmxResetExportedSampClkOutputBehavior(task));}
QString NITask::getExportedSampClkOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedSampClkOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedSampClkOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedSampClkOutputTerm(task, data));}
void NITask::resetExportedSampClkOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedSampClkOutputTerm(task));}
float64 NITask::getExportedSampClkDelayOffset() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetExportedSampClkDelayOffset(task, &__temp__));
	return __temp__;

}
void NITask::setExportedSampClkDelayOffset(float64 data) {
	DAQmxErrChk(DAQmxSetExportedSampClkDelayOffset(task, data));}
void NITask::resetExportedSampClkDelayOffset() {
	DAQmxErrChk(DAQmxResetExportedSampClkDelayOffset(task));}
int32 NITask::getExportedSampClkPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedSampClkPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedSampClkPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedSampClkPulsePolarity(task, data));}
void NITask::resetExportedSampClkPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedSampClkPulsePolarity(task));}
QString NITask::getExportedSampClkTimebaseOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedSampClkTimebaseOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedSampClkTimebaseOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedSampClkTimebaseOutputTerm(task, data));}
void NITask::resetExportedSampClkTimebaseOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedSampClkTimebaseOutputTerm(task));}
QString NITask::getExportedDividedSampClkTimebaseOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedDividedSampClkTimebaseOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedDividedSampClkTimebaseOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedDividedSampClkTimebaseOutputTerm(task, data));}
void NITask::resetExportedDividedSampClkTimebaseOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedDividedSampClkTimebaseOutputTerm(task));}
QString NITask::getExportedAdvTrigOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedAdvTrigOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedAdvTrigOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedAdvTrigOutputTerm(task, data));}
void NITask::resetExportedAdvTrigOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedAdvTrigOutputTerm(task));}
int32 NITask::getExportedAdvTrigPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedAdvTrigPulsePolarity(task, &__temp__));
	return __temp__;

}
int32 NITask::getExportedAdvTrigPulseWidthUnits() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedAdvTrigPulseWidthUnits(task, &__temp__));
	return __temp__;

}
void NITask::setExportedAdvTrigPulseWidthUnits(int32 data) {
	DAQmxErrChk(DAQmxSetExportedAdvTrigPulseWidthUnits(task, data));}
void NITask::resetExportedAdvTrigPulseWidthUnits() {
	DAQmxErrChk(DAQmxResetExportedAdvTrigPulseWidthUnits(task));}
float64 NITask::getExportedAdvTrigPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetExportedAdvTrigPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setExportedAdvTrigPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetExportedAdvTrigPulseWidth(task, data));}
void NITask::resetExportedAdvTrigPulseWidth() {
	DAQmxErrChk(DAQmxResetExportedAdvTrigPulseWidth(task));}
QString NITask::getExportedPauseTrigOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedPauseTrigOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedPauseTrigOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedPauseTrigOutputTerm(task, data));}
void NITask::resetExportedPauseTrigOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedPauseTrigOutputTerm(task));}
int32 NITask::getExportedPauseTrigLvlActiveLvl() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedPauseTrigLvlActiveLvl(task, &__temp__));
	return __temp__;

}
void NITask::setExportedPauseTrigLvlActiveLvl(int32 data) {
	DAQmxErrChk(DAQmxSetExportedPauseTrigLvlActiveLvl(task, data));}
void NITask::resetExportedPauseTrigLvlActiveLvl() {
	DAQmxErrChk(DAQmxResetExportedPauseTrigLvlActiveLvl(task));}
QString NITask::getExportedRefTrigOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedRefTrigOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedRefTrigOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedRefTrigOutputTerm(task, data));}
void NITask::resetExportedRefTrigOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedRefTrigOutputTerm(task));}
int32 NITask::getExportedRefTrigPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedRefTrigPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedRefTrigPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedRefTrigPulsePolarity(task, data));}
void NITask::resetExportedRefTrigPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedRefTrigPulsePolarity(task));}
QString NITask::getExportedStartTrigOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedStartTrigOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedStartTrigOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedStartTrigOutputTerm(task, data));}
void NITask::resetExportedStartTrigOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedStartTrigOutputTerm(task));}
int32 NITask::getExportedStartTrigPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedStartTrigPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedStartTrigPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedStartTrigPulsePolarity(task, data));}
void NITask::resetExportedStartTrigPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedStartTrigPulsePolarity(task));}
QString NITask::getExportedAdvCmpltEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedAdvCmpltEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedAdvCmpltEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedAdvCmpltEventOutputTerm(task, data));}
void NITask::resetExportedAdvCmpltEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedAdvCmpltEventOutputTerm(task));}
float64 NITask::getExportedAdvCmpltEventDelay() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetExportedAdvCmpltEventDelay(task, &__temp__));
	return __temp__;

}
void NITask::setExportedAdvCmpltEventDelay(float64 data) {
	DAQmxErrChk(DAQmxSetExportedAdvCmpltEventDelay(task, data));}
void NITask::resetExportedAdvCmpltEventDelay() {
	DAQmxErrChk(DAQmxResetExportedAdvCmpltEventDelay(task));}
int32 NITask::getExportedAdvCmpltEventPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedAdvCmpltEventPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedAdvCmpltEventPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedAdvCmpltEventPulsePolarity(task, data));}
void NITask::resetExportedAdvCmpltEventPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedAdvCmpltEventPulsePolarity(task));}
float64 NITask::getExportedAdvCmpltEventPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetExportedAdvCmpltEventPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setExportedAdvCmpltEventPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetExportedAdvCmpltEventPulseWidth(task, data));}
void NITask::resetExportedAdvCmpltEventPulseWidth() {
	DAQmxErrChk(DAQmxResetExportedAdvCmpltEventPulseWidth(task));}
QString NITask::getExportedAIHoldCmpltEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedAIHoldCmpltEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedAIHoldCmpltEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedAIHoldCmpltEventOutputTerm(task, data));}
void NITask::resetExportedAIHoldCmpltEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedAIHoldCmpltEventOutputTerm(task));}
int32 NITask::getExportedAIHoldCmpltEventPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedAIHoldCmpltEventPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedAIHoldCmpltEventPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedAIHoldCmpltEventPulsePolarity(task, data));}
void NITask::resetExportedAIHoldCmpltEventPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedAIHoldCmpltEventPulsePolarity(task));}
QString NITask::getExportedChangeDetectEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedChangeDetectEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedChangeDetectEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedChangeDetectEventOutputTerm(task, data));}
void NITask::resetExportedChangeDetectEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedChangeDetectEventOutputTerm(task));}
int32 NITask::getExportedChangeDetectEventPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedChangeDetectEventPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedChangeDetectEventPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedChangeDetectEventPulsePolarity(task, data));}
void NITask::resetExportedChangeDetectEventPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedChangeDetectEventPulsePolarity(task));}
QString NITask::getExportedCtrOutEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedCtrOutEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedCtrOutEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedCtrOutEventOutputTerm(task, data));}
void NITask::resetExportedCtrOutEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedCtrOutEventOutputTerm(task));}
int32 NITask::getExportedCtrOutEventOutputBehavior() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedCtrOutEventOutputBehavior(task, &__temp__));
	return __temp__;

}
void NITask::setExportedCtrOutEventOutputBehavior(int32 data) {
	DAQmxErrChk(DAQmxSetExportedCtrOutEventOutputBehavior(task, data));}
void NITask::resetExportedCtrOutEventOutputBehavior() {
	DAQmxErrChk(DAQmxResetExportedCtrOutEventOutputBehavior(task));}
int32 NITask::getExportedCtrOutEventPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedCtrOutEventPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedCtrOutEventPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedCtrOutEventPulsePolarity(task, data));}
void NITask::resetExportedCtrOutEventPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedCtrOutEventPulsePolarity(task));}
int32 NITask::getExportedCtrOutEventToggleIdleState() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedCtrOutEventToggleIdleState(task, &__temp__));
	return __temp__;

}
void NITask::setExportedCtrOutEventToggleIdleState(int32 data) {
	DAQmxErrChk(DAQmxSetExportedCtrOutEventToggleIdleState(task, data));}
void NITask::resetExportedCtrOutEventToggleIdleState() {
	DAQmxErrChk(DAQmxResetExportedCtrOutEventToggleIdleState(task));}
QString NITask::getExportedHshkEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedHshkEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedHshkEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventOutputTerm(task, data));}
void NITask::resetExportedHshkEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedHshkEventOutputTerm(task));}
int32 NITask::getExportedHshkEventOutputBehavior() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedHshkEventOutputBehavior(task, &__temp__));
	return __temp__;

}
void NITask::setExportedHshkEventOutputBehavior(int32 data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventOutputBehavior(task, data));}
void NITask::resetExportedHshkEventOutputBehavior() {
	DAQmxErrChk(DAQmxResetExportedHshkEventOutputBehavior(task));}
float64 NITask::getExportedHshkEventDelay() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetExportedHshkEventDelay(task, &__temp__));
	return __temp__;

}
void NITask::setExportedHshkEventDelay(float64 data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventDelay(task, data));}
void NITask::resetExportedHshkEventDelay() {
	DAQmxErrChk(DAQmxResetExportedHshkEventDelay(task));}
int32 NITask::getExportedHshkEventInterlockedAssertedLvl() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedHshkEventInterlockedAssertedLvl(task, &__temp__));
	return __temp__;

}
void NITask::setExportedHshkEventInterlockedAssertedLvl(int32 data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventInterlockedAssertedLvl(task, data));}
void NITask::resetExportedHshkEventInterlockedAssertedLvl() {
	DAQmxErrChk(DAQmxResetExportedHshkEventInterlockedAssertedLvl(task));}
bool32 NITask::getExportedHshkEventInterlockedAssertOnStart() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetExportedHshkEventInterlockedAssertOnStart(task, &__temp__));
	return __temp__;

}
void NITask::setExportedHshkEventInterlockedAssertOnStart(bool32 data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventInterlockedAssertOnStart(task, data));}
void NITask::resetExportedHshkEventInterlockedAssertOnStart() {
	DAQmxErrChk(DAQmxResetExportedHshkEventInterlockedAssertOnStart(task));}
float64 NITask::getExportedHshkEventInterlockedDeassertDelay() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetExportedHshkEventInterlockedDeassertDelay(task, &__temp__));
	return __temp__;

}
void NITask::setExportedHshkEventInterlockedDeassertDelay(float64 data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventInterlockedDeassertDelay(task, data));}
void NITask::resetExportedHshkEventInterlockedDeassertDelay() {
	DAQmxErrChk(DAQmxResetExportedHshkEventInterlockedDeassertDelay(task));}
int32 NITask::getExportedHshkEventPulsePolarity() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedHshkEventPulsePolarity(task, &__temp__));
	return __temp__;

}
void NITask::setExportedHshkEventPulsePolarity(int32 data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventPulsePolarity(task, data));}
void NITask::resetExportedHshkEventPulsePolarity() {
	DAQmxErrChk(DAQmxResetExportedHshkEventPulsePolarity(task));}
float64 NITask::getExportedHshkEventPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetExportedHshkEventPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setExportedHshkEventPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetExportedHshkEventPulseWidth(task, data));}
void NITask::resetExportedHshkEventPulseWidth() {
	DAQmxErrChk(DAQmxResetExportedHshkEventPulseWidth(task));}
QString NITask::getExportedRdyForXferEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedRdyForXferEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedRdyForXferEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedRdyForXferEventOutputTerm(task, data));}
void NITask::resetExportedRdyForXferEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedRdyForXferEventOutputTerm(task));}
int32 NITask::getExportedRdyForXferEventLvlActiveLvl() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedRdyForXferEventLvlActiveLvl(task, &__temp__));
	return __temp__;

}
void NITask::setExportedRdyForXferEventLvlActiveLvl(int32 data) {
	DAQmxErrChk(DAQmxSetExportedRdyForXferEventLvlActiveLvl(task, data));}
void NITask::resetExportedRdyForXferEventLvlActiveLvl() {
	DAQmxErrChk(DAQmxResetExportedRdyForXferEventLvlActiveLvl(task));}
int32 NITask::getExportedRdyForXferEventDeassertCond() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedRdyForXferEventDeassertCond(task, &__temp__));
	return __temp__;

}
void NITask::setExportedRdyForXferEventDeassertCond(int32 data) {
	DAQmxErrChk(DAQmxSetExportedRdyForXferEventDeassertCond(task, data));}
void NITask::resetExportedRdyForXferEventDeassertCond() {
	DAQmxErrChk(DAQmxResetExportedRdyForXferEventDeassertCond(task));}
uInt32 NITask::getExportedRdyForXferEventDeassertCondCustomThreshold() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold(task, &__temp__));
	return __temp__;

}
void NITask::setExportedRdyForXferEventDeassertCondCustomThreshold(uInt32 data) {
	DAQmxErrChk(DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold(task, data));}
void NITask::resetExportedRdyForXferEventDeassertCondCustomThreshold() {
	DAQmxErrChk(DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold(task));}
QString NITask::getExportedDataActiveEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedDataActiveEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedDataActiveEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedDataActiveEventOutputTerm(task, data));}
void NITask::resetExportedDataActiveEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedDataActiveEventOutputTerm(task));}
int32 NITask::getExportedDataActiveEventLvlActiveLvl() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedDataActiveEventLvlActiveLvl(task, &__temp__));
	return __temp__;

}
void NITask::setExportedDataActiveEventLvlActiveLvl(int32 data) {
	DAQmxErrChk(DAQmxSetExportedDataActiveEventLvlActiveLvl(task, data));}
void NITask::resetExportedDataActiveEventLvlActiveLvl() {
	DAQmxErrChk(DAQmxResetExportedDataActiveEventLvlActiveLvl(task));}
QString NITask::getExportedRdyForStartEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedRdyForStartEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedRdyForStartEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedRdyForStartEventOutputTerm(task, data));}
void NITask::resetExportedRdyForStartEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedRdyForStartEventOutputTerm(task));}
int32 NITask::getExportedRdyForStartEventLvlActiveLvl() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetExportedRdyForStartEventLvlActiveLvl(task, &__temp__));
	return __temp__;

}
void NITask::setExportedRdyForStartEventLvlActiveLvl(int32 data) {
	DAQmxErrChk(DAQmxSetExportedRdyForStartEventLvlActiveLvl(task, data));}
void NITask::resetExportedRdyForStartEventLvlActiveLvl() {
	DAQmxErrChk(DAQmxResetExportedRdyForStartEventLvlActiveLvl(task));}
QString NITask::getExportedSyncPulseEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedSyncPulseEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedSyncPulseEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedSyncPulseEventOutputTerm(task, data));}
void NITask::resetExportedSyncPulseEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedSyncPulseEventOutputTerm(task));}
QString NITask::getExportedWatchdogExpiredEventOutputTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetExportedWatchdogExpiredEventOutputTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setExportedWatchdogExpiredEventOutputTerm(const char *data) {
	DAQmxErrChk(DAQmxSetExportedWatchdogExpiredEventOutputTerm(task, data));}
void NITask::resetExportedWatchdogExpiredEventOutputTerm() {
	DAQmxErrChk(DAQmxResetExportedWatchdogExpiredEventOutputTerm(task));}
int32 NITask::getReadRelativeTo() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetReadRelativeTo(task, &__temp__));
	return __temp__;

}
void NITask::setReadRelativeTo(int32 data) {
	DAQmxErrChk(DAQmxSetReadRelativeTo(task, data));}
void NITask::resetReadRelativeTo() {
	DAQmxErrChk(DAQmxResetReadRelativeTo(task));}
int32 NITask::getReadOffset() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetReadOffset(task, &__temp__));
	return __temp__;

}
void NITask::setReadOffset(int32 data) {
	DAQmxErrChk(DAQmxSetReadOffset(task, data));}
void NITask::resetReadOffset() {
	DAQmxErrChk(DAQmxResetReadOffset(task));}
QString NITask::getReadChannelsToRead() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadChannelsToRead(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setReadChannelsToRead(const char *data) {
	DAQmxErrChk(DAQmxSetReadChannelsToRead(task, data));}
void NITask::resetReadChannelsToRead() {
	DAQmxErrChk(DAQmxResetReadChannelsToRead(task));}
bool32 NITask::getReadReadAllAvailSamp() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadReadAllAvailSamp(task, &__temp__));
	return __temp__;

}
void NITask::setReadReadAllAvailSamp(bool32 data) {
	DAQmxErrChk(DAQmxSetReadReadAllAvailSamp(task, data));}
void NITask::resetReadReadAllAvailSamp() {
	DAQmxErrChk(DAQmxResetReadReadAllAvailSamp(task));}
bool32 NITask::getReadAutoStart() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadAutoStart(task, &__temp__));
	return __temp__;

}
void NITask::setReadAutoStart(bool32 data) {
	DAQmxErrChk(DAQmxSetReadAutoStart(task, data));}
void NITask::resetReadAutoStart() {
	DAQmxErrChk(DAQmxResetReadAutoStart(task));}
int32 NITask::getReadOverWrite() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetReadOverWrite(task, &__temp__));
	return __temp__;

}
void NITask::setReadOverWrite(int32 data) {
	DAQmxErrChk(DAQmxSetReadOverWrite(task, data));}
void NITask::resetReadOverWrite() {
	DAQmxErrChk(DAQmxResetReadOverWrite(task));}
QString NITask::getLoggingFilePath() {

	char buf[256];
	DAQmxErrChk(DAQmxGetLoggingFilePath(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setLoggingFilePath(const char *data) {
	DAQmxErrChk(DAQmxSetLoggingFilePath(task, data));}
void NITask::resetLoggingFilePath() {
	DAQmxErrChk(DAQmxResetLoggingFilePath(task));}
int32 NITask::getLoggingMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetLoggingMode(task, &__temp__));
	return __temp__;

}
void NITask::setLoggingMode(int32 data) {
	DAQmxErrChk(DAQmxSetLoggingMode(task, data));}
void NITask::resetLoggingMode() {
	DAQmxErrChk(DAQmxResetLoggingMode(task));}
QString NITask::getLoggingTDMSGroupName() {

	char buf[256];
	DAQmxErrChk(DAQmxGetLoggingTDMSGroupName(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setLoggingTDMSGroupName(const char *data) {
	DAQmxErrChk(DAQmxSetLoggingTDMSGroupName(task, data));}
void NITask::resetLoggingTDMSGroupName() {
	DAQmxErrChk(DAQmxResetLoggingTDMSGroupName(task));}
int32 NITask::getLoggingTDMSOperation() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetLoggingTDMSOperation(task, &__temp__));
	return __temp__;

}
void NITask::setLoggingTDMSOperation(int32 data) {
	DAQmxErrChk(DAQmxSetLoggingTDMSOperation(task, data));}
void NITask::resetLoggingTDMSOperation() {
	DAQmxErrChk(DAQmxResetLoggingTDMSOperation(task));}
bool32 NITask::getLoggingPause() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetLoggingPause(task, &__temp__));
	return __temp__;

}
void NITask::setLoggingPause(bool32 data) {
	DAQmxErrChk(DAQmxSetLoggingPause(task, data));}
void NITask::resetLoggingPause() {
	DAQmxErrChk(DAQmxResetLoggingPause(task));}
uInt64 NITask::getLoggingSampsPerFile() {

	uInt64 __temp__;
	DAQmxErrChk(DAQmxGetLoggingSampsPerFile(task, &__temp__));
	return __temp__;

}
void NITask::setLoggingSampsPerFile(uInt64 data) {
	DAQmxErrChk(DAQmxSetLoggingSampsPerFile(task, data));}
void NITask::resetLoggingSampsPerFile() {
	DAQmxErrChk(DAQmxResetLoggingSampsPerFile(task));}
uInt32 NITask::getLoggingFileWriteSize() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetLoggingFileWriteSize(task, &__temp__));
	return __temp__;

}
void NITask::setLoggingFileWriteSize(uInt32 data) {
	DAQmxErrChk(DAQmxSetLoggingFileWriteSize(task, data));}
void NITask::resetLoggingFileWriteSize() {
	DAQmxErrChk(DAQmxResetLoggingFileWriteSize(task));}
uInt64 NITask::getLoggingFilePreallocationSize() {

	uInt64 __temp__;
	DAQmxErrChk(DAQmxGetLoggingFilePreallocationSize(task, &__temp__));
	return __temp__;

}
void NITask::setLoggingFilePreallocationSize(uInt64 data) {
	DAQmxErrChk(DAQmxSetLoggingFilePreallocationSize(task, data));}
void NITask::resetLoggingFilePreallocationSize() {
	DAQmxErrChk(DAQmxResetLoggingFilePreallocationSize(task));}
uInt64 NITask::getReadCurrReadPos() {

	uInt64 __temp__;
	DAQmxErrChk(DAQmxGetReadCurrReadPos(task, &__temp__));
	return __temp__;

}
uInt32 NITask::getReadAvailSampPerChan() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetReadAvailSampPerChan(task, &__temp__));
	return __temp__;

}
uInt64 NITask::getReadTotalSampPerChanAcquired() {

	uInt64 __temp__;
	DAQmxErrChk(DAQmxGetReadTotalSampPerChanAcquired(task, &__temp__));
	return __temp__;

}
bool32 NITask::getReadCommonModeRangeErrorChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadCommonModeRangeErrorChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadCommonModeRangeErrorChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadCommonModeRangeErrorChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadExcitFaultChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadExcitFaultChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadExcitFaultChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadExcitFaultChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadOvercurrentChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadOvercurrentChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadOvercurrentChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadOvercurrentChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadOvertemperatureChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadOvertemperatureChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadOvertemperatureChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadOvertemperatureChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadOpenChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadOpenChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadOpenChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadOpenChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
QString NITask::getReadOpenChansDetails() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadOpenChansDetails(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadOpenCurrentLoopChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadOpenCurrentLoopChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadOpenCurrentLoopChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadOpenCurrentLoopChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadOpenThrmcplChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadOpenThrmcplChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadOpenThrmcplChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadOpenThrmcplChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadOverloadedChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadOverloadedChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadOverloadedChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadOverloadedChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadInputLimitsFaultChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadInputLimitsFaultChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadInputLimitsFaultChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadInputLimitsFaultChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadPLLUnlockedChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadPLLUnlockedChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadPLLUnlockedChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadPLLUnlockedChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadPowerSupplyFaultChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadPowerSupplyFaultChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadPowerSupplyFaultChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadPowerSupplyFaultChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadSyncUnlockedChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadSyncUnlockedChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getReadSyncUnlockedChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadSyncUnlockedChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadAccessoryInsertionOrRemovalDetected() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadAccessoryInsertionOrRemovalDetected(task, &__temp__));
	return __temp__;

}
QString NITask::getReadDevsWithInsertedOrRemovedAccessories() {

	char buf[256];
	DAQmxErrChk(DAQmxGetReadDevsWithInsertedOrRemovedAccessories(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getReadChangeDetectHasOverflowed() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetReadChangeDetectHasOverflowed(task, &__temp__));
	return __temp__;

}
uInt32 NITask::getReadRawDataWidth() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetReadRawDataWidth(task, &__temp__));
	return __temp__;

}
uInt32 NITask::getReadNumChans() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetReadNumChans(task, &__temp__));
	return __temp__;

}
uInt32 NITask::getReadDigitalLinesBytesPerChan() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetReadDigitalLinesBytesPerChan(task, &__temp__));
	return __temp__;

}
int32 NITask::getReadWaitMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetReadWaitMode(task, &__temp__));
	return __temp__;

}
void NITask::setReadWaitMode(int32 data) {
	DAQmxErrChk(DAQmxSetReadWaitMode(task, data));}
void NITask::resetReadWaitMode() {
	DAQmxErrChk(DAQmxResetReadWaitMode(task));}
float64 NITask::getReadSleepTime() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetReadSleepTime(task, &__temp__));
	return __temp__;

}
void NITask::setReadSleepTime(float64 data) {
	DAQmxErrChk(DAQmxSetReadSleepTime(task, data));}
void NITask::resetReadSleepTime() {
	DAQmxErrChk(DAQmxResetReadSleepTime(task));}
bool32 NITask::getRealTimeConvLateErrorsToWarnings() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetRealTimeConvLateErrorsToWarnings(task, &__temp__));
	return __temp__;

}
void NITask::setRealTimeConvLateErrorsToWarnings(bool32 data) {
	DAQmxErrChk(DAQmxSetRealTimeConvLateErrorsToWarnings(task, data));}
void NITask::resetRealTimeConvLateErrorsToWarnings() {
	DAQmxErrChk(DAQmxResetRealTimeConvLateErrorsToWarnings(task));}
uInt32 NITask::getRealTimeNumOfWarmupIters() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetRealTimeNumOfWarmupIters(task, &__temp__));
	return __temp__;

}
void NITask::setRealTimeNumOfWarmupIters(uInt32 data) {
	DAQmxErrChk(DAQmxSetRealTimeNumOfWarmupIters(task, data));}
void NITask::resetRealTimeNumOfWarmupIters() {
	DAQmxErrChk(DAQmxResetRealTimeNumOfWarmupIters(task));}
int32 NITask::getRealTimeWaitForNextSampClkWaitMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetRealTimeWaitForNextSampClkWaitMode(task, &__temp__));
	return __temp__;

}
void NITask::setRealTimeWaitForNextSampClkWaitMode(int32 data) {
	DAQmxErrChk(DAQmxSetRealTimeWaitForNextSampClkWaitMode(task, data));}
void NITask::resetRealTimeWaitForNextSampClkWaitMode() {
	DAQmxErrChk(DAQmxResetRealTimeWaitForNextSampClkWaitMode(task));}
bool32 NITask::getRealTimeReportMissedSamp() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetRealTimeReportMissedSamp(task, &__temp__));
	return __temp__;

}
void NITask::setRealTimeReportMissedSamp(bool32 data) {
	DAQmxErrChk(DAQmxSetRealTimeReportMissedSamp(task, data));}
void NITask::resetRealTimeReportMissedSamp() {
	DAQmxErrChk(DAQmxResetRealTimeReportMissedSamp(task));}
int32 NITask::getRealTimeWriteRecoveryMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetRealTimeWriteRecoveryMode(task, &__temp__));
	return __temp__;

}
void NITask::setRealTimeWriteRecoveryMode(int32 data) {
	DAQmxErrChk(DAQmxSetRealTimeWriteRecoveryMode(task, data));}
void NITask::resetRealTimeWriteRecoveryMode() {
	DAQmxErrChk(DAQmxResetRealTimeWriteRecoveryMode(task));}
int32 NITask::getSwitchScanBreakMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSwitchScanBreakMode(task, &__temp__));
	return __temp__;

}
void NITask::setSwitchScanBreakMode(int32 data) {
	DAQmxErrChk(DAQmxSetSwitchScanBreakMode(task, data));}
void NITask::resetSwitchScanBreakMode() {
	DAQmxErrChk(DAQmxResetSwitchScanBreakMode(task));}
int32 NITask::getSwitchScanRepeatMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSwitchScanRepeatMode(task, &__temp__));
	return __temp__;

}
void NITask::setSwitchScanRepeatMode(int32 data) {
	DAQmxErrChk(DAQmxSetSwitchScanRepeatMode(task, data));}
void NITask::resetSwitchScanRepeatMode() {
	DAQmxErrChk(DAQmxResetSwitchScanRepeatMode(task));}
bool32 NITask::getSwitchScanWaitingForAdv() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetSwitchScanWaitingForAdv(task, &__temp__));
	return __temp__;

}
QString NITask::getTaskName() {

	char buf[256];
	DAQmxErrChk(DAQmxGetTaskName(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
QString NITask::getTaskChannels() {

	char buf[256];
	DAQmxErrChk(DAQmxGetTaskChannels(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
uInt32 NITask::getTaskNumChans() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetTaskNumChans(task, &__temp__));
	return __temp__;

}
QString NITask::getTaskDevices() {

	char buf[256];
	DAQmxErrChk(DAQmxGetTaskDevices(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
uInt32 NITask::getTaskNumDevices() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetTaskNumDevices(task, &__temp__));
	return __temp__;

}
bool32 NITask::getTaskComplete() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetTaskComplete(task, &__temp__));
	return __temp__;

}
int32 NITask::getSampQuantSampMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSampQuantSampMode(task, &__temp__));
	return __temp__;

}
void NITask::setSampQuantSampMode(int32 data) {
	DAQmxErrChk(DAQmxSetSampQuantSampMode(task, data));}
void NITask::resetSampQuantSampMode() {
	DAQmxErrChk(DAQmxResetSampQuantSampMode(task));}
uInt64 NITask::getSampQuantSampPerChan() {

	uInt64 __temp__;
	DAQmxErrChk(DAQmxGetSampQuantSampPerChan(task, &__temp__));
	return __temp__;

}
void NITask::setSampQuantSampPerChan(uInt64 data) {
	DAQmxErrChk(DAQmxSetSampQuantSampPerChan(task, data));}
void NITask::resetSampQuantSampPerChan() {
	DAQmxErrChk(DAQmxResetSampQuantSampPerChan(task));}
int32 NITask::getSampTimingType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSampTimingType(task, &__temp__));
	return __temp__;

}
void NITask::setSampTimingType(int32 data) {
	DAQmxErrChk(DAQmxSetSampTimingType(task, data));}
void NITask::resetSampTimingType() {
	DAQmxErrChk(DAQmxResetSampTimingType(task));}
float64 NITask::getSampClkRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSampClkRate(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkRate(float64 data) {
	DAQmxErrChk(DAQmxSetSampClkRate(task, data));}
void NITask::resetSampClkRate() {
	DAQmxErrChk(DAQmxResetSampClkRate(task));}
float64 NITask::getSampClkMaxRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSampClkMaxRate(task, &__temp__));
	return __temp__;

}
QString NITask::getSampClkSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetSampClkSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setSampClkSrc(const char *data) {
	DAQmxErrChk(DAQmxSetSampClkSrc(task, data));}
void NITask::resetSampClkSrc() {
	DAQmxErrChk(DAQmxResetSampClkSrc(task));}
int32 NITask::getSampClkActiveEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkActiveEdge(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkActiveEdge(int32 data) {
	DAQmxErrChk(DAQmxSetSampClkActiveEdge(task, data));}
void NITask::resetSampClkActiveEdge() {
	DAQmxErrChk(DAQmxResetSampClkActiveEdge(task));}
int32 NITask::getSampClkOverrunBehavior() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkOverrunBehavior(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkOverrunBehavior(int32 data) {
	DAQmxErrChk(DAQmxSetSampClkOverrunBehavior(task, data));}
void NITask::resetSampClkOverrunBehavior() {
	DAQmxErrChk(DAQmxResetSampClkOverrunBehavior(task));}
int32 NITask::getSampClkUnderflowBehavior() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkUnderflowBehavior(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkUnderflowBehavior(int32 data) {
	DAQmxErrChk(DAQmxSetSampClkUnderflowBehavior(task, data));}
void NITask::resetSampClkUnderflowBehavior() {
	DAQmxErrChk(DAQmxResetSampClkUnderflowBehavior(task));}
uInt32 NITask::getSampClkTimebaseDiv() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkTimebaseDiv(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkTimebaseDiv(uInt32 data) {
	DAQmxErrChk(DAQmxSetSampClkTimebaseDiv(task, data));}
void NITask::resetSampClkTimebaseDiv() {
	DAQmxErrChk(DAQmxResetSampClkTimebaseDiv(task));}
QString NITask::getSampClkTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetSampClkTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
float64 NITask::getSampClkTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSampClkTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetSampClkTimebaseRate(task, data));}
void NITask::resetSampClkTimebaseRate() {
	DAQmxErrChk(DAQmxResetSampClkTimebaseRate(task));}
QString NITask::getSampClkTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetSampClkTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setSampClkTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetSampClkTimebaseSrc(task, data));}
void NITask::resetSampClkTimebaseSrc() {
	DAQmxErrChk(DAQmxResetSampClkTimebaseSrc(task));}
int32 NITask::getSampClkTimebaseActiveEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkTimebaseActiveEdge(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkTimebaseActiveEdge(int32 data) {
	DAQmxErrChk(DAQmxSetSampClkTimebaseActiveEdge(task, data));}
void NITask::resetSampClkTimebaseActiveEdge() {
	DAQmxErrChk(DAQmxResetSampClkTimebaseActiveEdge(task));}
uInt32 NITask::getSampClkTimebaseMasterTimebaseDiv() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkTimebaseMasterTimebaseDiv(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkTimebaseMasterTimebaseDiv(uInt32 data) {
	DAQmxErrChk(DAQmxSetSampClkTimebaseMasterTimebaseDiv(task, data));}
void NITask::resetSampClkTimebaseMasterTimebaseDiv() {
	DAQmxErrChk(DAQmxResetSampClkTimebaseMasterTimebaseDiv(task));}
QString NITask::getSampClkTimebaseTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetSampClkTimebaseTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getSampClkDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetSampClkDigFltrEnable(task, data));}
void NITask::resetSampClkDigFltrEnable() {
	DAQmxErrChk(DAQmxResetSampClkDigFltrEnable(task));}
float64 NITask::getSampClkDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSampClkDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetSampClkDigFltrMinPulseWidth(task, data));}
void NITask::resetSampClkDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetSampClkDigFltrMinPulseWidth(task));}
QString NITask::getSampClkDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetSampClkDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setSampClkDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetSampClkDigFltrTimebaseSrc(task, data));}
void NITask::resetSampClkDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetSampClkDigFltrTimebaseSrc(task));}
float64 NITask::getSampClkDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSampClkDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetSampClkDigFltrTimebaseRate(task, data));}
void NITask::resetSampClkDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetSampClkDigFltrTimebaseRate(task));}
bool32 NITask::getSampClkDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetSampClkDigSyncEnable(task, data));}
void NITask::resetSampClkDigSyncEnable() {
	DAQmxErrChk(DAQmxResetSampClkDigSyncEnable(task));}
bool32 NITask::getSampClkWriteWfmUseInitialWfmDT() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkWriteWfmUseInitialWfmDT(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkWriteWfmUseInitialWfmDT(bool32 data) {
	DAQmxErrChk(DAQmxSetSampClkWriteWfmUseInitialWfmDT(task, data));}
void NITask::resetSampClkWriteWfmUseInitialWfmDT() {
	DAQmxErrChk(DAQmxResetSampClkWriteWfmUseInitialWfmDT(task));}
float64 NITask::getHshkDelayAfterXfer() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetHshkDelayAfterXfer(task, &__temp__));
	return __temp__;

}
void NITask::setHshkDelayAfterXfer(float64 data) {
	DAQmxErrChk(DAQmxSetHshkDelayAfterXfer(task, data));}
void NITask::resetHshkDelayAfterXfer() {
	DAQmxErrChk(DAQmxResetHshkDelayAfterXfer(task));}
int32 NITask::getHshkStartCond() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetHshkStartCond(task, &__temp__));
	return __temp__;

}
void NITask::setHshkStartCond(int32 data) {
	DAQmxErrChk(DAQmxSetHshkStartCond(task, data));}
void NITask::resetHshkStartCond() {
	DAQmxErrChk(DAQmxResetHshkStartCond(task));}
int32 NITask::getHshkSampleInputDataWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetHshkSampleInputDataWhen(task, &__temp__));
	return __temp__;

}
void NITask::setHshkSampleInputDataWhen(int32 data) {
	DAQmxErrChk(DAQmxSetHshkSampleInputDataWhen(task, data));}
void NITask::resetHshkSampleInputDataWhen() {
	DAQmxErrChk(DAQmxResetHshkSampleInputDataWhen(task));}
QString NITask::getChangeDetectDIRisingEdgePhysicalChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetChangeDetectDIRisingEdgePhysicalChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setChangeDetectDIRisingEdgePhysicalChans(const char *data) {
	DAQmxErrChk(DAQmxSetChangeDetectDIRisingEdgePhysicalChans(task, data));}
void NITask::resetChangeDetectDIRisingEdgePhysicalChans() {
	DAQmxErrChk(DAQmxResetChangeDetectDIRisingEdgePhysicalChans(task));}
QString NITask::getChangeDetectDIFallingEdgePhysicalChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetChangeDetectDIFallingEdgePhysicalChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setChangeDetectDIFallingEdgePhysicalChans(const char *data) {
	DAQmxErrChk(DAQmxSetChangeDetectDIFallingEdgePhysicalChans(task, data));}
void NITask::resetChangeDetectDIFallingEdgePhysicalChans() {
	DAQmxErrChk(DAQmxResetChangeDetectDIFallingEdgePhysicalChans(task));}
bool32 NITask::getChangeDetectDITristate() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetChangeDetectDITristate(task, &__temp__));
	return __temp__;

}
void NITask::setChangeDetectDITristate(bool32 data) {
	DAQmxErrChk(DAQmxSetChangeDetectDITristate(task, data));}
void NITask::resetChangeDetectDITristate() {
	DAQmxErrChk(DAQmxResetChangeDetectDITristate(task));}
bool32 NITask::getOnDemandSimultaneousAOEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetOnDemandSimultaneousAOEnable(task, &__temp__));
	return __temp__;

}
void NITask::setOnDemandSimultaneousAOEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetOnDemandSimultaneousAOEnable(task, data));}
void NITask::resetOnDemandSimultaneousAOEnable() {
	DAQmxErrChk(DAQmxResetOnDemandSimultaneousAOEnable(task));}
int32 NITask::getImplicitUnderflowBehavior() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetImplicitUnderflowBehavior(task, &__temp__));
	return __temp__;

}
void NITask::setImplicitUnderflowBehavior(int32 data) {
	DAQmxErrChk(DAQmxSetImplicitUnderflowBehavior(task, data));}
void NITask::resetImplicitUnderflowBehavior() {
	DAQmxErrChk(DAQmxResetImplicitUnderflowBehavior(task));}
float64 NITask::getAIConvRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAIConvRate(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvRate(float64 data) {
	DAQmxErrChk(DAQmxSetAIConvRate(task, data));}
void NITask::resetAIConvRate() {
	DAQmxErrChk(DAQmxResetAIConvRate(task));}
void NITask::getAIConvRateEx(const char deviceNames[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIConvRateEx(task, deviceNames, data));}
void NITask::setAIConvRateEx(const char deviceNames[], float64 data) {
	DAQmxErrChk(DAQmxSetAIConvRateEx(task, deviceNames, data));}
void NITask::resetAIConvRateEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvRateEx(task, deviceNames));}
float64 NITask::getAIConvMaxRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAIConvMaxRate(task, &__temp__));
	return __temp__;

}
void NITask::getAIConvMaxRateEx(const char deviceNames[], float64 *data) {
	DAQmxErrChk(DAQmxGetAIConvMaxRateEx(task, deviceNames, data));}
QString NITask::getAIConvSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIConvSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAIConvSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAIConvSrc(task, data));}
void NITask::resetAIConvSrc() {
	DAQmxErrChk(DAQmxResetAIConvSrc(task));}
QString NITask::getAIConvSrcEx(const char deviceNames[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIConvSrcEx(task, deviceNames, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAIConvSrcEx(const char deviceNames[], const char *data) {
	DAQmxErrChk(DAQmxSetAIConvSrcEx(task, deviceNames, data));}
void NITask::resetAIConvSrcEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvSrcEx(task, deviceNames));}
int32 NITask::getAIConvActiveEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAIConvActiveEdge(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvActiveEdge(int32 data) {
	DAQmxErrChk(DAQmxSetAIConvActiveEdge(task, data));}
void NITask::resetAIConvActiveEdge() {
	DAQmxErrChk(DAQmxResetAIConvActiveEdge(task));}
void NITask::getAIConvActiveEdgeEx(const char deviceNames[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIConvActiveEdgeEx(task, deviceNames, data));}
void NITask::setAIConvActiveEdgeEx(const char deviceNames[], int32 data) {
	DAQmxErrChk(DAQmxSetAIConvActiveEdgeEx(task, deviceNames, data));}
void NITask::resetAIConvActiveEdgeEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvActiveEdgeEx(task, deviceNames));}
uInt32 NITask::getAIConvTimebaseDiv() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetAIConvTimebaseDiv(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvTimebaseDiv(uInt32 data) {
	DAQmxErrChk(DAQmxSetAIConvTimebaseDiv(task, data));}
void NITask::resetAIConvTimebaseDiv() {
	DAQmxErrChk(DAQmxResetAIConvTimebaseDiv(task));}
void NITask::getAIConvTimebaseDivEx(const char deviceNames[], uInt32 *data) {
	DAQmxErrChk(DAQmxGetAIConvTimebaseDivEx(task, deviceNames, data));}
void NITask::setAIConvTimebaseDivEx(const char deviceNames[], uInt32 data) {
	DAQmxErrChk(DAQmxSetAIConvTimebaseDivEx(task, deviceNames, data));}
void NITask::resetAIConvTimebaseDivEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvTimebaseDivEx(task, deviceNames));}
int32 NITask::getAIConvTimebaseSrc() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAIConvTimebaseSrc(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvTimebaseSrc(int32 data) {
	DAQmxErrChk(DAQmxSetAIConvTimebaseSrc(task, data));}
void NITask::resetAIConvTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAIConvTimebaseSrc(task));}
void NITask::getAIConvTimebaseSrcEx(const char deviceNames[], int32 *data) {
	DAQmxErrChk(DAQmxGetAIConvTimebaseSrcEx(task, deviceNames, data));}
void NITask::setAIConvTimebaseSrcEx(const char deviceNames[], int32 data) {
	DAQmxErrChk(DAQmxSetAIConvTimebaseSrcEx(task, deviceNames, data));}
void NITask::resetAIConvTimebaseSrcEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvTimebaseSrcEx(task, deviceNames));}
int32 NITask::getDelayFromSampClkDelayUnits() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDelayFromSampClkDelayUnits(task, &__temp__));
	return __temp__;

}
void NITask::setDelayFromSampClkDelayUnits(int32 data) {
	DAQmxErrChk(DAQmxSetDelayFromSampClkDelayUnits(task, data));}
void NITask::resetDelayFromSampClkDelayUnits() {
	DAQmxErrChk(DAQmxResetDelayFromSampClkDelayUnits(task));}
void NITask::getDelayFromSampClkDelayUnitsEx(const char deviceNames[],
					  int32 *data) {
	DAQmxErrChk(DAQmxGetDelayFromSampClkDelayUnitsEx(task, deviceNames, data));}
void NITask::setDelayFromSampClkDelayUnitsEx(const char deviceNames[],
					  int32 data) {
	DAQmxErrChk(DAQmxSetDelayFromSampClkDelayUnitsEx(task, deviceNames, data));}
void NITask::resetDelayFromSampClkDelayUnitsEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetDelayFromSampClkDelayUnitsEx(task, deviceNames));}
float64 NITask::getDelayFromSampClkDelay() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDelayFromSampClkDelay(task, &__temp__));
	return __temp__;

}
void NITask::setDelayFromSampClkDelay(float64 data) {
	DAQmxErrChk(DAQmxSetDelayFromSampClkDelay(task, data));}
void NITask::resetDelayFromSampClkDelay() {
	DAQmxErrChk(DAQmxResetDelayFromSampClkDelay(task));}
void NITask::getDelayFromSampClkDelayEx(const char deviceNames[], float64 *data) {
	DAQmxErrChk(DAQmxGetDelayFromSampClkDelayEx(task, deviceNames, data));}
void NITask::setDelayFromSampClkDelayEx(const char deviceNames[], float64 data) {
	DAQmxErrChk(DAQmxSetDelayFromSampClkDelayEx(task, deviceNames, data));}
void NITask::resetDelayFromSampClkDelayEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetDelayFromSampClkDelayEx(task, deviceNames));}
bool32 NITask::getAIConvDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAIConvDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrEnable(task, data));}
void NITask::resetAIConvDigFltrEnable() {
	DAQmxErrChk(DAQmxResetAIConvDigFltrEnable(task));}
void NITask::getAIConvDigFltrEnableEx(const char deviceNames[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIConvDigFltrEnableEx(task, deviceNames, data));}
void NITask::setAIConvDigFltrEnableEx(const char deviceNames[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrEnableEx(task, deviceNames, data));}
void NITask::resetAIConvDigFltrEnableEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvDigFltrEnableEx(task, deviceNames));}
float64 NITask::getAIConvDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAIConvDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrMinPulseWidth(task, data));}
void NITask::resetAIConvDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetAIConvDigFltrMinPulseWidth(task));}
void NITask::getAIConvDigFltrMinPulseWidthEx(const char deviceNames[],
					  float64 *data) {
	DAQmxErrChk(DAQmxGetAIConvDigFltrMinPulseWidthEx(task, deviceNames, data));}
void NITask::setAIConvDigFltrMinPulseWidthEx(const char deviceNames[],
					  float64 data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrMinPulseWidthEx(task, deviceNames, data));}
void NITask::resetAIConvDigFltrMinPulseWidthEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvDigFltrMinPulseWidthEx(task, deviceNames));}
QString NITask::getAIConvDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIConvDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAIConvDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrTimebaseSrc(task, data));}
void NITask::resetAIConvDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAIConvDigFltrTimebaseSrc(task));}
QString NITask::getAIConvDigFltrTimebaseSrcEx(const char deviceNames[]) {

	char buf[256];
	DAQmxErrChk(DAQmxGetAIConvDigFltrTimebaseSrcEx(task, deviceNames, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAIConvDigFltrTimebaseSrcEx(const char deviceNames[],
					const char *data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrTimebaseSrcEx(task, deviceNames, data));}
void NITask::resetAIConvDigFltrTimebaseSrcEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvDigFltrTimebaseSrcEx(task, deviceNames));}
float64 NITask::getAIConvDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAIConvDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrTimebaseRate(task, data));}
void NITask::resetAIConvDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetAIConvDigFltrTimebaseRate(task));}
void NITask::getAIConvDigFltrTimebaseRateEx(const char deviceNames[],
					 float64 *data) {
	DAQmxErrChk(DAQmxGetAIConvDigFltrTimebaseRateEx(task, deviceNames, data));}
void NITask::setAIConvDigFltrTimebaseRateEx(const char deviceNames[],
					 float64 data) {
	DAQmxErrChk(DAQmxSetAIConvDigFltrTimebaseRateEx(task, deviceNames, data));}
void NITask::resetAIConvDigFltrTimebaseRateEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvDigFltrTimebaseRateEx(task, deviceNames));}
bool32 NITask::getAIConvDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAIConvDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAIConvDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAIConvDigSyncEnable(task, data));}
void NITask::resetAIConvDigSyncEnable() {
	DAQmxErrChk(DAQmxResetAIConvDigSyncEnable(task));}
void NITask::getAIConvDigSyncEnableEx(const char deviceNames[], bool32 *data) {
	DAQmxErrChk(DAQmxGetAIConvDigSyncEnableEx(task, deviceNames, data));}
void NITask::setAIConvDigSyncEnableEx(const char deviceNames[], bool32 data) {
	DAQmxErrChk(DAQmxSetAIConvDigSyncEnableEx(task, deviceNames, data));}
void NITask::resetAIConvDigSyncEnableEx(const char deviceNames[]) {
	DAQmxErrChk(DAQmxResetAIConvDigSyncEnableEx(task, deviceNames));}
float64 NITask::getMasterTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetMasterTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setMasterTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetMasterTimebaseRate(task, data));}
void NITask::resetMasterTimebaseRate() {
	DAQmxErrChk(DAQmxResetMasterTimebaseRate(task));}
QString NITask::getMasterTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetMasterTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setMasterTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetMasterTimebaseSrc(task, data));}
void NITask::resetMasterTimebaseSrc() {
	DAQmxErrChk(DAQmxResetMasterTimebaseSrc(task));}
float64 NITask::getRefClkRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetRefClkRate(task, &__temp__));
	return __temp__;

}
void NITask::setRefClkRate(float64 data) {
	DAQmxErrChk(DAQmxSetRefClkRate(task, data));}
void NITask::resetRefClkRate() {
	DAQmxErrChk(DAQmxResetRefClkRate(task));}
QString NITask::getRefClkSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetRefClkSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setRefClkSrc(const char *data) {
	DAQmxErrChk(DAQmxSetRefClkSrc(task, data));}
void NITask::resetRefClkSrc() {
	DAQmxErrChk(DAQmxResetRefClkSrc(task));}
int32 NITask::getSyncPulseType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSyncPulseType(task, &__temp__));
	return __temp__;

}
void NITask::setSyncPulseType(int32 data) {
	DAQmxErrChk(DAQmxSetSyncPulseType(task, data));}
void NITask::resetSyncPulseType() {
	DAQmxErrChk(DAQmxResetSyncPulseType(task));}
QString NITask::getSyncPulseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetSyncPulseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setSyncPulseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetSyncPulseSrc(task, data));}
void NITask::resetSyncPulseSrc() {
	DAQmxErrChk(DAQmxResetSyncPulseSrc(task));}
CVIAbsoluteTime NITask::getSyncPulseTimeWhen() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetSyncPulseTimeWhen(task, &__temp__));
	return __temp__;

}
void NITask::setSyncPulseTimeWhen(CVIAbsoluteTime data) {
	DAQmxErrChk(DAQmxSetSyncPulseTimeWhen(task, data));}
void NITask::resetSyncPulseTimeWhen() {
	DAQmxErrChk(DAQmxResetSyncPulseTimeWhen(task));}
int32 NITask::getSyncPulseTimeTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSyncPulseTimeTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setSyncPulseTimeTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetSyncPulseTimeTimescale(task, data));}
void NITask::resetSyncPulseTimeTimescale() {
	DAQmxErrChk(DAQmxResetSyncPulseTimeTimescale(task));}
float64 NITask::getSyncPulseSyncTime() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSyncPulseSyncTime(task, &__temp__));
	return __temp__;

}
float64 NITask::getSyncPulseMinDelayToStart() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSyncPulseMinDelayToStart(task, &__temp__));
	return __temp__;

}
void NITask::setSyncPulseMinDelayToStart(float64 data) {
	DAQmxErrChk(DAQmxSetSyncPulseMinDelayToStart(task, data));}
void NITask::resetSyncPulseMinDelayToStart() {
	DAQmxErrChk(DAQmxResetSyncPulseMinDelayToStart(task));}
float64 NITask::getSyncPulseResetTime() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSyncPulseResetTime(task, &__temp__));
	return __temp__;

}
float64 NITask::getSyncPulseResetDelay() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetSyncPulseResetDelay(task, &__temp__));
	return __temp__;

}
void NITask::setSyncPulseResetDelay(float64 data) {
	DAQmxErrChk(DAQmxSetSyncPulseResetDelay(task, data));}
void NITask::resetSyncPulseResetDelay() {
	DAQmxErrChk(DAQmxResetSyncPulseResetDelay(task));}
QString NITask::getSyncPulseTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetSyncPulseTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
uInt32 NITask::getSyncClkInterval() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetSyncClkInterval(task, &__temp__));
	return __temp__;

}
void NITask::setSyncClkInterval(uInt32 data) {
	DAQmxErrChk(DAQmxSetSyncClkInterval(task, data));}
void NITask::resetSyncClkInterval() {
	DAQmxErrChk(DAQmxResetSyncClkInterval(task));}
uInt32 NITask::getSampTimingEngine() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetSampTimingEngine(task, &__temp__));
	return __temp__;

}
void NITask::setSampTimingEngine(uInt32 data) {
	DAQmxErrChk(DAQmxSetSampTimingEngine(task, data));}
void NITask::resetSampTimingEngine() {
	DAQmxErrChk(DAQmxResetSampTimingEngine(task));}
bool32 NITask::getFirstSampTimestampEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetFirstSampTimestampEnable(task, &__temp__));
	return __temp__;

}
void NITask::setFirstSampTimestampEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetFirstSampTimestampEnable(task, data));}
void NITask::resetFirstSampTimestampEnable() {
	DAQmxErrChk(DAQmxResetFirstSampTimestampEnable(task));}
int32 NITask::getFirstSampTimestampTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetFirstSampTimestampTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setFirstSampTimestampTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetFirstSampTimestampTimescale(task, data));}
void NITask::resetFirstSampTimestampTimescale() {
	DAQmxErrChk(DAQmxResetFirstSampTimestampTimescale(task));}
CVIAbsoluteTime NITask::getFirstSampTimestampVal() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetFirstSampTimestampVal(task, &__temp__));
	return __temp__;

}
CVIAbsoluteTime NITask::getFirstSampClkWhen() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetFirstSampClkWhen(task, &__temp__));
	return __temp__;

}
void NITask::setFirstSampClkWhen(CVIAbsoluteTime data) {
	DAQmxErrChk(DAQmxSetFirstSampClkWhen(task, data));}
void NITask::resetFirstSampClkWhen() {
	DAQmxErrChk(DAQmxResetFirstSampClkWhen(task));}
int32 NITask::getFirstSampClkTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetFirstSampClkTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setFirstSampClkTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetFirstSampClkTimescale(task, data));}
void NITask::resetFirstSampClkTimescale() {
	DAQmxErrChk(DAQmxResetFirstSampClkTimescale(task));}
int32 NITask::getStartTrigType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigType(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigType(int32 data) {
	DAQmxErrChk(DAQmxSetStartTrigType(task, data));}
void NITask::resetStartTrigType() {
	DAQmxErrChk(DAQmxResetStartTrigType(task));}
QString NITask::getStartTrigTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetStartTrigTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
QString NITask::getDigEdgeStartTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeStartTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeStartTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeStartTrigSrc(task, data));}
void NITask::resetDigEdgeStartTrigSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeStartTrigSrc(task));}
int32 NITask::getDigEdgeStartTrigEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeStartTrigEdge(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeStartTrigEdge(int32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeStartTrigEdge(task, data));}
void NITask::resetDigEdgeStartTrigEdge() {
	DAQmxErrChk(DAQmxResetDigEdgeStartTrigEdge(task));}
bool32 NITask::getDigEdgeStartTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeStartTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeStartTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeStartTrigDigFltrEnable(task, data));}
void NITask::resetDigEdgeStartTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetDigEdgeStartTrigDigFltrEnable(task));}
float64 NITask::getDigEdgeStartTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeStartTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetDigEdgeStartTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth(task));}
QString NITask::getDigEdgeStartTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeStartTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetDigEdgeStartTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc(task));}
float64 NITask::getDigEdgeStartTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeStartTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate(task, data));}
void NITask::resetDigEdgeStartTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate(task));}
bool32 NITask::getDigEdgeStartTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeStartTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeStartTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeStartTrigDigSyncEnable(task, data));}
void NITask::resetDigEdgeStartTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetDigEdgeStartTrigDigSyncEnable(task));}
QString NITask::getDigPatternStartTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigPatternStartTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigPatternStartTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigPatternStartTrigSrc(task, data));}
void NITask::resetDigPatternStartTrigSrc() {
	DAQmxErrChk(DAQmxResetDigPatternStartTrigSrc(task));}
QString NITask::getDigPatternStartTrigPattern() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigPatternStartTrigPattern(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigPatternStartTrigPattern(const char *data) {
	DAQmxErrChk(DAQmxSetDigPatternStartTrigPattern(task, data));}
void NITask::resetDigPatternStartTrigPattern() {
	DAQmxErrChk(DAQmxResetDigPatternStartTrigPattern(task));}
int32 NITask::getDigPatternStartTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigPatternStartTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setDigPatternStartTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetDigPatternStartTrigWhen(task, data));}
void NITask::resetDigPatternStartTrigWhen() {
	DAQmxErrChk(DAQmxResetDigPatternStartTrigWhen(task));}
QString NITask::getAnlgEdgeStartTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgEdgeStartTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigSrc(task, data));}
void NITask::resetAnlgEdgeStartTrigSrc() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigSrc(task));}
int32 NITask::getAnlgEdgeStartTrigSlope() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigSlope(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigSlope(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigSlope(task, data));}
void NITask::resetAnlgEdgeStartTrigSlope() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigSlope(task));}
float64 NITask::getAnlgEdgeStartTrigLvl() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigLvl(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigLvl(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigLvl(task, data));}
void NITask::resetAnlgEdgeStartTrigLvl() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigLvl(task));}
float64 NITask::getAnlgEdgeStartTrigHyst() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigHyst(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigHyst(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigHyst(task, data));}
void NITask::resetAnlgEdgeStartTrigHyst() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigHyst(task));}
int32 NITask::getAnlgEdgeStartTrigCoupling() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigCoupling(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigCoupling(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigCoupling(task, data));}
void NITask::resetAnlgEdgeStartTrigCoupling() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigCoupling(task));}
bool32 NITask::getAnlgEdgeStartTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigDigFltrEnable(task, data));}
void NITask::resetAnlgEdgeStartTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigDigFltrEnable(task));}
float64 NITask::getAnlgEdgeStartTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetAnlgEdgeStartTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth(task));}
QString NITask::getAnlgEdgeStartTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgEdgeStartTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetAnlgEdgeStartTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc(task));}
float64 NITask::getAnlgEdgeStartTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate(task, data));}
void NITask::resetAnlgEdgeStartTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate(task));}
bool32 NITask::getAnlgEdgeStartTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeStartTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeStartTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeStartTrigDigSyncEnable(task, data));}
void NITask::resetAnlgEdgeStartTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetAnlgEdgeStartTrigDigSyncEnable(task));}
QString NITask::getAnlgMultiEdgeStartTrigSrcs() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeStartTrigSrcs(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgMultiEdgeStartTrigSrcs(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeStartTrigSrcs(task, data));}
void NITask::resetAnlgMultiEdgeStartTrigSrcs() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeStartTrigSrcs(task));}
void NITask::getAnlgMultiEdgeStartTrigSlopes(int32 *data,
					  uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeStartTrigSlopes(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeStartTrigSlopes(int32 *data,
					  uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeStartTrigSlopes(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeStartTrigSlopes() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeStartTrigSlopes(task));}
void NITask::getAnlgMultiEdgeStartTrigLvls(float64 *data,
					uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeStartTrigLvls(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeStartTrigLvls(float64 *data,
					uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeStartTrigLvls(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeStartTrigLvls() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeStartTrigLvls(task));}
void NITask::getAnlgMultiEdgeStartTrigHysts(float64 *data,
					 uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeStartTrigHysts(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeStartTrigHysts(float64 *data,
					 uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeStartTrigHysts(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeStartTrigHysts() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeStartTrigHysts(task));}
void NITask::getAnlgMultiEdgeStartTrigCouplings(int32 *data,
					     uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeStartTrigCouplings(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeStartTrigCouplings(int32 *data,
					     uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeStartTrigCouplings(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeStartTrigCouplings() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeStartTrigCouplings(task));}
QString NITask::getAnlgWinStartTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgWinStartTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigSrc(task, data));}
void NITask::resetAnlgWinStartTrigSrc() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigSrc(task));}
int32 NITask::getAnlgWinStartTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigWhen(task, data));}
void NITask::resetAnlgWinStartTrigWhen() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigWhen(task));}
float64 NITask::getAnlgWinStartTrigTop() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigTop(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigTop(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigTop(task, data));}
void NITask::resetAnlgWinStartTrigTop() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigTop(task));}
float64 NITask::getAnlgWinStartTrigBtm() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigBtm(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigBtm(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigBtm(task, data));}
void NITask::resetAnlgWinStartTrigBtm() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigBtm(task));}
int32 NITask::getAnlgWinStartTrigCoupling() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigCoupling(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigCoupling(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigCoupling(task, data));}
void NITask::resetAnlgWinStartTrigCoupling() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigCoupling(task));}
bool32 NITask::getAnlgWinStartTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigDigFltrEnable(task, data));}
void NITask::resetAnlgWinStartTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigDigFltrEnable(task));}
float64 NITask::getAnlgWinStartTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetAnlgWinStartTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth(task));}
QString NITask::getAnlgWinStartTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgWinStartTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetAnlgWinStartTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc(task));}
float64 NITask::getAnlgWinStartTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate(task, data));}
void NITask::resetAnlgWinStartTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate(task));}
bool32 NITask::getAnlgWinStartTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinStartTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinStartTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinStartTrigDigSyncEnable(task, data));}
void NITask::resetAnlgWinStartTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetAnlgWinStartTrigDigSyncEnable(task));}
CVIAbsoluteTime NITask::getStartTrigTrigWhen() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetStartTrigTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigTrigWhen(CVIAbsoluteTime data) {
	DAQmxErrChk(DAQmxSetStartTrigTrigWhen(task, data));}
void NITask::resetStartTrigTrigWhen() {
	DAQmxErrChk(DAQmxResetStartTrigTrigWhen(task));}
int32 NITask::getStartTrigTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetStartTrigTimescale(task, data));}
void NITask::resetStartTrigTimescale() {
	DAQmxErrChk(DAQmxResetStartTrigTimescale(task));}
bool32 NITask::getStartTrigTimestampEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigTimestampEnable(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigTimestampEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetStartTrigTimestampEnable(task, data));}
void NITask::resetStartTrigTimestampEnable() {
	DAQmxErrChk(DAQmxResetStartTrigTimestampEnable(task));}
int32 NITask::getStartTrigTimestampTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigTimestampTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigTimestampTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetStartTrigTimestampTimescale(task, data));}
void NITask::resetStartTrigTimestampTimescale() {
	DAQmxErrChk(DAQmxResetStartTrigTimestampTimescale(task));}
CVIAbsoluteTime NITask::getStartTrigTimestampVal() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetStartTrigTimestampVal(task, &__temp__));
	return __temp__;

}
float64 NITask::getStartTrigDelay() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigDelay(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigDelay(float64 data) {
	DAQmxErrChk(DAQmxSetStartTrigDelay(task, data));}
void NITask::resetStartTrigDelay() {
	DAQmxErrChk(DAQmxResetStartTrigDelay(task));}
int32 NITask::getStartTrigDelayUnits() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigDelayUnits(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigDelayUnits(int32 data) {
	DAQmxErrChk(DAQmxSetStartTrigDelayUnits(task, data));}
void NITask::resetStartTrigDelayUnits() {
	DAQmxErrChk(DAQmxResetStartTrigDelayUnits(task));}
bool32 NITask::getStartTrigRetriggerable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigRetriggerable(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigRetriggerable(bool32 data) {
	DAQmxErrChk(DAQmxSetStartTrigRetriggerable(task, data));}
void NITask::resetStartTrigRetriggerable() {
	DAQmxErrChk(DAQmxResetStartTrigRetriggerable(task));}
float64 NITask::getStartTrigTrigWin() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigTrigWin(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigTrigWin(float64 data) {
	DAQmxErrChk(DAQmxSetStartTrigTrigWin(task, data));}
void NITask::resetStartTrigTrigWin() {
	DAQmxErrChk(DAQmxResetStartTrigTrigWin(task));}
float64 NITask::getStartTrigRetriggerWin() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigRetriggerWin(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigRetriggerWin(float64 data) {
	DAQmxErrChk(DAQmxSetStartTrigRetriggerWin(task, data));}
void NITask::resetStartTrigRetriggerWin() {
	DAQmxErrChk(DAQmxResetStartTrigRetriggerWin(task));}
uInt32 NITask::getStartTrigMaxNumTrigsToDetect() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetStartTrigMaxNumTrigsToDetect(task, &__temp__));
	return __temp__;

}
void NITask::setStartTrigMaxNumTrigsToDetect(uInt32 data) {
	DAQmxErrChk(DAQmxSetStartTrigMaxNumTrigsToDetect(task, data));}
void NITask::resetStartTrigMaxNumTrigsToDetect() {
	DAQmxErrChk(DAQmxResetStartTrigMaxNumTrigsToDetect(task));}
int32 NITask::getRefTrigType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigType(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigType(int32 data) {
	DAQmxErrChk(DAQmxSetRefTrigType(task, data));}
void NITask::resetRefTrigType() {
	DAQmxErrChk(DAQmxResetRefTrigType(task));}
uInt32 NITask::getRefTrigPretrigSamples() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigPretrigSamples(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigPretrigSamples(uInt32 data) {
	DAQmxErrChk(DAQmxSetRefTrigPretrigSamples(task, data));}
void NITask::resetRefTrigPretrigSamples() {
	DAQmxErrChk(DAQmxResetRefTrigPretrigSamples(task));}
QString NITask::getRefTrigTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetRefTrigTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
QString NITask::getDigEdgeRefTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeRefTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeRefTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeRefTrigSrc(task, data));}
void NITask::resetDigEdgeRefTrigSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeRefTrigSrc(task));}
int32 NITask::getDigEdgeRefTrigEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeRefTrigEdge(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeRefTrigEdge(int32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeRefTrigEdge(task, data));}
void NITask::resetDigEdgeRefTrigEdge() {
	DAQmxErrChk(DAQmxResetDigEdgeRefTrigEdge(task));}
bool32 NITask::getDigEdgeRefTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeRefTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeRefTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeRefTrigDigFltrEnable(task, data));}
void NITask::resetDigEdgeRefTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetDigEdgeRefTrigDigFltrEnable(task));}
float64 NITask::getDigEdgeRefTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeRefTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetDigEdgeRefTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth(task));}
QString NITask::getDigEdgeRefTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeRefTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetDigEdgeRefTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc(task));}
float64 NITask::getDigEdgeRefTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeRefTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate(task, data));}
void NITask::resetDigEdgeRefTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate(task));}
bool32 NITask::getDigEdgeRefTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeRefTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeRefTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeRefTrigDigSyncEnable(task, data));}
void NITask::resetDigEdgeRefTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetDigEdgeRefTrigDigSyncEnable(task));}
QString NITask::getDigPatternRefTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigPatternRefTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigPatternRefTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigPatternRefTrigSrc(task, data));}
void NITask::resetDigPatternRefTrigSrc() {
	DAQmxErrChk(DAQmxResetDigPatternRefTrigSrc(task));}
QString NITask::getDigPatternRefTrigPattern() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigPatternRefTrigPattern(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigPatternRefTrigPattern(const char *data) {
	DAQmxErrChk(DAQmxSetDigPatternRefTrigPattern(task, data));}
void NITask::resetDigPatternRefTrigPattern() {
	DAQmxErrChk(DAQmxResetDigPatternRefTrigPattern(task));}
int32 NITask::getDigPatternRefTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigPatternRefTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setDigPatternRefTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetDigPatternRefTrigWhen(task, data));}
void NITask::resetDigPatternRefTrigWhen() {
	DAQmxErrChk(DAQmxResetDigPatternRefTrigWhen(task));}
QString NITask::getAnlgEdgeRefTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgEdgeRefTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigSrc(task, data));}
void NITask::resetAnlgEdgeRefTrigSrc() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigSrc(task));}
int32 NITask::getAnlgEdgeRefTrigSlope() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigSlope(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigSlope(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigSlope(task, data));}
void NITask::resetAnlgEdgeRefTrigSlope() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigSlope(task));}
float64 NITask::getAnlgEdgeRefTrigLvl() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigLvl(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigLvl(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigLvl(task, data));}
void NITask::resetAnlgEdgeRefTrigLvl() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigLvl(task));}
float64 NITask::getAnlgEdgeRefTrigHyst() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigHyst(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigHyst(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigHyst(task, data));}
void NITask::resetAnlgEdgeRefTrigHyst() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigHyst(task));}
int32 NITask::getAnlgEdgeRefTrigCoupling() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigCoupling(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigCoupling(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigCoupling(task, data));}
void NITask::resetAnlgEdgeRefTrigCoupling() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigCoupling(task));}
bool32 NITask::getAnlgEdgeRefTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigDigFltrEnable(task, data));}
void NITask::resetAnlgEdgeRefTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigDigFltrEnable(task));}
float64 NITask::getAnlgEdgeRefTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetAnlgEdgeRefTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth(task));}
QString NITask::getAnlgEdgeRefTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgEdgeRefTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetAnlgEdgeRefTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc(task));}
float64 NITask::getAnlgEdgeRefTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate(task, data));}
void NITask::resetAnlgEdgeRefTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate(task));}
bool32 NITask::getAnlgEdgeRefTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgEdgeRefTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgEdgeRefTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgEdgeRefTrigDigSyncEnable(task, data));}
void NITask::resetAnlgEdgeRefTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetAnlgEdgeRefTrigDigSyncEnable(task));}
QString NITask::getAnlgMultiEdgeRefTrigSrcs() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeRefTrigSrcs(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgMultiEdgeRefTrigSrcs(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeRefTrigSrcs(task, data));}
void NITask::resetAnlgMultiEdgeRefTrigSrcs() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeRefTrigSrcs(task));}
void NITask::getAnlgMultiEdgeRefTrigSlopes(int32 *data,
					uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeRefTrigSlopes(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeRefTrigSlopes(int32 *data,
					uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeRefTrigSlopes(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeRefTrigSlopes() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeRefTrigSlopes(task));}
void NITask::getAnlgMultiEdgeRefTrigLvls(float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeRefTrigLvls(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeRefTrigLvls(float64 *data,
				      uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeRefTrigLvls(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeRefTrigLvls() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeRefTrigLvls(task));}
void NITask::getAnlgMultiEdgeRefTrigHysts(float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeRefTrigHysts(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeRefTrigHysts(float64 *data,
				       uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeRefTrigHysts(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeRefTrigHysts() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeRefTrigHysts(task));}
void NITask::getAnlgMultiEdgeRefTrigCouplings(int32 *data,
					   uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxGetAnlgMultiEdgeRefTrigCouplings(task, data, arraySizeInElements));}
void NITask::setAnlgMultiEdgeRefTrigCouplings(int32 *data,
					   uInt32 arraySizeInElements) {
	DAQmxErrChk(DAQmxSetAnlgMultiEdgeRefTrigCouplings(task, data, arraySizeInElements));}
void NITask::resetAnlgMultiEdgeRefTrigCouplings() {
	DAQmxErrChk(DAQmxResetAnlgMultiEdgeRefTrigCouplings(task));}
QString NITask::getAnlgWinRefTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgWinRefTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigSrc(task, data));}
void NITask::resetAnlgWinRefTrigSrc() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigSrc(task));}
int32 NITask::getAnlgWinRefTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigWhen(task, data));}
void NITask::resetAnlgWinRefTrigWhen() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigWhen(task));}
float64 NITask::getAnlgWinRefTrigTop() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigTop(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigTop(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigTop(task, data));}
void NITask::resetAnlgWinRefTrigTop() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigTop(task));}
float64 NITask::getAnlgWinRefTrigBtm() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigBtm(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigBtm(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigBtm(task, data));}
void NITask::resetAnlgWinRefTrigBtm() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigBtm(task));}
int32 NITask::getAnlgWinRefTrigCoupling() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigCoupling(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigCoupling(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigCoupling(task, data));}
void NITask::resetAnlgWinRefTrigCoupling() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigCoupling(task));}
bool32 NITask::getAnlgWinRefTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigDigFltrEnable(task, data));}
void NITask::resetAnlgWinRefTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigDigFltrEnable(task));}
float64 NITask::getAnlgWinRefTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetAnlgWinRefTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth(task));}
QString NITask::getAnlgWinRefTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgWinRefTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetAnlgWinRefTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc(task));}
float64 NITask::getAnlgWinRefTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate(task, data));}
void NITask::resetAnlgWinRefTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate(task));}
bool32 NITask::getAnlgWinRefTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinRefTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinRefTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinRefTrigDigSyncEnable(task, data));}
void NITask::resetAnlgWinRefTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetAnlgWinRefTrigDigSyncEnable(task));}
bool32 NITask::getRefTrigAutoTrigEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigAutoTrigEnable(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigAutoTrigEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetRefTrigAutoTrigEnable(task, data));}
void NITask::resetRefTrigAutoTrigEnable() {
	DAQmxErrChk(DAQmxResetRefTrigAutoTrigEnable(task));}
bool32 NITask::getRefTrigAutoTriggered() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigAutoTriggered(task, &__temp__));
	return __temp__;

}
bool32 NITask::getRefTrigTimestampEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigTimestampEnable(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigTimestampEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetRefTrigTimestampEnable(task, data));}
void NITask::resetRefTrigTimestampEnable() {
	DAQmxErrChk(DAQmxResetRefTrigTimestampEnable(task));}
int32 NITask::getRefTrigTimestampTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigTimestampTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigTimestampTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetRefTrigTimestampTimescale(task, data));}
void NITask::resetRefTrigTimestampTimescale() {
	DAQmxErrChk(DAQmxResetRefTrigTimestampTimescale(task));}
CVIAbsoluteTime NITask::getRefTrigTimestampVal() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetRefTrigTimestampVal(task, &__temp__));
	return __temp__;

}
float64 NITask::getRefTrigDelay() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigDelay(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigDelay(float64 data) {
	DAQmxErrChk(DAQmxSetRefTrigDelay(task, data));}
void NITask::resetRefTrigDelay() {
	DAQmxErrChk(DAQmxResetRefTrigDelay(task));}
bool32 NITask::getRefTrigRetriggerable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigRetriggerable(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigRetriggerable(bool32 data) {
	DAQmxErrChk(DAQmxSetRefTrigRetriggerable(task, data));}
void NITask::resetRefTrigRetriggerable() {
	DAQmxErrChk(DAQmxResetRefTrigRetriggerable(task));}
float64 NITask::getRefTrigTrigWin() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigTrigWin(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigTrigWin(float64 data) {
	DAQmxErrChk(DAQmxSetRefTrigTrigWin(task, data));}
void NITask::resetRefTrigTrigWin() {
	DAQmxErrChk(DAQmxResetRefTrigTrigWin(task));}
float64 NITask::getRefTrigRetriggerWin() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigRetriggerWin(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigRetriggerWin(float64 data) {
	DAQmxErrChk(DAQmxSetRefTrigRetriggerWin(task, data));}
void NITask::resetRefTrigRetriggerWin() {
	DAQmxErrChk(DAQmxResetRefTrigRetriggerWin(task));}
uInt32 NITask::getRefTrigMaxNumTrigsToDetect() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetRefTrigMaxNumTrigsToDetect(task, &__temp__));
	return __temp__;

}
void NITask::setRefTrigMaxNumTrigsToDetect(uInt32 data) {
	DAQmxErrChk(DAQmxSetRefTrigMaxNumTrigsToDetect(task, data));}
void NITask::resetRefTrigMaxNumTrigsToDetect() {
	DAQmxErrChk(DAQmxResetRefTrigMaxNumTrigsToDetect(task));}
int32 NITask::getAdvTrigType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAdvTrigType(task, &__temp__));
	return __temp__;

}
void NITask::setAdvTrigType(int32 data) {
	DAQmxErrChk(DAQmxSetAdvTrigType(task, data));}
void NITask::resetAdvTrigType() {
	DAQmxErrChk(DAQmxResetAdvTrigType(task));}
QString NITask::getDigEdgeAdvTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeAdvTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeAdvTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeAdvTrigSrc(task, data));}
void NITask::resetDigEdgeAdvTrigSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeAdvTrigSrc(task));}
int32 NITask::getDigEdgeAdvTrigEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeAdvTrigEdge(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeAdvTrigEdge(int32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeAdvTrigEdge(task, data));}
void NITask::resetDigEdgeAdvTrigEdge() {
	DAQmxErrChk(DAQmxResetDigEdgeAdvTrigEdge(task));}
bool32 NITask::getDigEdgeAdvTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeAdvTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeAdvTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeAdvTrigDigFltrEnable(task, data));}
void NITask::resetDigEdgeAdvTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetDigEdgeAdvTrigDigFltrEnable(task));}
int32 NITask::getHshkTrigType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetHshkTrigType(task, &__temp__));
	return __temp__;

}
void NITask::setHshkTrigType(int32 data) {
	DAQmxErrChk(DAQmxSetHshkTrigType(task, data));}
void NITask::resetHshkTrigType() {
	DAQmxErrChk(DAQmxResetHshkTrigType(task));}
QString NITask::getInterlockedHshkTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetInterlockedHshkTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setInterlockedHshkTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetInterlockedHshkTrigSrc(task, data));}
void NITask::resetInterlockedHshkTrigSrc() {
	DAQmxErrChk(DAQmxResetInterlockedHshkTrigSrc(task));}
int32 NITask::getInterlockedHshkTrigAssertedLvl() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetInterlockedHshkTrigAssertedLvl(task, &__temp__));
	return __temp__;

}
void NITask::setInterlockedHshkTrigAssertedLvl(int32 data) {
	DAQmxErrChk(DAQmxSetInterlockedHshkTrigAssertedLvl(task, data));}
void NITask::resetInterlockedHshkTrigAssertedLvl() {
	DAQmxErrChk(DAQmxResetInterlockedHshkTrigAssertedLvl(task));}
int32 NITask::getPauseTrigType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetPauseTrigType(task, &__temp__));
	return __temp__;

}
void NITask::setPauseTrigType(int32 data) {
	DAQmxErrChk(DAQmxSetPauseTrigType(task, data));}
void NITask::resetPauseTrigType() {
	DAQmxErrChk(DAQmxResetPauseTrigType(task));}
QString NITask::getPauseTrigTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetPauseTrigTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
QString NITask::getAnlgLvlPauseTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgLvlPauseTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigSrc(task, data));}
void NITask::resetAnlgLvlPauseTrigSrc() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigSrc(task));}
int32 NITask::getAnlgLvlPauseTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigWhen(task, data));}
void NITask::resetAnlgLvlPauseTrigWhen() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigWhen(task));}
float64 NITask::getAnlgLvlPauseTrigLvl() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigLvl(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigLvl(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigLvl(task, data));}
void NITask::resetAnlgLvlPauseTrigLvl() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigLvl(task));}
float64 NITask::getAnlgLvlPauseTrigHyst() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigHyst(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigHyst(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigHyst(task, data));}
void NITask::resetAnlgLvlPauseTrigHyst() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigHyst(task));}
int32 NITask::getAnlgLvlPauseTrigCoupling() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigCoupling(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigCoupling(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigCoupling(task, data));}
void NITask::resetAnlgLvlPauseTrigCoupling() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigCoupling(task));}
bool32 NITask::getAnlgLvlPauseTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigDigFltrEnable(task, data));}
void NITask::resetAnlgLvlPauseTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigDigFltrEnable(task));}
float64 NITask::getAnlgLvlPauseTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetAnlgLvlPauseTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth(task));}
QString NITask::getAnlgLvlPauseTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgLvlPauseTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetAnlgLvlPauseTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc(task));}
float64 NITask::getAnlgLvlPauseTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate(task, data));}
void NITask::resetAnlgLvlPauseTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate(task));}
bool32 NITask::getAnlgLvlPauseTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgLvlPauseTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgLvlPauseTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgLvlPauseTrigDigSyncEnable(task, data));}
void NITask::resetAnlgLvlPauseTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetAnlgLvlPauseTrigDigSyncEnable(task));}
QString NITask::getAnlgWinPauseTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgWinPauseTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigSrc(task, data));}
void NITask::resetAnlgWinPauseTrigSrc() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigSrc(task));}
int32 NITask::getAnlgWinPauseTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigWhen(task, data));}
void NITask::resetAnlgWinPauseTrigWhen() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigWhen(task));}
float64 NITask::getAnlgWinPauseTrigTop() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigTop(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigTop(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigTop(task, data));}
void NITask::resetAnlgWinPauseTrigTop() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigTop(task));}
float64 NITask::getAnlgWinPauseTrigBtm() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigBtm(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigBtm(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigBtm(task, data));}
void NITask::resetAnlgWinPauseTrigBtm() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigBtm(task));}
int32 NITask::getAnlgWinPauseTrigCoupling() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigCoupling(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigCoupling(int32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigCoupling(task, data));}
void NITask::resetAnlgWinPauseTrigCoupling() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigCoupling(task));}
bool32 NITask::getAnlgWinPauseTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigDigFltrEnable(task, data));}
void NITask::resetAnlgWinPauseTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigDigFltrEnable(task));}
float64 NITask::getAnlgWinPauseTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetAnlgWinPauseTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth(task));}
QString NITask::getAnlgWinPauseTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setAnlgWinPauseTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetAnlgWinPauseTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc(task));}
float64 NITask::getAnlgWinPauseTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate(task, data));}
void NITask::resetAnlgWinPauseTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate(task));}
bool32 NITask::getAnlgWinPauseTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetAnlgWinPauseTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setAnlgWinPauseTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetAnlgWinPauseTrigDigSyncEnable(task, data));}
void NITask::resetAnlgWinPauseTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetAnlgWinPauseTrigDigSyncEnable(task));}
QString NITask::getDigLvlPauseTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigLvlPauseTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigLvlPauseTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigLvlPauseTrigSrc(task, data));}
void NITask::resetDigLvlPauseTrigSrc() {
	DAQmxErrChk(DAQmxResetDigLvlPauseTrigSrc(task));}
int32 NITask::getDigLvlPauseTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigLvlPauseTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setDigLvlPauseTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetDigLvlPauseTrigWhen(task, data));}
void NITask::resetDigLvlPauseTrigWhen() {
	DAQmxErrChk(DAQmxResetDigLvlPauseTrigWhen(task));}
bool32 NITask::getDigLvlPauseTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigLvlPauseTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigLvlPauseTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigLvlPauseTrigDigFltrEnable(task, data));}
void NITask::resetDigLvlPauseTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetDigLvlPauseTrigDigFltrEnable(task));}
float64 NITask::getDigLvlPauseTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setDigLvlPauseTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetDigLvlPauseTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth(task));}
QString NITask::getDigLvlPauseTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigLvlPauseTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetDigLvlPauseTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc(task));}
float64 NITask::getDigLvlPauseTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setDigLvlPauseTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate(task, data));}
void NITask::resetDigLvlPauseTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate(task));}
bool32 NITask::getDigLvlPauseTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigLvlPauseTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigLvlPauseTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigLvlPauseTrigDigSyncEnable(task, data));}
void NITask::resetDigLvlPauseTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetDigLvlPauseTrigDigSyncEnable(task));}
QString NITask::getDigPatternPauseTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigPatternPauseTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigPatternPauseTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigPatternPauseTrigSrc(task, data));}
void NITask::resetDigPatternPauseTrigSrc() {
	DAQmxErrChk(DAQmxResetDigPatternPauseTrigSrc(task));}
QString NITask::getDigPatternPauseTrigPattern() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigPatternPauseTrigPattern(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigPatternPauseTrigPattern(const char *data) {
	DAQmxErrChk(DAQmxSetDigPatternPauseTrigPattern(task, data));}
void NITask::resetDigPatternPauseTrigPattern() {
	DAQmxErrChk(DAQmxResetDigPatternPauseTrigPattern(task));}
int32 NITask::getDigPatternPauseTrigWhen() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigPatternPauseTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setDigPatternPauseTrigWhen(int32 data) {
	DAQmxErrChk(DAQmxSetDigPatternPauseTrigWhen(task, data));}
void NITask::resetDigPatternPauseTrigWhen() {
	DAQmxErrChk(DAQmxResetDigPatternPauseTrigWhen(task));}
int32 NITask::getArmStartTrigType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetArmStartTrigType(task, &__temp__));
	return __temp__;

}
void NITask::setArmStartTrigType(int32 data) {
	DAQmxErrChk(DAQmxSetArmStartTrigType(task, data));}
void NITask::resetArmStartTrigType() {
	DAQmxErrChk(DAQmxResetArmStartTrigType(task));}
QString NITask::getArmStartTerm() {

	char buf[256];
	DAQmxErrChk(DAQmxGetArmStartTerm(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
QString NITask::getDigEdgeArmStartTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeArmStartTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeArmStartTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeArmStartTrigSrc(task, data));}
void NITask::resetDigEdgeArmStartTrigSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeArmStartTrigSrc(task));}
int32 NITask::getDigEdgeArmStartTrigEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeArmStartTrigEdge(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeArmStartTrigEdge(int32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeArmStartTrigEdge(task, data));}
void NITask::resetDigEdgeArmStartTrigEdge() {
	DAQmxErrChk(DAQmxResetDigEdgeArmStartTrigEdge(task));}
bool32 NITask::getDigEdgeArmStartTrigDigFltrEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeArmStartTrigDigFltrEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeArmStartTrigDigFltrEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeArmStartTrigDigFltrEnable(task, data));}
void NITask::resetDigEdgeArmStartTrigDigFltrEnable() {
	DAQmxErrChk(DAQmxResetDigEdgeArmStartTrigDigFltrEnable(task));}
float64 NITask::getDigEdgeArmStartTrigDigFltrMinPulseWidth() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeArmStartTrigDigFltrMinPulseWidth(float64 data) {
	DAQmxErrChk(DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth(task, data));}
void NITask::resetDigEdgeArmStartTrigDigFltrMinPulseWidth() {
	DAQmxErrChk(DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth(task));}
QString NITask::getDigEdgeArmStartTrigDigFltrTimebaseSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeArmStartTrigDigFltrTimebaseSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc(task, data));}
void NITask::resetDigEdgeArmStartTrigDigFltrTimebaseSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc(task));}
float64 NITask::getDigEdgeArmStartTrigDigFltrTimebaseRate() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeArmStartTrigDigFltrTimebaseRate(float64 data) {
	DAQmxErrChk(DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate(task, data));}
void NITask::resetDigEdgeArmStartTrigDigFltrTimebaseRate() {
	DAQmxErrChk(DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate(task));}
bool32 NITask::getDigEdgeArmStartTrigDigSyncEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeArmStartTrigDigSyncEnable(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeArmStartTrigDigSyncEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeArmStartTrigDigSyncEnable(task, data));}
void NITask::resetDigEdgeArmStartTrigDigSyncEnable() {
	DAQmxErrChk(DAQmxResetDigEdgeArmStartTrigDigSyncEnable(task));}
CVIAbsoluteTime NITask::getArmStartTrigTrigWhen() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetArmStartTrigTrigWhen(task, &__temp__));
	return __temp__;

}
void NITask::setArmStartTrigTrigWhen(CVIAbsoluteTime data) {
	DAQmxErrChk(DAQmxSetArmStartTrigTrigWhen(task, data));}
void NITask::resetArmStartTrigTrigWhen() {
	DAQmxErrChk(DAQmxResetArmStartTrigTrigWhen(task));}
int32 NITask::getArmStartTrigTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetArmStartTrigTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setArmStartTrigTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetArmStartTrigTimescale(task, data));}
void NITask::resetArmStartTrigTimescale() {
	DAQmxErrChk(DAQmxResetArmStartTrigTimescale(task));}
bool32 NITask::getArmStartTrigTimestampEnable() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetArmStartTrigTimestampEnable(task, &__temp__));
	return __temp__;

}
void NITask::setArmStartTrigTimestampEnable(bool32 data) {
	DAQmxErrChk(DAQmxSetArmStartTrigTimestampEnable(task, data));}
void NITask::resetArmStartTrigTimestampEnable() {
	DAQmxErrChk(DAQmxResetArmStartTrigTimestampEnable(task));}
int32 NITask::getArmStartTrigTimestampTimescale() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetArmStartTrigTimestampTimescale(task, &__temp__));
	return __temp__;

}
void NITask::setArmStartTrigTimestampTimescale(int32 data) {
	DAQmxErrChk(DAQmxSetArmStartTrigTimestampTimescale(task, data));}
void NITask::resetArmStartTrigTimestampTimescale() {
	DAQmxErrChk(DAQmxResetArmStartTrigTimestampTimescale(task));}
CVIAbsoluteTime NITask::getArmStartTrigTimestampVal() {

	CVIAbsoluteTime __temp__;
	DAQmxErrChk(DAQmxGetArmStartTrigTimestampVal(task, &__temp__));
	return __temp__;

}
int32 NITask::getTriggerSyncType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetTriggerSyncType(task, &__temp__));
	return __temp__;

}
void NITask::setTriggerSyncType(int32 data) {
	DAQmxErrChk(DAQmxSetTriggerSyncType(task, data));}
void NITask::resetTriggerSyncType() {
	DAQmxErrChk(DAQmxResetTriggerSyncType(task));}
float64 NITask::getWatchdogTimeout() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetWatchdogTimeout(task, &__temp__));
	return __temp__;

}
void NITask::setWatchdogTimeout(float64 data) {
	DAQmxErrChk(DAQmxSetWatchdogTimeout(task, data));}
void NITask::resetWatchdogTimeout() {
	DAQmxErrChk(DAQmxResetWatchdogTimeout(task));}
int32 NITask::getWatchdogExpirTrigType() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetWatchdogExpirTrigType(task, &__temp__));
	return __temp__;

}
void NITask::setWatchdogExpirTrigType(int32 data) {
	DAQmxErrChk(DAQmxSetWatchdogExpirTrigType(task, data));}
void NITask::resetWatchdogExpirTrigType() {
	DAQmxErrChk(DAQmxResetWatchdogExpirTrigType(task));}
bool32 NITask::getWatchdogExpirTrigTrigOnNetworkConnLoss() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWatchdogExpirTrigTrigOnNetworkConnLoss(task, &__temp__));
	return __temp__;

}
void NITask::setWatchdogExpirTrigTrigOnNetworkConnLoss(bool32 data) {
	DAQmxErrChk(DAQmxSetWatchdogExpirTrigTrigOnNetworkConnLoss(task, data));}
void NITask::resetWatchdogExpirTrigTrigOnNetworkConnLoss() {
	DAQmxErrChk(DAQmxResetWatchdogExpirTrigTrigOnNetworkConnLoss(task));}
QString NITask::getDigEdgeWatchdogExpirTrigSrc() {

	char buf[256];
	DAQmxErrChk(DAQmxGetDigEdgeWatchdogExpirTrigSrc(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
void NITask::setDigEdgeWatchdogExpirTrigSrc(const char *data) {
	DAQmxErrChk(DAQmxSetDigEdgeWatchdogExpirTrigSrc(task, data));}
void NITask::resetDigEdgeWatchdogExpirTrigSrc() {
	DAQmxErrChk(DAQmxResetDigEdgeWatchdogExpirTrigSrc(task));}
int32 NITask::getDigEdgeWatchdogExpirTrigEdge() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetDigEdgeWatchdogExpirTrigEdge(task, &__temp__));
	return __temp__;

}
void NITask::setDigEdgeWatchdogExpirTrigEdge(int32 data) {
	DAQmxErrChk(DAQmxSetDigEdgeWatchdogExpirTrigEdge(task, data));}
void NITask::resetDigEdgeWatchdogExpirTrigEdge() {
	DAQmxErrChk(DAQmxResetDigEdgeWatchdogExpirTrigEdge(task));}
void NITask::getWatchdogDOExpirState(const char lines[], int32 *data) {
	DAQmxErrChk(DAQmxGetWatchdogDOExpirState(task, lines, data));}
void NITask::setWatchdogDOExpirState(const char lines[], int32 data) {
	DAQmxErrChk(DAQmxSetWatchdogDOExpirState(task, lines, data));}
void NITask::resetWatchdogDOExpirState(const char lines[]) {
	DAQmxErrChk(DAQmxResetWatchdogDOExpirState(task, lines));}
void NITask::getWatchdogAOOutputType(const char lines[], int32 *data) {
	DAQmxErrChk(DAQmxGetWatchdogAOOutputType(task, lines, data));}
void NITask::setWatchdogAOOutputType(const char lines[], int32 data) {
	DAQmxErrChk(DAQmxSetWatchdogAOOutputType(task, lines, data));}
void NITask::resetWatchdogAOOutputType(const char lines[]) {
	DAQmxErrChk(DAQmxResetWatchdogAOOutputType(task, lines));}
void NITask::getWatchdogAOExpirState(const char lines[], float64 *data) {
	DAQmxErrChk(DAQmxGetWatchdogAOExpirState(task, lines, data));}
void NITask::setWatchdogAOExpirState(const char lines[], float64 data) {
	DAQmxErrChk(DAQmxSetWatchdogAOExpirState(task, lines, data));}
void NITask::resetWatchdogAOExpirState(const char lines[]) {
	DAQmxErrChk(DAQmxResetWatchdogAOExpirState(task, lines));}
void NITask::getWatchdogCOExpirState(const char lines[], int32 *data) {
	DAQmxErrChk(DAQmxGetWatchdogCOExpirState(task, lines, data));}
void NITask::setWatchdogCOExpirState(const char lines[], int32 data) {
	DAQmxErrChk(DAQmxSetWatchdogCOExpirState(task, lines, data));}
void NITask::resetWatchdogCOExpirState(const char lines[]) {
	DAQmxErrChk(DAQmxResetWatchdogCOExpirState(task, lines));}
bool32 NITask::getWatchdogHasExpired() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWatchdogHasExpired(task, &__temp__));
	return __temp__;

}
int32 NITask::getWriteRelativeTo() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetWriteRelativeTo(task, &__temp__));
	return __temp__;

}
void NITask::setWriteRelativeTo(int32 data) {
	DAQmxErrChk(DAQmxSetWriteRelativeTo(task, data));}
void NITask::resetWriteRelativeTo() {
	DAQmxErrChk(DAQmxResetWriteRelativeTo(task));}
int32 NITask::getWriteOffset() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetWriteOffset(task, &__temp__));
	return __temp__;

}
void NITask::setWriteOffset(int32 data) {
	DAQmxErrChk(DAQmxSetWriteOffset(task, data));}
void NITask::resetWriteOffset() {
	DAQmxErrChk(DAQmxResetWriteOffset(task));}
int32 NITask::getWriteRegenMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetWriteRegenMode(task, &__temp__));
	return __temp__;

}
void NITask::setWriteRegenMode(int32 data) {
	DAQmxErrChk(DAQmxSetWriteRegenMode(task, data));}
void NITask::resetWriteRegenMode() {
	DAQmxErrChk(DAQmxResetWriteRegenMode(task));}
uInt64 NITask::getWriteCurrWritePos() {

	uInt64 __temp__;
	DAQmxErrChk(DAQmxGetWriteCurrWritePos(task, &__temp__));
	return __temp__;

}
bool32 NITask::getWriteOvercurrentChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWriteOvercurrentChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getWriteOvercurrentChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWriteOvercurrentChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getWriteOvertemperatureChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWriteOvertemperatureChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getWriteOvertemperatureChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWriteOvertemperatureChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getWriteExternalOvervoltageChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWriteExternalOvervoltageChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getWriteExternalOvervoltageChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWriteExternalOvervoltageChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getWriteOverloadedChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWriteOverloadedChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getWriteOverloadedChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWriteOverloadedChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getWriteOpenCurrentLoopChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWriteOpenCurrentLoopChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getWriteOpenCurrentLoopChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWriteOpenCurrentLoopChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getWritePowerSupplyFaultChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWritePowerSupplyFaultChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getWritePowerSupplyFaultChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWritePowerSupplyFaultChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
bool32 NITask::getWriteSyncUnlockedChansExist() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWriteSyncUnlockedChansExist(task, &__temp__));
	return __temp__;

}
QString NITask::getWriteSyncUnlockedChans() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWriteSyncUnlockedChans(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
uInt32 NITask::getWriteSpaceAvail() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetWriteSpaceAvail(task, &__temp__));
	return __temp__;

}
uInt64 NITask::getWriteTotalSampPerChanGenerated() {

	uInt64 __temp__;
	DAQmxErrChk(DAQmxGetWriteTotalSampPerChanGenerated(task, &__temp__));
	return __temp__;

}
bool32 NITask::getWriteAccessoryInsertionOrRemovalDetected() {

	bool32 __temp__;
	DAQmxErrChk(DAQmxGetWriteAccessoryInsertionOrRemovalDetected(task, &__temp__));
	return __temp__;

}
QString NITask::getWriteDevsWithInsertedOrRemovedAccessories() {

	char buf[256];
	DAQmxErrChk(DAQmxGetWriteDevsWithInsertedOrRemovedAccessories(task, buf, 256));
	QString s;
	s += buf;
	return s;

}
uInt32 NITask::getWriteRawDataWidth() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetWriteRawDataWidth(task, &__temp__));
	return __temp__;

}
uInt32 NITask::getWriteNumChans() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetWriteNumChans(task, &__temp__));
	return __temp__;

}
int32 NITask::getWriteWaitMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetWriteWaitMode(task, &__temp__));
	return __temp__;

}
void NITask::setWriteWaitMode(int32 data) {
	DAQmxErrChk(DAQmxSetWriteWaitMode(task, data));}
void NITask::resetWriteWaitMode() {
	DAQmxErrChk(DAQmxResetWriteWaitMode(task));}
float64 NITask::getWriteSleepTime() {

	float64 __temp__;
	DAQmxErrChk(DAQmxGetWriteSleepTime(task, &__temp__));
	return __temp__;

}
void NITask::setWriteSleepTime(float64 data) {
	DAQmxErrChk(DAQmxSetWriteSleepTime(task, data));}
void NITask::resetWriteSleepTime() {
	DAQmxErrChk(DAQmxResetWriteSleepTime(task));}
uInt32 NITask::getWriteDigitalLinesBytesPerChan() {

	uInt32 __temp__;
	DAQmxErrChk(DAQmxGetWriteDigitalLinesBytesPerChan(task, &__temp__));
	return __temp__;

}
int32 NITask::getSampClkTimingResponseMode() {

	int32 __temp__;
	DAQmxErrChk(DAQmxGetSampClkTimingResponseMode(task, &__temp__));
	return __temp__;

}
void NITask::setSampClkTimingResponseMode(int32 data) {
	DAQmxErrChk(DAQmxSetSampClkTimingResponseMode(task, data));}
void NITask::resetSampClkTimingResponseMode() {
	DAQmxErrChk(DAQmxResetSampClkTimingResponseMode(task));}
