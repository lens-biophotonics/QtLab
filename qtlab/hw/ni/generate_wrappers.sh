#!/usr/bin/env bash

echo "Generating wrappers for NIDAQmx, please wait. This may take some time."

NIDAQmx_file=$1
OUTPUT_DIR=$2

OUTFILE_CPP=${OUTPUT_DIR}/NIDAQmx_wrapper_methods.cpp
OUTFILE_H=${OUTPUT_DIR}/NIDAQmx_wrapper_methods.h

grep 'int32 __CFUNC.*(TaskHandle taskHandle.*);' ${NIDAQmx_file} | perl -pe 's/;.*$/ {return 0;}/' > ${OUTPUT_DIR}/NIDAQmx_dummy.cpp
grep 'int32 __CFUNC .*(TaskHandle taskHandle.*);' ${NIDAQmx_file} > ${OUTFILE_H}
perl -pe 's/;.*$/ {}/' $OUTFILE_H > $OUTFILE_CPP
spatch --in-place wrapper.cocci "$OUTFILE_CPP" &> /dev/null || exit 1

# for s in channel channelName channelNames physicalChannel deviceNames nameToAssignToChannel customScaleName nameToAssignToLines lines saveAs author outputTerminal triggerSource triggerPattern counter cjcChannel sourceTerminal source sampleClkOutpTerm sampleClkSrc risingEdgeChan fallingEdgeChan filePath groupName
# do
# sedArg="s/const char ($s)\[\]/const QString \&\1/"
# perl -p -i -e "$sedArg" $OUTFILE_CPP
# sedArg="s/(?<!&)($s)(?![A-z0-9_])/\1.toLatin1()/"
# perl -p -i -e "$sedArg" $OUTFILE_CPP
# done
#
# cp $OUTFILE_CPP backup.cpp
# cp $OUTFILE_H backup.h

# cp backup.cpp $OUTFILE_CPP
# cp backup.h $OUTFILE_H

perl -i -pe 's/TrigEdge(int32 data)/TrigEdge(NITask::Edge data)/' $OUTFILE_CPP
perl -i -pe 's/int32 (edge)/NITask::Edge \1/' $OUTFILE_CPP
perl -i -pe 's/int32 (triggerEdge)/NITask::Edge \1/' $OUTFILE_CPP
perl -i -pe 's/int32 (activeEdge)/NITask::Edge \1/' $OUTFILE_CPP
perl -i -pe 's/int32 (sampleMode)/NITask::SampleMode \1/' $OUTFILE_CPP
perl -i -pe 's/int32 (lineGrouping)/NITask::LineGrouping \1/' $OUTFILE_CPP
perl -i -pe 's/bool32 (dataLayout)/NITask::DataLayout \1/' $OUTFILE_CPP
# perl -i -pe 's/int32 (DAQmxGet.*TrigEdge\()/NITask::TrigEdge \1/' $OUTFILE_CPP
perl -i -pe 's/int32 (terminalConfig)/NITask::TerminalConfig \1/' $OUTFILE_CPP
perl -i -pe 's/int32 (idleState)/NITask::IdleState \1/' $OUTFILE_CPP

# remove Task from function name
# perl -i -pe 's/([A-z0-9_]+)\s+([A-z0-9_]*)ToTask([A-z0-9_]*\()/\1 \2\3/' $OUTFILE_CPP
# perl -i -pe 's/([A-z0-9_]+)\s+([A-z0-9_]*)Task([A-z0-9_]*\()/\1 \2\3/' $OUTFILE_CPP

# strip DAQmx prefix, make first method letter lowercase
perl -i -pe 's/([A-z0-9_]+)\s+DAQmx([A-Z])?([A-z0-9_\s]*\()/\1 \L\2\E\3/' $OUTFILE_CPP

sed -i '1i//THIS FILE IS AUTOGENERATED -- DO NOT EDIT' $OUTFILE_CPP

perl -0777 -pe 's/ \{.*?\}/;/gs' $OUTFILE_CPP > $OUTFILE_H
perl -i -pe 's/([A-z0-9_]+)\s+(.*\()/\1 NITask::\2/' $OUTFILE_CPP
